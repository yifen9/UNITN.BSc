{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bachelor of Computer Science","text":"UniTrento BSc 2024/2025 Did you study today?"},{"location":"courses/","title":"Courses","text":""},{"location":"courses/#index","title":"Index","text":"Course ID Professor Moodle Introduction to Computer and Network Security 145937 Ranise 39628 Computer Architechtures 145992 Yildirim 40747 Databases 145993 Siracusa 39296 Calculus 1 146055 Pugliese 39114 Geometry and Linear Algebra 146056 Occhetta 39175 Probability 146060 Bonaccorsi 40332 Computer Programming 2 146062 Marchese 41190 Computer Programming 1 146140 Marchetto 39259 Calculus 2 146141 Wiygul 40310 Functional Programming 146168 Kuper 40605 Computational Logic 146199 Szymanik 39518 Mathematics for Informatics 146289 Chittaro 40688 Algorithms and Data Structures part 1 146290 Vella 39264"},{"location":"courses/#study-plan","title":"Study Plan","text":""},{"location":"courses/145937_39628_RANISE_Introduction_to_Computer_and_Network_Security/","title":"Introduction to Computer and Network Security","text":"<p>\u2190 Back</p>"},{"location":"courses/145937_39628_RANISE_Introduction_to_Computer_and_Network_Security/#basic-info","title":"Basic Info","text":"<ul> <li>Course ID: 145937</li> <li>Professor: Ranise</li> <li> <p>Moodle</p> </li> <li> <p>Download</p> </li> </ul> Name Type Item Size README md / 373 B"},{"location":"courses/145937_39628_RANISE_Introduction_to_Computer_and_Network_Security/#more-info","title":"More Info","text":""},{"location":"courses/145937_39628_RANISE_Introduction_to_Computer_and_Network_Security/#moodle-link","title":"Moodle Link","text":"<ul> <li>[145937] Introduction to Computer and Network Security - RANISE</li> </ul>"},{"location":"courses/145937_39628_RANISE_Introduction_to_Computer_and_Network_Security/#textbook","title":"Textbook","text":"<ul> <li>Computer Security - Dieter Gollmann - Third Edition - Hamburg University of Technology</li> </ul>"},{"location":"courses/145937_39628_RANISE_Introduction_to_Computer_and_Network_Security/#about","title":"About","text":"<ul> <li>CyBOK</li> </ul>"},{"location":"courses/145937_39628_RANISE_Introduction_to_Computer_and_Network_Security/README.md/","title":"README","text":"<p>\u2190 Back</p>"},{"location":"courses/145937_39628_RANISE_Introduction_to_Computer_and_Network_Security/README.md/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    md</li> <li>Size:    373 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Introduction to Computer and Network Security\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"courses/145937_39628_RANISE_Introduction_to_Computer_and_Network_Security/README.md/#more-info","title":"More Info","text":""},{"location":"courses/145937_39628_RANISE_Introduction_to_Computer_and_Network_Security/README.md/#moodle-link","title":"Moodle Link","text":"<ul> <li>[145937] Introduction to Computer and Network Security - RANISE</li> </ul>"},{"location":"courses/145937_39628_RANISE_Introduction_to_Computer_and_Network_Security/README.md/#textbook","title":"Textbook","text":"<ul> <li>Computer Security - Dieter Gollmann - Third Edition - Hamburg University of Technology</li> </ul>"},{"location":"courses/145937_39628_RANISE_Introduction_to_Computer_and_Network_Security/README.md/#about","title":"About","text":"<ul> <li>CyBOK</li> </ul>"},{"location":"courses/145992_40747_YILDIRIM_Computer_Architechtures/","title":"Computer Architechtures","text":"<p>\u2190 Back</p>"},{"location":"courses/145992_40747_YILDIRIM_Computer_Architechtures/#basic-info","title":"Basic Info","text":"<ul> <li>Course ID: 145992</li> <li>Professor: Yildirim</li> <li> <p>Moodle</p> </li> <li> <p>Download</p> </li> </ul> Name Type Item Size README md / 1 KiB"},{"location":"courses/145992_40747_YILDIRIM_Computer_Architechtures/#more-info","title":"More Info","text":""},{"location":"courses/145992_40747_YILDIRIM_Computer_Architechtures/#moodle-link","title":"Moodle Link","text":"<ul> <li>[145992] Computer Architectures - YILDIRIM</li> </ul>"},{"location":"courses/145992_40747_YILDIRIM_Computer_Architechtures/#textbook","title":"Textbook","text":"<ul> <li>Computer Organization and Design RISC-V Edition: The Hardware Software Interface - David A. Patterson, John L. Hennessy</li> </ul>"},{"location":"courses/145992_40747_YILDIRIM_Computer_Architechtures/#about","title":"About","text":"<ul> <li>Floating-Point \u2013 Loss of Precision<ul> <li>Decimal to 64 Bit IEEE 754 Binary: Convert Number 0.1 to 64 Bit Double Precision IEEE 754 Binary Floating Point Representation Standard, From Base Ten Decimal System</li> </ul> </li> <li>RISC-V Reference Data<ul> <li>RISC-V Reference Data Card (\u201cGreen Card\u201d)</li> </ul> </li> <li>RISC-V GCC translation<ul> <li>Calling Convention</li> </ul> </li> <li>Compiler Explorer<ul> <li>Compiler Explorer</li> </ul> </li> <li>Intel instructions<ul> <li>x86 instruction listings</li> </ul> </li> </ul>"},{"location":"courses/145992_40747_YILDIRIM_Computer_Architechtures/README.md/","title":"README","text":"<p>\u2190 Back</p>"},{"location":"courses/145992_40747_YILDIRIM_Computer_Architechtures/README.md/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    md</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Architechtures\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"courses/145992_40747_YILDIRIM_Computer_Architechtures/README.md/#more-info","title":"More Info","text":""},{"location":"courses/145992_40747_YILDIRIM_Computer_Architechtures/README.md/#moodle-link","title":"Moodle Link","text":"<ul> <li>[145992] Computer Architectures - YILDIRIM</li> </ul>"},{"location":"courses/145992_40747_YILDIRIM_Computer_Architechtures/README.md/#textbook","title":"Textbook","text":"<ul> <li>Computer Organization and Design RISC-V Edition: The Hardware Software Interface - David A. Patterson, John L. Hennessy</li> </ul>"},{"location":"courses/145992_40747_YILDIRIM_Computer_Architechtures/README.md/#about","title":"About","text":"<ul> <li>Floating-Point \u2013 Loss of Precision<ul> <li>Decimal to 64 Bit IEEE 754 Binary: Convert Number 0.1 to 64 Bit Double Precision IEEE 754 Binary Floating Point Representation Standard, From Base Ten Decimal System</li> </ul> </li> <li>RISC-V Reference Data<ul> <li>RISC-V Reference Data Card (\u201cGreen Card\u201d)</li> </ul> </li> <li>RISC-V GCC translation<ul> <li>Calling Convention</li> </ul> </li> <li>Compiler Explorer<ul> <li>Compiler Explorer</li> </ul> </li> <li>Intel instructions<ul> <li>x86 instruction listings</li> </ul> </li> </ul>"},{"location":"courses/145993_39296_SIRACUSA_Databases/","title":"Databases","text":"<p>\u2190 Back</p>"},{"location":"courses/145993_39296_SIRACUSA_Databases/#basic-info","title":"Basic Info","text":"<ul> <li>Course ID: 145993</li> <li>Professor: Siracusa</li> <li> <p>Moodle</p> </li> <li> <p>Download</p> </li> </ul> Name Type Item Size README md / 772 B"},{"location":"courses/145993_39296_SIRACUSA_Databases/#more-info","title":"More Info","text":""},{"location":"courses/145993_39296_SIRACUSA_Databases/#moodle-link","title":"Moodle Link","text":"<ul> <li>[145993] Databases - SIRACUSA</li> </ul>"},{"location":"courses/145993_39296_SIRACUSA_Databases/#textbook","title":"Textbook","text":"<ul> <li>Database System Concepts - Abraham Silberschatz, Henry F. Korth, S. Sudarshan - Seventh Edition - Yale University, Lehigh University, Indian Institute of Technology</li> <li>Database Management Systems - Raghu Ramakkrishnan, Johannes Gehrke - Third Edition - University of Wisconsin, Cornell University</li> <li>Database Systems: Concepts, Languages &amp; Architectures - Paolo Atzeni, Stefano Ceri, Stefano Paraboschi, Riccardo Torlone</li> </ul>"},{"location":"courses/145993_39296_SIRACUSA_Databases/README.md/","title":"README","text":"<p>\u2190 Back</p>"},{"location":"courses/145993_39296_SIRACUSA_Databases/README.md/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    md</li> <li>Size:    772 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Databases\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"courses/145993_39296_SIRACUSA_Databases/README.md/#more-info","title":"More Info","text":""},{"location":"courses/145993_39296_SIRACUSA_Databases/README.md/#moodle-link","title":"Moodle Link","text":"<ul> <li>[145993] Databases - SIRACUSA</li> </ul>"},{"location":"courses/145993_39296_SIRACUSA_Databases/README.md/#textbook","title":"Textbook","text":"<ul> <li>Database System Concepts - Abraham Silberschatz, Henry F. Korth, S. Sudarshan - Seventh Edition - Yale University, Lehigh University, Indian Institute of Technology</li> <li>Database Management Systems - Raghu Ramakkrishnan, Johannes Gehrke - Third Edition - University of Wisconsin, Cornell University</li> <li>Database Systems: Concepts, Languages &amp; Architectures - Paolo Atzeni, Stefano Ceri, Stefano Paraboschi, Riccardo Torlone</li> </ul>"},{"location":"courses/146055_39114_PUGLIESE_Calculus_1/","title":"Calculus 1","text":"<p>\u2190 Back</p>"},{"location":"courses/146055_39114_PUGLIESE_Calculus_1/#basic-info","title":"Basic Info","text":"<ul> <li>Course ID: 146055</li> <li>Professor: Pugliese</li> <li> <p>Moodle</p> </li> <li> <p>Download</p> </li> </ul> Name Type Item Size README md / 360 B"},{"location":"courses/146055_39114_PUGLIESE_Calculus_1/#more-info","title":"More Info","text":""},{"location":"courses/146055_39114_PUGLIESE_Calculus_1/#moodle-link","title":"Moodle Link","text":"<ul> <li>[146055] Calculus 1 - PUGLIESE</li> </ul>"},{"location":"courses/146055_39114_PUGLIESE_Calculus_1/#textbook","title":"Textbook","text":"<ul> <li>Analisi matematica I - Canuto Claudio, Tabacco Anita - 3 edizione - Politecnico di Torino</li> </ul>"},{"location":"courses/146055_39114_PUGLIESE_Calculus_1/#about","title":"About","text":"<ul> <li>taking notes<ul> <li>Goodnotes</li> </ul> </li> </ul>"},{"location":"courses/146055_39114_PUGLIESE_Calculus_1/README.md/","title":"README","text":"<p>\u2190 Back</p>"},{"location":"courses/146055_39114_PUGLIESE_Calculus_1/README.md/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    md</li> <li>Size:    360 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Calculus 1\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"courses/146055_39114_PUGLIESE_Calculus_1/README.md/#more-info","title":"More Info","text":""},{"location":"courses/146055_39114_PUGLIESE_Calculus_1/README.md/#moodle-link","title":"Moodle Link","text":"<ul> <li>[146055] Calculus 1 - PUGLIESE</li> </ul>"},{"location":"courses/146055_39114_PUGLIESE_Calculus_1/README.md/#textbook","title":"Textbook","text":"<ul> <li>Analisi matematica I - Canuto Claudio, Tabacco Anita - 3 edizione - Politecnico di Torino</li> </ul>"},{"location":"courses/146055_39114_PUGLIESE_Calculus_1/README.md/#about","title":"About","text":"<ul> <li>taking notes<ul> <li>Goodnotes</li> </ul> </li> </ul>"},{"location":"courses/146056_39175_OCCHETTA_Geometry_and_Linear_Algebra/","title":"Geometry and Linear Algebra","text":"<p>\u2190 Back</p>"},{"location":"courses/146056_39175_OCCHETTA_Geometry_and_Linear_Algebra/#basic-info","title":"Basic Info","text":"<ul> <li>Course ID: 146056</li> <li>Professor: Occhetta</li> <li> <p>Moodle</p> </li> <li> <p>Download</p> </li> </ul> Name Type Item Size README md / 1 KiB"},{"location":"courses/146056_39175_OCCHETTA_Geometry_and_Linear_Algebra/#more-info","title":"More Info","text":""},{"location":"courses/146056_39175_OCCHETTA_Geometry_and_Linear_Algebra/#moodle-link","title":"Moodle Link","text":"<ul> <li>[146056] Geometry and Linear Algebra - OCCHETTA</li> </ul>"},{"location":"courses/146056_39175_OCCHETTA_Geometry_and_Linear_Algebra/#textbook","title":"Textbook","text":"<ul> <li>Geometry and Linear Algebra - Gianluca Occhetta - Universit\u00e0 di Trento</li> </ul>"},{"location":"courses/146056_39175_OCCHETTA_Geometry_and_Linear_Algebra/#about","title":"About","text":"<ul> <li>Exercises on <ul> <li>link 1</li> <li>link 2</li> <li>link 3</li> </ul> <li>Page Rank<ul> <li>Page Rank algorithm - An application of Linear Algebra - Universit\u00e0 di Trento</li> <li>PageRank</li> <li>A Friendly Introduction to the PageRank Algorithm</li> <li>Lecture #3: PageRank Algorithm - The Mathematics of Google Search</li> </ul> </li>"},{"location":"courses/146056_39175_OCCHETTA_Geometry_and_Linear_Algebra/README.md/","title":"README","text":"<p>\u2190 Back</p>"},{"location":"courses/146056_39175_OCCHETTA_Geometry_and_Linear_Algebra/README.md/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    md</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Geometry and Linear Algebra\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"courses/146056_39175_OCCHETTA_Geometry_and_Linear_Algebra/README.md/#more-info","title":"More Info","text":""},{"location":"courses/146056_39175_OCCHETTA_Geometry_and_Linear_Algebra/README.md/#moodle-link","title":"Moodle Link","text":"<ul> <li>[146056] Geometry and Linear Algebra - OCCHETTA</li> </ul>"},{"location":"courses/146056_39175_OCCHETTA_Geometry_and_Linear_Algebra/README.md/#textbook","title":"Textbook","text":"<ul> <li>Geometry and Linear Algebra - Gianluca Occhetta - Universit\u00e0 di Trento</li> </ul>"},{"location":"courses/146056_39175_OCCHETTA_Geometry_and_Linear_Algebra/README.md/#about","title":"About","text":"<ul> <li>Exercises on <ul> <li>link 1</li> <li>link 2</li> <li>link 3</li> </ul> <li>Page Rank<ul> <li>Page Rank algorithm - An application of Linear Algebra - Universit\u00e0 di Trento</li> <li>PageRank</li> <li>A Friendly Introduction to the PageRank Algorithm</li> <li>Lecture #3: PageRank Algorithm - The Mathematics of Google Search</li> </ul> </li>"},{"location":"courses/146060_40332_BONACCORSI_Probability/","title":"Probability","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/#basic-info","title":"Basic Info","text":"<ul> <li>Course ID: 146060</li> <li>Professor: Bonaccorsi</li> <li> <p>Moodle</p> </li> <li> <p>Download</p> </li> </ul> Name Type Item Size Group Project / 1 item 5 MiB Homework / 10 items 4 MiB README md / 2 KiB"},{"location":"courses/146060_40332_BONACCORSI_Probability/#more-info","title":"More Info","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/#moodle-link","title":"Moodle Link","text":"<ul> <li>[146060] Probability - BONACCORSI</li> </ul>"},{"location":"courses/146060_40332_BONACCORSI_Probability/#textbook","title":"Textbook","text":"<ul> <li>Probability and Information: An Integrated Approach - David Applebaum - Second Edition - University of Sheffield</li> <li>Introduction to Probability and Statistics for Engineers and Scientists - Sheldon M. Ross - Sixth Edition - University of Southern California</li> </ul>"},{"location":"courses/146060_40332_BONACCORSI_Probability/#about","title":"About","text":"<ul> <li>Libre Office usage<ul> <li>LibreOffice Tutorials</li> </ul> </li> <li>Libre Office Calc usage<ul> <li>Calc Tutorials</li> </ul> </li> <li>Libre Office Math usage<ul> <li>LibreOffice Suite Math - English</li> </ul> </li> <li>Excel usage<ul> <li>Excel - Technology for Teachers and Students</li> <li>Excel Obstacle Course</li> </ul> </li> <li>LaTex usage<ul> <li>LaTeX Tutorials</li> </ul> </li> <li>LaTeX reference<ul> <li>LaTeX Documentation</li> </ul> </li> <li>KeTeX reference<ul> <li>Supported Functions \u00b7 KaTeX</li> </ul> </li> <li>Boxplot<ul> <li>Box plot generator - Desmos</li> </ul> </li> <li>Stemplot<ul> <li>Stem and Leaf Plot Generator</li> </ul> </li> <li>Quartiles<ul> <li>Quartile</li> <li>Sample Quantiles in Statistical Packages</li> </ul> </li> <li>Gini Index<ul> <li>Understanding the Gini Coefficient - A Measure of Income Inequality</li> <li>The Gini Index and Measures of Inequality - Frank A Farris - Santa Clara University</li> </ul> </li> <li>MATLAB usage<ul> <li>MATLAB Tutorials</li> </ul> </li> </ul>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/","title":"Group Project","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 1 item</li> <li>Size:  5 MiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n</code></pre> Name Type Item Size Gini Index / 3 items 5 MiB"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/","title":"Gini Index","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 3 items</li> <li>Size:  5 MiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n    \u2514\u2500\u2500 Gini Index\n</code></pre> Name Type Item Size GPA / 2 items 156 KiB football team / 21 items 5 MiB gini m / 5 KiB"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/GPA/","title":"GPA","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/GPA/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 2 items</li> <li>Size:  156 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n    \u2514\u2500\u2500 Gini Index\n        \u2514\u2500\u2500 GPA\n</code></pre> Name Type Item Size data / 5 items 962 B graph / 5 items 155 KiB"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/GPA/data/","title":"data","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/GPA/data/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 5 items</li> <li>Size:  962 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n    \u2514\u2500\u2500 Gini Index\n        \u2514\u2500\u2500 GPA\n            \u2514\u2500\u2500 data\n</code></pre> Name Type Item Size GPA CP1 and GLA csv / 429 B GPA CP1 csv / 77 B GPA Cal1 csv / 72 B GPA GLA csv / 83 B GPA total csv / 301 B"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/GPA/data/GPA-CP1-and-GLA.csv/","title":"GPA CP1 and GLA","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/GPA/data/GPA-CP1-and-GLA.csv/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    csv</li> <li>Size:    429 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n    \u2514\u2500\u2500 Gini Index\n        \u2514\u2500\u2500 GPA\n            \u2514\u2500\u2500 data\n                \u2514\u2500\u2500 GPA CP1 and GLA.csv\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/GPA/data/GPA-CP1-and-GLA.csv/#preview","title":"Preview","text":"<p>Please imagine there is a CSV table</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/GPA/data/GPA-CP1.csv/","title":"GPA CP1","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/GPA/data/GPA-CP1.csv/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    csv</li> <li>Size:    77 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n    \u2514\u2500\u2500 Gini Index\n        \u2514\u2500\u2500 GPA\n            \u2514\u2500\u2500 data\n                \u2514\u2500\u2500 GPA CP1.csv\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/GPA/data/GPA-CP1.csv/#preview","title":"Preview","text":"<p>Please imagine there is a CSV table</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/GPA/data/GPA-Cal1.csv/","title":"GPA Cal1","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/GPA/data/GPA-Cal1.csv/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    csv</li> <li>Size:    72 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n    \u2514\u2500\u2500 Gini Index\n        \u2514\u2500\u2500 GPA\n            \u2514\u2500\u2500 data\n                \u2514\u2500\u2500 GPA Cal1.csv\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/GPA/data/GPA-Cal1.csv/#preview","title":"Preview","text":"<p>Please imagine there is a CSV table</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/GPA/data/GPA-GLA.csv/","title":"GPA GLA","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/GPA/data/GPA-GLA.csv/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    csv</li> <li>Size:    83 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n    \u2514\u2500\u2500 Gini Index\n        \u2514\u2500\u2500 GPA\n            \u2514\u2500\u2500 data\n                \u2514\u2500\u2500 GPA GLA.csv\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/GPA/data/GPA-GLA.csv/#preview","title":"Preview","text":"<p>Please imagine there is a CSV table</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/GPA/data/GPA-total.csv/","title":"GPA total","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/GPA/data/GPA-total.csv/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    csv</li> <li>Size:    301 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n    \u2514\u2500\u2500 Gini Index\n        \u2514\u2500\u2500 GPA\n            \u2514\u2500\u2500 data\n                \u2514\u2500\u2500 GPA total.csv\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/GPA/data/GPA-total.csv/#preview","title":"Preview","text":"<p>Please imagine there is a CSV table</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/GPA/graph/","title":"graph","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/GPA/graph/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 5 items</li> <li>Size:  155 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n    \u2514\u2500\u2500 Gini Index\n        \u2514\u2500\u2500 GPA\n            \u2514\u2500\u2500 graph\n</code></pre> Name Type Item Size GPA CP1 and GLA png / 32 KiB GPA CP1 png / 30 KiB GPA Cal1 png / 30 KiB GPA GLA png / 31 KiB GPA total png / 31 KiB"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/GPA/graph/GPA-CP1-and-GLA.png/","title":"GPA CP1 and GLA","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/GPA/graph/GPA-CP1-and-GLA.png/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    png</li> <li>Size:    32 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n    \u2514\u2500\u2500 Gini Index\n        \u2514\u2500\u2500 GPA\n            \u2514\u2500\u2500 graph\n                \u2514\u2500\u2500 GPA CP1 and GLA.png\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/GPA/graph/GPA-CP1-and-GLA.png/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/GPA/graph/GPA-CP1.png/","title":"GPA CP1","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/GPA/graph/GPA-CP1.png/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    png</li> <li>Size:    30 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n    \u2514\u2500\u2500 Gini Index\n        \u2514\u2500\u2500 GPA\n            \u2514\u2500\u2500 graph\n                \u2514\u2500\u2500 GPA CP1.png\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/GPA/graph/GPA-CP1.png/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/GPA/graph/GPA-Cal1.png/","title":"GPA Cal1","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/GPA/graph/GPA-Cal1.png/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    png</li> <li>Size:    30 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n    \u2514\u2500\u2500 Gini Index\n        \u2514\u2500\u2500 GPA\n            \u2514\u2500\u2500 graph\n                \u2514\u2500\u2500 GPA Cal1.png\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/GPA/graph/GPA-Cal1.png/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/GPA/graph/GPA-GLA.png/","title":"GPA GLA","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/GPA/graph/GPA-GLA.png/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    png</li> <li>Size:    31 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n    \u2514\u2500\u2500 Gini Index\n        \u2514\u2500\u2500 GPA\n            \u2514\u2500\u2500 graph\n                \u2514\u2500\u2500 GPA GLA.png\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/GPA/graph/GPA-GLA.png/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/GPA/graph/GPA-total.png/","title":"GPA total","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/GPA/graph/GPA-total.png/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    png</li> <li>Size:    31 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n    \u2514\u2500\u2500 Gini Index\n        \u2514\u2500\u2500 GPA\n            \u2514\u2500\u2500 graph\n                \u2514\u2500\u2500 GPA total.png\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/GPA/graph/GPA-total.png/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/","title":"football team","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 21 items</li> <li>Size:  5 MiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n    \u2514\u2500\u2500 Gini Index\n        \u2514\u2500\u2500 football team\n</code></pre> Name Type Item Size giants 2016 figure png / 31 KiB giants 2016 table csv / 317 B giants 2017 figure png / 31 KiB giants 2017 table csv / 394 B giants 2018 figure png / 31 KiB giants 2018 table csv / 362 B giants 2019 figure png / 31 KiB giants 2019 table csv / 434 B giants 2020 figure png / 31 KiB giants 2020 table csv / 732 B giants 2021 figure png / 31 KiB giants 2021 table csv / 575 B giants 2022 figure png / 31 KiB giants 2022 table csv / 624 B giants 2023 figure png / 31 KiB giants 2023 table csv / 2 KiB giants 2024 figure png / 31 KiB giants 2024 table csv / 566 B giants 2025 figure png / 31 KiB giants 2025 table csv / 296 B team csv / 5 MiB"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2016_figure.png/","title":"giants 2016 figure","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2016_figure.png/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    png</li> <li>Size:    31 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n    \u2514\u2500\u2500 Gini Index\n        \u2514\u2500\u2500 football team\n            \u2514\u2500\u2500 giants 2016 figure.png\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2016_figure.png/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2016_table.csv/","title":"giants 2016 table","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2016_table.csv/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    csv</li> <li>Size:    317 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n    \u2514\u2500\u2500 Gini Index\n        \u2514\u2500\u2500 football team\n            \u2514\u2500\u2500 giants 2016 table.csv\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2016_table.csv/#preview","title":"Preview","text":"<p>Please imagine there is a CSV table</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2017_figure.png/","title":"giants 2017 figure","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2017_figure.png/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    png</li> <li>Size:    31 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n    \u2514\u2500\u2500 Gini Index\n        \u2514\u2500\u2500 football team\n            \u2514\u2500\u2500 giants 2017 figure.png\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2017_figure.png/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2017_table.csv/","title":"giants 2017 table","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2017_table.csv/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    csv</li> <li>Size:    394 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n    \u2514\u2500\u2500 Gini Index\n        \u2514\u2500\u2500 football team\n            \u2514\u2500\u2500 giants 2017 table.csv\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2017_table.csv/#preview","title":"Preview","text":"<p>Please imagine there is a CSV table</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2018_figure.png/","title":"giants 2018 figure","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2018_figure.png/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    png</li> <li>Size:    31 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n    \u2514\u2500\u2500 Gini Index\n        \u2514\u2500\u2500 football team\n            \u2514\u2500\u2500 giants 2018 figure.png\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2018_figure.png/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2018_table.csv/","title":"giants 2018 table","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2018_table.csv/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    csv</li> <li>Size:    362 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n    \u2514\u2500\u2500 Gini Index\n        \u2514\u2500\u2500 football team\n            \u2514\u2500\u2500 giants 2018 table.csv\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2018_table.csv/#preview","title":"Preview","text":"<p>Please imagine there is a CSV table</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2019_figure.png/","title":"giants 2019 figure","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2019_figure.png/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    png</li> <li>Size:    31 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n    \u2514\u2500\u2500 Gini Index\n        \u2514\u2500\u2500 football team\n            \u2514\u2500\u2500 giants 2019 figure.png\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2019_figure.png/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2019_table.csv/","title":"giants 2019 table","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2019_table.csv/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    csv</li> <li>Size:    434 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n    \u2514\u2500\u2500 Gini Index\n        \u2514\u2500\u2500 football team\n            \u2514\u2500\u2500 giants 2019 table.csv\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2019_table.csv/#preview","title":"Preview","text":"<p>Please imagine there is a CSV table</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2020_figure.png/","title":"giants 2020 figure","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2020_figure.png/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    png</li> <li>Size:    31 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n    \u2514\u2500\u2500 Gini Index\n        \u2514\u2500\u2500 football team\n            \u2514\u2500\u2500 giants 2020 figure.png\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2020_figure.png/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2020_table.csv/","title":"giants 2020 table","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2020_table.csv/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    csv</li> <li>Size:    732 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n    \u2514\u2500\u2500 Gini Index\n        \u2514\u2500\u2500 football team\n            \u2514\u2500\u2500 giants 2020 table.csv\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2020_table.csv/#preview","title":"Preview","text":"<p>Please imagine there is a CSV table</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2021_figure.png/","title":"giants 2021 figure","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2021_figure.png/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    png</li> <li>Size:    31 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n    \u2514\u2500\u2500 Gini Index\n        \u2514\u2500\u2500 football team\n            \u2514\u2500\u2500 giants 2021 figure.png\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2021_figure.png/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2021_table.csv/","title":"giants 2021 table","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2021_table.csv/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    csv</li> <li>Size:    575 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n    \u2514\u2500\u2500 Gini Index\n        \u2514\u2500\u2500 football team\n            \u2514\u2500\u2500 giants 2021 table.csv\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2021_table.csv/#preview","title":"Preview","text":"<p>Please imagine there is a CSV table</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2022_figure.png/","title":"giants 2022 figure","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2022_figure.png/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    png</li> <li>Size:    31 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n    \u2514\u2500\u2500 Gini Index\n        \u2514\u2500\u2500 football team\n            \u2514\u2500\u2500 giants 2022 figure.png\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2022_figure.png/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2022_table.csv/","title":"giants 2022 table","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2022_table.csv/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    csv</li> <li>Size:    624 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n    \u2514\u2500\u2500 Gini Index\n        \u2514\u2500\u2500 football team\n            \u2514\u2500\u2500 giants 2022 table.csv\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2022_table.csv/#preview","title":"Preview","text":"<p>Please imagine there is a CSV table</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2023_figure.png/","title":"giants 2023 figure","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2023_figure.png/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    png</li> <li>Size:    31 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n    \u2514\u2500\u2500 Gini Index\n        \u2514\u2500\u2500 football team\n            \u2514\u2500\u2500 giants 2023 figure.png\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2023_figure.png/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2023_table.csv/","title":"giants 2023 table","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2023_table.csv/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    csv</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n    \u2514\u2500\u2500 Gini Index\n        \u2514\u2500\u2500 football team\n            \u2514\u2500\u2500 giants 2023 table.csv\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2023_table.csv/#preview","title":"Preview","text":"<p>Please imagine there is a CSV table</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2024_figure.png/","title":"giants 2024 figure","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2024_figure.png/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    png</li> <li>Size:    31 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n    \u2514\u2500\u2500 Gini Index\n        \u2514\u2500\u2500 football team\n            \u2514\u2500\u2500 giants 2024 figure.png\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2024_figure.png/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2024_table.csv/","title":"giants 2024 table","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2024_table.csv/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    csv</li> <li>Size:    566 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n    \u2514\u2500\u2500 Gini Index\n        \u2514\u2500\u2500 football team\n            \u2514\u2500\u2500 giants 2024 table.csv\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2024_table.csv/#preview","title":"Preview","text":"<p>Please imagine there is a CSV table</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2025_figure.png/","title":"giants 2025 figure","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2025_figure.png/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    png</li> <li>Size:    31 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n    \u2514\u2500\u2500 Gini Index\n        \u2514\u2500\u2500 football team\n            \u2514\u2500\u2500 giants 2025 figure.png\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2025_figure.png/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2025_table.csv/","title":"giants 2025 table","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2025_table.csv/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    csv</li> <li>Size:    296 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n    \u2514\u2500\u2500 Gini Index\n        \u2514\u2500\u2500 football team\n            \u2514\u2500\u2500 giants 2025 table.csv\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/giants_2025_table.csv/#preview","title":"Preview","text":"<p>Please imagine there is a CSV table</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/team.csv/","title":"team","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/team.csv/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    csv</li> <li>Size:    5 MiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n    \u2514\u2500\u2500 Gini Index\n        \u2514\u2500\u2500 football team\n            \u2514\u2500\u2500 team.csv\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/football_team/team.csv/#preview","title":"Preview","text":"<p>Please imagine there is a CSV table</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/gini.m/","title":"gini","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/gini.m/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    m</li> <li>Size:    5 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Group Project\n    \u2514\u2500\u2500 Gini Index\n        \u2514\u2500\u2500 gini.m\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Group_Project/Gini_Index/gini.m/#preview","title":"Preview","text":"<pre><code>% GINI computes the Gini coefficient and the Lorentz curve.\n%\n% Usage:\n%   g = gini(pop,val)\n%   [g,l] = gini(pop,val)\n%   [g,l,a] = gini(pop,val)\n%   ... = gini(pop,val,makeplot)\n%\n% Input and Output:\n%   pop     A vector of population sizes of the different classes.\n%   val     A vector of the measurement variable (e.g. income per capita)\n%           in the diffrerent classes.\n%   g       Gini coefficient.\n%   l       Lorentz curve: This is a two-column array, with the left\n%           column representing cumulative population shares of the\n%           different classes, sorted according to val, and the right\n%           column representing the cumulative value share that belongs to\n%           the population up to the given class. The Lorentz curve is a\n%           scatter plot of the left vs the right column.\n%   a       Same as l, except that the components are not normalized to\n%           range in the unit interval. Thus, the left column of a is the\n%           absolute cumulative population sizes of the classes, and the\n%           right colun is the absolute cumulative value of all classes up\n%           to the given one.\n%   makeplot  is a boolean, indicating whether a figure of the Lorentz\n%           curve should be produced or not. Default is false.\n%\n% Example:\n%   x = rand(100,1);\n%   y = rand(100,1);\n%   gini(x,y,true);             % random populations with random incomes\n%   figure;\n%   gini(x,ones(100,1),true);   % perfect equality\n%\n% Explanation:\n%\n%   The vectors pop and val must be equally long and must contain only\n%   positive values (zeros are also acceptable). A typical application\n%   would be that pop represents population sizes of some subgroups (e.g.\n%   different countries or states), and val represents the income per\n%   capita in this different subgroups. The Gini coefficient is a measure\n%   of how unequally income is distributed between these classes. A\n%   coefficient of zero means that all subgroups have exactly the same\n%   income per capital, so there is no dispesion of income; A very large\n%   coefficient would result if all the income accrues only to one subgroup\n%   and all the remaining groups have zero income. In the limit, when the\n%   total population size approaches infinity, but all the income accrues\n%   only to one individual, the Gini coefficient approaches unity.\n%\n%   The Lorenz curve is a graphical representation of the distribution. If\n%   (x,y) is a point on the Lorenz curve, then the poorest x-share of the\n%   population has the y-share of total income. By definition, (0,0) and\n%   (1,1) are points on the Lorentz curve (the poorest 0% have 0% of total\n%   income, and the poorest 100% [ie, everyone] have 100% of total income).\n%   Equal distribution implies that the Lorentz curve is the 45 degree\n%   line. Any inequality manifests itself as deviation of the Lorentz curve\n%   from the  45 degree line. By construction, the Lorenz curve is weakly\n%   convex and increasing.\n%\n%   The two concepts are related as follows: The Gini coefficient is twice\n%   the area between the 45 degree line and the Lorentz curve.\n%\n% Author : Yvan Lengwiler\n% Release: $1.0$\n% Date   : $2010-06-27$\n\nfunction [g,l,a] = gini(pop,val,makeplot)\n\n    % check arguments\n\n    assert(nargin &gt;= 2, 'gini expects at least two arguments.')\n\n    if nargin &lt; 3\n        makeplot = false;\n    end\n    assert(numel(pop) == numel(val), ...\n        'gini expects two equally long vectors (%d ~= %d).', ...\n        size(pop,1),size(val,1))\n\n    pop = [0;pop(:)]; val = [0;val(:)];     % pre-append a zero\n\n    isok = all(~isnan([pop,val]'))';        % filter out NaNs\n    if sum(isok) &lt; 2\n        warning('gini:lacking_data','not enough data');\n        g = NaN; l = NaN(1,4);\n        return;\n    end\n    pop = pop(isok); val = val(isok);\n\n    assert(all(pop&gt;=0) &amp;&amp; all(val&gt;=0), ...\n        'gini expects nonnegative vectors (neg elements in pop = %d, in val = %d).', ...\n        sum(pop&lt;0),sum(val&lt;0))\n\n    % process input\n    z = val .* pop;\n    [~,ord] = sort(val);\n    pop    = pop(ord);     z    = z(ord);\n    pop    = cumsum(pop);  z    = cumsum(z);\n    relpop = pop/pop(end); relz = z/z(end);\n\n    % Gini coefficient\n\n    % We compute the area below the Lorentz curve. We do this by\n    % computing the average of the left and right Riemann-like sums.\n    % (I say Riemann-'like' because we evaluate not on a uniform grid, but\n    % on the points given by the pop data).\n    %\n    % These are the two Rieman-like sums:\n    %    leftsum  = sum(relz(1:end-1) .* diff(relpop));\n    %    rightsum = sum(relz(2:end)   .* diff(relpop));\n    % The Gini coefficient is one minus twice the average of leftsum and\n    % rightsum. We can put all of this into one line.\n    g = 1 - sum((relz(1:end-1)+relz(2:end)) .* diff(relpop));\n\n    % Lorentz curve\n    l = [relpop,relz];\n    a = [pop,z];\n    if makeplot   % ... plot it?\n        area(relpop,relz,'FaceColor',[0.5,0.5,1.0]);    % the Lorentz curve\n        hold on\n        plot([0,1],[0,1],'--k');                        % 45 degree line\n        axis tight      % ranges of abscissa and ordinate are by definition exactly [0,1]\n        axis square     % both axes should be equally long\n        set(gca,'XTick',get(gca,'YTick'))   % ensure equal ticking\n        set(gca,'Layer','top');             % grid above the shaded area\n        grid on;\n        title(['\\bfGini coefficient = ',num2str(g)]);\n        xlabel('share of population');\n        ylabel('share of value');\n    end\n\nend\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/","title":"Homework","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 10 items</li> <li>Size:  4 MiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n</code></pre> Name Type Item Size W1 / 10 items 569 KiB W10 / 8 items 333 KiB W2 / 10 items 718 KiB W3 / 8 items 619 KiB W4 / 8 items 376 KiB W5 / 8 items 367 KiB W6 / 8 items 309 KiB W7 / 8 items 303 KiB W8 / 8 items 310 KiB W9 / 8 items 231 KiB"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W1/","title":"W1","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W1/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 10 items</li> <li>Size:  569 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W1\n</code></pre> Name Type Item Size Q1 pdf / 111 KiB Q1 tex / 3 KiB Q2 pdf / 127 KiB Q2 tex / 2 KiB Q3 P3 boxplot png / 41 KiB Q3 pdf / 159 KiB Q3 tex / 2 KiB Q4 P2 graph png / 24 KiB Q4 pdf / 97 KiB Q4 tex / 2 KiB"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W1/Q1.pdf/","title":"Q1","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W1/Q1.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    111 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W1\n        \u2514\u2500\u2500 Q1.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W1/Q1.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W1/Q1.tex/","title":"Q1","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W1/Q1.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    3 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W1\n        \u2514\u2500\u2500 Q1.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W1/Q1.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[a4paper,12pt]{article}\n\\usepackage{amsmath, amssymb, geometry}\n\\geometry{left=1in, right=1in, top=1in, bottom=1in}\n\n\\title{Statistical Analysis of Newborn Male Infants' Birth Weights}\n\\author{}\n\\date{}\n\n\\begin{document}\n\n\\maketitle\n\n\\section{Introduction}\nA sample of newborn male infants had their birth weight measured in ounces. The data was then grouped into classes, where $Z_k$ represents the class midpoint and $N_k$ represents the frequency of the $k$-th class.\n\n\\section{Number of Individuals}\nLet the number of classes be:\n\\begin{equation}\nK = 15\n\\end{equation}\nThen the total number of individuals is:\n\\begin{equation}\nn = \\sum_{k=1}^{K} N_k = 2+6+\\dots+1 = 9,465.\n\\end{equation}\n\n\\subsection*{Answer}\n\\begin{itemize}\n    \\item $n = 9,465$\n\\end{itemize}\n\n\\section{Mean and Variance}\nLet the individual values be denoted as:\n\\begin{equation}\nx_i, \\quad i \\in \\{1,2,\\dots,n\\}.\n\\end{equation}\n\nThe relative frequency is given by:\n\\begin{equation}\np_k = \\frac{N_k}{n}.\n\\end{equation}\n\nThe mean is computed as:\n\\begin{equation}\n\\bar{x} = \\sum_{k=1}^{K} p_k Z_k = \\frac{1}{n} \\sum_{k=1}^{K} N_k Z_k = \\frac{1,035,467}{9,465} \\approx 109.400.\n\\end{equation}\n\nThe variance is given by:\n\\begin{equation}\n\\sigma^2 = \\sum_{k=1}^{K} p_k (Z_k - \\bar{x})^2 = \\frac{1}{n} \\sum_{k=1}^{K} N_k (Z_k - \\bar{x})^2 = \\frac{1,748,957}{9,465} \\approx 184.782.\n\\end{equation}\n\n\\subsection*{Answer}\n\\begin{itemize}\n    \\item $\\bar{x} = 109.400$\n    \\item $\\sigma^2 = 184.782$\n\\end{itemize}\n\n\\section{Conversion to Grams}\nEach individual weight in ounces is converted to grams:\n\\begin{equation}\ny_i = 28.349 \\cdot x_i.\n\\end{equation}\n\nThe new mean and variance become:\n\\begin{align}\n\\bar{y} &amp;= 28.349 \\cdot \\bar{x} = \\frac{29,354,453,983}{9,465,000} \\approx 3,101.369, \\\\\n\\sigma_y^2 &amp;= 28.349^2 \\cdot \\sigma^2 = \\frac{140,557,692,831}{946,500} \\approx 148,502.581.\n\\end{align}\n\n\\subsection*{Answer}\n\\begin{itemize}\n    \\item $\\bar{y} = 3,101.369$\n    \\item $\\sigma_y^2 = 148,502.581$\n\\end{itemize}\n\n\\section{Quartiles and Median}\nThe index of the median is:\n\\begin{equation}\ni_m = \\frac{n+1}{2} = 4,733.\n\\end{equation}\n\nThe median class satisfies:\n\\begin{equation}\n\\sum_{k=1}^{6} N_k = 3,049 &lt; i_m &lt; 5,289 = \\sum_{k=1}^{7} N_k.\n\\end{equation}\n\nThe median is calculated as:\n\\begin{equation}\nm = Z_6 + (Z_7 - Z_6) \\left( \\frac{i_m - \\sum_{k=1}^{6} N_k}{N_7} \\right) \\approx 105.014.\n\\end{equation}\n\nSimilarly, the first and third quartiles are computed using:\n\\begin{align}\ni_{Q_1} &amp;= \\frac{n}{4} + \\frac{1}{2} = 2,366.75, \\\\\ni_{Q_3} &amp;= \\frac{3}{4} n + \\frac{1}{2} = 7,099.25.\n\\end{align}\n\nThe quartile classes satisfy:\n\\begin{align}\n\\sum_{k=1}^{5} N_k = 1,320 &amp;&lt; i_{Q_1} &lt; 3,049 = \\sum_{k=1}^{6} N_k, \\\\\n\\sum_{k=1}^{7} N_k = 5,289 &amp;&lt; i_{Q_3} &lt; 7,296 = \\sum_{k=1}^{8} N_k.\n\\end{align}\n\nThe first and third quartiles are given by:\n\\begin{align}\nQ_1 &amp;= Z_5 + (Z_6 - Z_5) \\left( \\frac{i_{Q_1} - \\sum_{k=1}^{5} N_k}{N_6} \\right) \\approx 96.449, \\\\\nQ_3 &amp;= Z_7 + (Z_8 - Z_7) \\left( \\frac{i_{Q_3} - \\sum_{k=1}^{7} N_k}{N_8} \\right) \\approx 114.216.\n\\end{align}\n\n\\subsection*{Answer}\n\\begin{itemize}\n    \\item $m_p = 105.014$\n    \\item $Q_1 \\approx 96.449$\n    \\item $Q_2 = 105.014$\n    \\item $Q_3 \\approx 114.216$\n\\end{itemize}\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W1/Q2.pdf/","title":"Q2","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W1/Q2.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    127 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W1\n        \u2514\u2500\u2500 Q2.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W1/Q2.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W1/Q2.tex/","title":"Q2","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W1/Q2.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W1\n        \u2514\u2500\u2500 Q2.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W1/Q2.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass{article}\n\\usepackage{amsmath}\n\\usepackage{amssymb}\n\\usepackage{geometry}\n\\geometry{a4paper, margin=1in}\n\\begin{document}\n\n\\title{Statistical Analysis of Fraser River Flow Data (1912-1999)}\n\\author{}\n\\date{}\n\\maketitle\n\n\\section{Analysis of Mean and Median Flow}\n\n\\subsection{Sample Size}\nLet the number of samples be:\n\\begin{equation}\n    n=88\n\\end{equation}\n\nLet the data in time order be:\n\\begin{equation}\n    x_1 = 3,360,\\quad x_2 = 2,884,\\,...,\\,x_i,\\,...,\\,x_n = 3,465,\\quad i \\in \\{1,2,...,n\\}\n\\end{equation}\n\n\\subsection{Mean Calculation}\nThe mean flow is given by:\n\\begin{equation}\n    \\bar{x} = \\frac{1}{n}\\sum_{i=1}^{n}x_i = \\frac{238,719}{88} \\approx 2,712.716\n\\end{equation}\n\n\\subsection{Median Calculation}\nOrdering the data in ascending order:\n\\begin{equation}\n    x_{a_1} = 2,012,\\quad x_{a_2} = 2,027,\\,...,\\,x_{a_{i_a}},\\,...,\\,x_{a_n} = 3,715,\\quad i_a \\in \\{1,2,...,n\\}\n\\end{equation}\n\nThe index of the median is computed as:\n\\begin{equation}\n    i_{a_m} = \\frac{n+1}{2} = 44.5 = \\frac{44+45}{2}\n\\end{equation}\n\nThus, the median flow is:\n\\begin{equation}\n    m = x_{a_{i_{a_m}}} = \\frac{x_{a_{44}}+x_{a_{45}}}{2} = 2,664.5\n\\end{equation}\n\n\\noindent \\textbf{Summary of Results:}\n\\begin{itemize}\n    \\item Mean Flow: $\\bar{x} = 2,712.716$\n    \\item Median Flow: $m = 2,664.5$\n\\end{itemize}\n\n\\section{Trend Analysis over Time}\n\n\\subsection{Mean Year Calculation}\nLet the time sequence be:\n\\begin{equation}\n    t_1=1912,\\, t_2=1913,\\,...,t_i,\\,t_n=1999,\\quad i \\in \\{1,2,...,n\\}\n\\end{equation}\n\nThe mean year is computed as:\n\\begin{equation}\n    \\bar{t} = \\frac{1}{n}\\sum_{i=1}^{n}t_i = \\frac{172,084}{88} \\approx 1955.5\n\\end{equation}\n\n\\subsection{Covariance Calculation}\nThe covariance between time and flow is given by:\n\\begin{equation}\n    \\sigma_{tx} = \\frac{1}{n}\\sum_{i=1}^{n}t_i x_i - \\bar{t} \\bar{x} = \\frac{1,103,545}{880} \\approx 1,254.028 &gt; 0\n\\end{equation}\n\nSince $\\sigma_{tx} &gt; 0$, we conclude that the mean flow has been increasing over time.\n\n\\noindent \\textbf{Conclusion:} The mean flow of the Fraser River shows an increasing trend over the period from 1912 to 1999.\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W1/Q3-P3-boxplot.png/","title":"Q3 P3 boxplot","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W1/Q3-P3-boxplot.png/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    png</li> <li>Size:    41 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W1\n        \u2514\u2500\u2500 Q3 P3 boxplot.png\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W1/Q3-P3-boxplot.png/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W1/Q3.pdf/","title":"Q3","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W1/Q3.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    159 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W1\n        \u2514\u2500\u2500 Q3.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W1/Q3.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W1/Q3.tex/","title":"Q3","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W1/Q3.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W1\n        \u2514\u2500\u2500 Q3.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W1/Q3.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass{article}\n\\usepackage{amsmath}\n\\usepackage{graphicx}\n\\usepackage{float}\n\\usepackage{geometry}\n\\geometry{a4paper, margin=1in}\n\n\\begin{document}\n\n\\section*{Question 3}\n\n\\textit{The following data represent measurements (in cm) of shell lengths collected from a deposit in Spain.}\n\n\\section*{1.}\n\nLet the number of samples be:\n\\[\nn = 33\n\\]\n\nLet the data in ascending order be:\n\\[\nx_1 = 1.23,\\; x_2 = 2.77,\\; \\ldots,\\; x_i,\\; \\ldots,\\; x_n = 8.86,\\quad i \\in \\{1, 2, \\ldots, n\\}\n\\]\n\nThen we have the mean:\n\\[\n\\bar{x} = \\frac{1}{n} \\sum_{i=1}^n x_i = \\frac{15\\,984}{3\\,300} \\approx 4.844\n\\]\n\nThen we have the variance:\n\\[\n\\sigma_x^2 = \\frac{1}{n} \\sum_{i=1}^n x_i^2 - \\bar{x}^2 \\approx 3.342\n\\]\n\nWe have the index of the median:\n\\[\ni_m = \\frac{n + 1}{2} = 17\n\\]\n\nThen we have the median:\n\\[\nm = x_{i_m} = 4.4\n\\]\n\n\\subsection*{Answer}\n\n\\begin{itemize}\n    \\item $\\bar{x} = \\frac{15\\,984}{3\\,300} \\approx 4.844$\n    \\item $\\sigma_x^2 \\approx 3.342$\n    \\item $m = 4.4$\n\\end{itemize}\n\n\\section*{2.}\n\nLet the second quartile be:\n\\[\nQ_2 = m = 4.4\n\\]\n\nAs well as the index of the second quartile:\n\\[\ni_{Q_2} = i_m = 17\n\\]\n\nThen we have the index of the first quartile ($Q_1$) and the index of the third quartile ($Q_3$):\n\\[\n\\begin{aligned}\ni_{Q_1} &amp;= \\frac{n}{4} + \\frac{1}{2} = 8.75 \\\\\ni_{Q_3} &amp;= \\frac{3}{4} n + \\frac{1}{2} = 25.25\n\\end{aligned}\n\\]\n\nThen we have the first quartile and the third quartile:\n\\[\n\\begin{aligned}\nQ_1 &amp;= \\frac{x_{\\lceil i_{Q_1} - \\frac{1}{2} \\rceil} + x_{\\lfloor i_{Q_1} + \\frac{1}{2} \\rfloor}}{2} = x_9 = 3.58 \\\\\nQ_3 &amp;= \\frac{x_{\\lceil i_{Q_3} - \\frac{1}{2} \\rceil} + x_{\\lfloor i_{Q_3} + \\frac{1}{2} \\rfloor}}{2} = x_{25} = 5.24\n\\end{aligned}\n\\]\n\nThen we have the interquartile range (IQR):\n\\[\n\\mathrm{IQR} = Q_3 - Q_1 = 1.66\n\\]\n\n\\subsection*{Answer}\n\n\\[\n\\mathrm{IQR} = 1.66\n\\]\n\n\\section*{3.}\n\nLet the minimum ($\\mathrm{min}$) and the maximum ($\\mathrm{max}$) be:\n\\[\n\\begin{aligned}\n\\mathrm{min} &amp;= x_1 = 1.23 \\\\\n\\mathrm{max} &amp;= x_n = 8.86\n\\end{aligned}\n\\]\n\nThen we have the boxplot:\n\n\\begin{figure}[H]\n    \\centering\n    \\includegraphics[width=1\\textwidth]{Q3-P3-boxplot.png}\n    \\caption{Boxplot of shell lengths}\n    \\label{fig:boxplot}\n\\end{figure}\n\n\\subsection*{Answer}\n\n\\begin{figure}[H]\n    \\centering\n    \\includegraphics[width=1\\textwidth]{Q3-P3-boxplot.png}\n    \\caption{Boxplot of shell lengths}\n    \\label{fig:boxplot}\n\\end{figure}\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W1/Q4-P2-graph.png/","title":"Q4 P2 graph","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W1/Q4-P2-graph.png/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    png</li> <li>Size:    24 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W1\n        \u2514\u2500\u2500 Q4 P2 graph.png\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W1/Q4-P2-graph.png/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W1/Q4.pdf/","title":"Q4","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W1/Q4.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    97 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W1\n        \u2514\u2500\u2500 Q4.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W1/Q4.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W1/Q4.tex/","title":"Q4","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W1/Q4.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W1\n        \u2514\u2500\u2500 Q4.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W1/Q4.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[12pt]{article}\n\\usepackage{amsmath}\n\\usepackage{amsfonts}\n\\usepackage{graphicx}\n\n\\begin{document}\n\n\\section*{Question 4}\n\nThe variable \\( X \\) represents the number of cigarettes sold per year (in hundreds per capita), and the variable \\( Y \\) represents the number of lung cancer deaths per 10,000 inhabitants in 1960. The following data points are observed.\n\n\\subsection*{1.}\n\nLet the number of samples be:\n\\[\nn = 11\n\\]\n\nLet the values of \\( X \\) in ascending order be:\n\\[\nX_1 = 18.20, \\, X_2 = 18.24, \\, \\dots, \\, X_i, \\, \\dots, \\, X_n = 40.46, \\quad i \\in \\{1, 2, \\dots, n\\}\n\\]\n\nAs well as the corresponding values of \\( Y \\):\n\\[\nY_1 = 17.05, \\, Y_2 = 15.98, \\, \\dots, \\, Y_i, \\, \\dots, \\, Y_n = 27.27, \\quad i \\in \\{1, 2, \\dots, n\\}\n\\]\n\nThen, we have the mean of \\( X \\) and the mean of \\( Y \\) as:\n\\[\n\\bar{X} = \\frac{1}{n} \\sum_{i=1}^n X_i = \\frac{29,848}{1,100} \\approx 27.135\n\\]\n\\[\n\\bar{Y} = \\frac{1}{n} \\sum_{i=1}^n Y_i = \\frac{2,298}{110} \\approx 20.891\n\\]\n\nThen, we compute the covariance of \\( X \\) and \\( Y \\):\n\\[\n\\sigma_{XY} = \\frac{1}{n} \\sum_{i=1}^n X_i Y_i - \\bar{X} \\bar{Y} \\approx 23.093 &gt; 0\n\\]\n\nHence, we can conclude that \\( Y \\) increases with respect to \\( X \\).\n\n\\textbf{Answer:} Increasing\n\n\\subsection*{2.}\n\nAssume that \\( Y \\) approximately grows linearly with respect to \\( X \\):\n\\[\nY_i \\approx a X_i + b, \\quad i \\in \\{1, 2, \\dots, n\\}\n\\]\n\nLet the variance of \\( X \\) (denoted \\( \\sigma_X^2 \\)) be:\n\\[\n\\sigma_X^2 = \\frac{1}{n} \\sum_{i=1}^n X_i^2 - \\bar{X}^2 \\approx 40.927\n\\]\n\nThen, we calculate \\( a \\) as:\n\\[\na = \\frac{\\sigma_{XY}}{\\sigma_X^2} \\approx 0.564\n\\]\n\nNext, we calculate \\( b \\) as:\n\\[\nb = \\bar{Y} - \\frac{\\sigma_{XY}}{\\sigma_X^2} \\bar{X} = \\bar{Y} - a \\bar{X} \\approx 5.580\n\\]\n\nThus, the linear relationship between \\( Y \\) and \\( X \\) is given by:\n\\[\nY_i \\approx 0.564 X_i + 5.580, \\quad i \\in \\{1, 2, \\dots, 11\\}\n\\]\n\n\\textbf{Answer:}\n\\[\nY_i \\approx 0.564 X_i + 5.580, \\quad i \\in \\{1, 2, \\dots, 11\\}\n\\]\n\n\\begin{figure}[h!]\n\\centering\n\\includegraphics[width=0.5\\textwidth]{Q4-P2-graph.png}\n\\caption{Graph of the relationship between \\( Y \\) and \\( X \\)}\n\\end{figure}\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W10/","title":"W10","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W10/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 8 items</li> <li>Size:  333 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W10\n</code></pre> Name Type Item Size Q1 pdf / 76 KiB Q1 tex / 2 KiB Q2 pdf / 85 KiB Q2 tex / 2 KiB Q3 pdf / 83 KiB Q3 tex / 2 KiB Q4 pdf / 81 KiB Q4 tex / 2 KiB"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W10/Q1.pdf/","title":"Q1","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W10/Q1.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    76 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W10\n        \u2514\u2500\u2500 Q1.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W10/Q1.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W10/Q1.tex/","title":"Q1","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W10/Q1.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W10\n        \u2514\u2500\u2500 Q1.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W10/Q1.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[12pt]{article}\n\n\\usepackage{graphicx}\n\\usepackage{amssymb}\n\\usepackage{amsmath}\n\\usepackage[margin=1in]{geometry}\n\\usepackage{fancyhdr}\n\\usepackage{enumerate}\n\\usepackage[shortlabels]{enumitem}\n\n\\pagestyle{fancy}\n\\fancyhead[l]{Li Yifeng}\n\\fancyhead[c]{Homework \\#10}\n\\fancyhead[r]{\\today}\n\\fancyfoot[c]{\\thepage}\n\\renewcommand{\\headrulewidth}{0.2pt}\n\\setlength{\\headheight}{15pt}\n\n\\newcommand{\\bE}{\\mathbb{E}}\n\\newcommand{\\bP}{\\mathbb{P}}\n\n\\begin{document}\n\n    \\section*{Question 1}\n\n    \\noindent \n\n    \\bigskip\n\n    \\begin{enumerate}[start=1,label={\\bfseries Part \\arabic*:},leftmargin=0in]\n        \\bigskip\\item \n\n        \\subsection*{Solution}\n        First compute the marginal distribution of $X$:\n        \\[\n        P(X=0)=\\frac18,\\quad P(X=1)=\\frac78.\n        \\]\n        Then\n        \\[\n        H(X)=-\\sum_{x=0}^1 P(X=x)\\log_2P(X=x)\n        =-\\Bigl(\\tfrac18\\log_2\\tfrac18+\\tfrac78\\log_2\\tfrac78\\Bigr)\n        \\approx0.544\\text{ bits}.\n        \\]\n\n        Next compute the conditional entropy:\n        \\[\n        H(X\\mid Y)\n        =\\sum_{y=0}^1P(Y=y)\\,H(X\\mid Y=y).\n        \\]\n        For $Y=0$, $P(Y=0)=\\tfrac18$ and $X$ is degenerate ($H=0$).\\\\\n        For $Y=1$, $P(Y=1)=\\tfrac78$ and\n        \\[\n        P(X=0\\mid1)=\\frac{1/8}{7/8}=\\frac17,\\quad\n        P(X=1\\mid1)=\\frac67,\n        \\]\n        so\n        \\[\n        H(X\\mid Y=1)\n        =-\\Bigl(\\tfrac17\\log_2\\tfrac17+\\tfrac67\\log_2\\tfrac67\\Bigr)\n        \\approx0.592\\text{ bits}.\n        \\]\n        Hence\n        \\[\n        H(X\\mid Y)\n        =\\frac18\\cdot0+\\frac78\\cdot0.592\n        \\approx0.519\\text{ bits}.\n        \\]\n        Finally, compare:\n        \\[\n        H(X)\\approx0.544\\;\\ge\\;0.519\\approx H(X\\mid Y).\n        \\]\n\n        \\subsection*{Answer}\n        \\[\n        \\boxed{\n            H(X)\\approx0.544\\text{ bits},\\quad\n            H(X\\mid Y)\\approx0.519\\text{ bits},\\quad\n            H(X)\\ge H(X\\mid Y).}\n        \\]\n\n        \\bigskip\\item \n\n        \\subsection*{Solution}\n        We compare $H(X\\mid Y=1)\\approx0.592$ bits (from above) with the a\u2010priori $H(X)\\approx0.544$ bits. \n\n        \\subsection*{Answer}\n        \\[\n        \\boxed{\n            H(X\\mid Y=1)\\approx0.592\\text{ bits}\n            \\;&gt;\\;\n            H(X)\\approx0.544\\text{ bits}.\n        }\n        \\]\n\n        \\bigskip\\item \n\n        \\subsection*{Solution}\n        The mutual information is\n        \\[\n        I(X;Y)=H(X)-H(X\\mid Y)\n        \\approx0.544-0.519=0.025\\text{ bits}.\n        \\]\n\n        \\subsection*{Answer}\n        \\[\n        \\boxed{I(X;Y)\\approx0.025\\text{ bits}.}\n        \\]\n    \\end{enumerate}\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W10/Q2.pdf/","title":"Q2","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W10/Q2.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    85 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W10\n        \u2514\u2500\u2500 Q2.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W10/Q2.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W10/Q2.tex/","title":"Q2","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W10/Q2.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W10\n        \u2514\u2500\u2500 Q2.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W10/Q2.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[12pt]{article}\n\n\\usepackage{graphicx}\n\\usepackage{amssymb}\n\\usepackage{amsmath}\n\\usepackage[margin=1in]{geometry}\n\\usepackage{fancyhdr}\n\\usepackage{enumerate}\n\\usepackage[shortlabels]{enumitem}\n\n\\pagestyle{fancy}\n\\fancyhead[l]{Li Yifeng}\n\\fancyhead[c]{Homework \\#10}\n\\fancyhead[r]{\\today}\n\\fancyfoot[c]{\\thepage}\n\\renewcommand{\\headrulewidth}{0.2pt}\n\\setlength{\\headheight}{15pt}\n\n\\newcommand{\\bE}{\\mathbb{E}}\n\\newcommand{\\bP}{\\mathbb{P}}\n\n\\begin{document}\n\n    \\section*{Question 2}\n\n    \\noindent \n\n    \\bigskip\n\n    Consider a ternary source on $\\{R,G,B\\}$ with two distributions:\n    \\[\n    \\begin{array}{c|ccc}\n        \\text{Source} &amp; R &amp; G &amp; B\\\\\\hline\n        Q_1 &amp; \\tfrac16 &amp; \\tfrac12 &amp; \\tfrac13\\\\\n        Q_2 &amp; \\tfrac{1-p}2 &amp; p &amp; \\tfrac{1-p}2\n    \\end{array}\n    \\]\n\n    \\begin{enumerate}[start=1,label={\\bfseries Part \\arabic*:},leftmargin=0in]\n        \\bigskip\\item \n\n        \\subsection*{Solution}\n        We compute\n        \\[\n        H(Q_1)\n        =-\\sum_{x\\in\\{R,G,B\\}}Q_1(x)\\log_2Q_1(x)\n        =-\\Bigl(\\tfrac16\\log_2\\tfrac16+\\tfrac12\\log_2\\tfrac12+\\tfrac13\\log_2\\tfrac13\\Bigr).\n        \\]\n        Numerically,\n        \\[\n        -\\tfrac16(-\\log_2 6)-\\tfrac12(-1)-\\tfrac13(-\\log_2 3)\n        \\approx0.4308+0.5+0.5283\n        \\approx1.459\\text{ bits}.\n        \\]\n\n        \\subsection*{Answer}\n        \\[\n        \\boxed{H(Q_1)\\approx1.459\\text{ bits}.}\n        \\]\n\n        \\bigskip\\item \n\n        \\subsection*{Solution}\n        For $Q_2=(\\tfrac{1-p}2,p,\\tfrac{1-p}2)$,\n        \\[\n        H(Q_2)\n        =-p\\log_2 p-2\\cdot\\tfrac{1-p}2\\log_2\\!\\Bigl(\\tfrac{1-p}2\\Bigr)\n        =-p\\log_2 p-(1-p)\\log_2(1-p)+(1-p).\n        \\]\n        Differentiate w.r.t.\\ $p$:\n        \\[\n        \\frac{dH}{dp}\n        =-\\log_2 p+\\log_2(1-p)-1\n        \\stackrel{!}{=}0\n        \\;\\Longrightarrow\\;\n        \\frac{1-p}{p}=2\n        \\;\\Longrightarrow\\;p=\\tfrac13.\n        \\]\n\n        \\subsection*{Answer}\n        \\[\n        \\boxed{p=\\frac13.}\n        \\]\n    \\end{enumerate}\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W10/Q3.pdf/","title":"Q3","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W10/Q3.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    83 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W10\n        \u2514\u2500\u2500 Q3.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W10/Q3.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W10/Q3.tex/","title":"Q3","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W10/Q3.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W10\n        \u2514\u2500\u2500 Q3.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W10/Q3.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[12pt]{article}\n\n\\usepackage{graphicx}\n\\usepackage{amssymb}\n\\usepackage{amsmath}\n\\usepackage[margin=1in]{geometry}\n\\usepackage{fancyhdr}\n\\usepackage{enumerate}\n\\usepackage[shortlabels]{enumitem}\n\n\\pagestyle{fancy}\n\\fancyhead[l]{Li Yifeng}\n\\fancyhead[c]{Homework \\#10}\n\\fancyhead[r]{\\today}\n\\fancyfoot[c]{\\thepage}\n\\renewcommand{\\headrulewidth}{0.2pt}\n\\setlength{\\headheight}{15pt}\n\n\\newcommand{\\bE}{\\mathbb{E}}\n\\newcommand{\\bP}{\\mathbb{P}}\n\n\\begin{document}\n\n    \\section*{Question 3}\n\n    \\noindent \n    Suppose that $X$ and $Y$ are independent and uniformly distributed on $\\{0,1,2\\}$.  Let\n    \\[\n    S \\;=\\; X + Y,\\quad\n    W \\;=\\; X\\cdot Y.\n    \\]\n\n    \\begin{enumerate}[start=1,label={\\bfseries Part \\arabic*:},leftmargin=0in]\n        \\bigskip\\item \n\n        \\subsection*{Solution}\n        First list the probability mass function of $S$:\n        \\[\n        \\begin{array}{c|ccccc}\n            s &amp; 0 &amp; 1 &amp; 2 &amp; 3 &amp; 4\\\\\\hline\n            P(S=s) &amp; \\tfrac{1}{9} &amp; \\tfrac{2}{9} &amp; \\tfrac{3}{9} &amp; \\tfrac{2}{9} &amp; \\tfrac{1}{9}\n        \\end{array}\n        \\]\n        and of $W$:\n        \\[\n        \\begin{array}{c|cccc}\n            w &amp; 0 &amp; 1 &amp; 2 &amp; 4\\\\\\hline\n            P(W=w) &amp; \\tfrac{5}{9} &amp; \\tfrac{1}{9} &amp; \\tfrac{2}{9} &amp; \\tfrac{1}{9}\n        \\end{array}\n        \\]\n        Therefore\n        \\[\n        H(S)\n        =-\\sum_{s=0}^4 P(S=s)\\,\\log_2P(S=s)\n        \\approx2.1972\\text{ bits},\n        \\]\n        \\[\n        H(W)\n        =-\\sum_{w\\in\\{0,1,2,4\\}}P(W=w)\\,\\log_2P(W=w)\n        \\approx1.6577\\text{ bits}.\n        \\]\n\n        \\subsection*{Answer}\n        \\[\n        \\boxed{\n            H(S)\\approx2.1972\\text{ bits},\\quad\n            H(W)\\approx1.6577\\text{ bits}.\n        }\n        \\]\n\n        \\bigskip\\item \n\n        \\subsection*{Solution}\n        The mutual information is\n        \\[\n        I(S;W)\n        =H(S)+H(W)-H(S,W),\n        \\]\n        where the joint entropy\n        \\[\n        H(S,W)\n        =-\\sum_{s,w}P(S=s,W=w)\\,\\log_2P(S=s,W=w)\n        \\approx2.5033\\text{ bits}.\n        \\]\n        Hence\n        \\[\n        I(S;W)\n        \\approx2.1972+1.6577-2.5033\n        \\approx1.3516\\text{ bits}.\n        \\]\n\n        \\subsection*{Answer}\n        \\[\n        \\boxed{I(S;W)\\approx1.3516\\text{ bits}.}\n        \\]\n    \\end{enumerate}\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W10/Q4.pdf/","title":"Q4","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W10/Q4.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    81 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W10\n        \u2514\u2500\u2500 Q4.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W10/Q4.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W10/Q4.tex/","title":"Q4","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W10/Q4.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W10\n        \u2514\u2500\u2500 Q4.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W10/Q4.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[12pt]{article}\n\n\\usepackage{graphicx}\n\\usepackage{amssymb}\n\\usepackage{amsmath}\n\\usepackage[margin=1in]{geometry}\n\\usepackage{fancyhdr}\n\\usepackage{enumerate}\n\\usepackage[shortlabels]{enumitem}\n\n\\pagestyle{fancy}\n\\fancyhead[l]{Li Yifeng}\n\\fancyhead[c]{Homework \\#10}\n\\fancyhead[r]{\\today}\n\\fancyfoot[c]{\\thepage}\n\\renewcommand{\\headrulewidth}{0.2pt}\n\\setlength{\\headheight}{15pt}\n\n\\newcommand{\\bE}{\\mathbb{E}}\n\\newcommand{\\bP}{\\mathbb{P}}\n\n\\begin{document}\n\n    \\section*{Question 4}\n\n    \\noindent Consider a binary communication channel with input $X\\sim\\mathrm{Bern}(p)$, output $Y\\sim\\mathrm{Bern}(q)$, and crossover (error) probability $\\varepsilon$.  It is known that\n    \\[\n    q \\;=\\; p + \\varepsilon \\;-\\; 2\\varepsilon p.\n    \\]\n    The channel capacity is\n    \\[\n    C \\;=\\;\\max_{0\\le p\\le1} I(X;Y).\n    \\]\n    Find the value of $p$ that maximises $C$ (i.e.\\ maximises $I(X;Y)$).\n\n    \\bigskip\n\n    \\begin{enumerate}[label={},leftmargin=0in]\\item\n        \\subsection*{Solution}\n        The mutual information can be written\n        \\[\n        I(X;Y)\n        =H(Y)-H(Y\\mid X)\n        =H\\bigl(q\\bigr)-H\\bigl(\\varepsilon\\bigr),\n        \\]\n        where $H(\\varepsilon)=-\\varepsilon\\log_2\\varepsilon-(1-\\varepsilon)\\log_2(1-\\varepsilon)$ is constant in $p$, and\n        \\[\n        q(p)=p + \\varepsilon -2\\varepsilon p\n        =(1-2\\varepsilon)p + \\varepsilon.\n        \\]\n        Differentiate with respect to $p$:\n        \\[\n        \\frac{dI}{dp}\n        =\\frac{d}{dp}H(q)\n        =(1-2\\varepsilon)\\,\\bigl[-\\log_2 q + \\log_2(1-q)\\bigr]\n        \\stackrel{!}{=}0.\n        \\]\n        Hence\n        \\[\n        \\log_2\\frac{1-q}{q}=0\n        \\;\\Longrightarrow\\;q=\\tfrac12.\n        \\]\n        Solving $q=(1-2\\varepsilon)p+\\varepsilon=\\tfrac12$ gives\n        \\[\n        (1-2\\varepsilon)p=\\tfrac12-\\varepsilon\n        \\;\\Longrightarrow\\;\n        p=\\frac{\\tfrac12-\\varepsilon}{1-2\\varepsilon}\n        =\\tfrac12,\n        \\]\n        for all $\\varepsilon\\neq\\tfrac12$.\n\n        \\subsection*{Answer}\n        \\[\n        \\boxed{p=\\frac12.}\n        \\]\n    \\end{enumerate}\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W2/","title":"W2","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W2/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 10 items</li> <li>Size:  718 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W2\n</code></pre> Name Type Item Size Q1 pdf / 166 KiB Q1 tex / 4 KiB Q2 P2 boxplot png / 35 KiB Q2 pdf / 176 KiB Q2 tex / 2 KiB Q3 P1 stemplot png / 16 KiB Q3 pdf / 159 KiB Q3 tex / 2 KiB Q4 pdf / 154 KiB Q4 tex / 3 KiB"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W2/Q1.pdf/","title":"Q1","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W2/Q1.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    166 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W2\n        \u2514\u2500\u2500 Q1.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W2/Q1.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W2/Q1.tex/","title":"Q1","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W2/Q1.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    4 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W2\n        \u2514\u2500\u2500 Q1.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W2/Q1.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[12pt]{article}\n\\usepackage{amsmath, amssymb}\n\\usepackage{geometry}\n\\geometry{a4paper, margin=1in}\n\\usepackage{setspace}\n\\usepackage{lmodern}\n\\usepackage{titlesec}\n\n% Formatting section headings\n\\titleformat{\\section}[block]{\\bfseries\\Large}{\\thesection.}{1em}{}\n\\titleformat{\\subsection}[block]{\\bfseries\\large}{\\thesubsection.}{1em}{}\n\n\\title{Question 1: Statistical Analysis of a Sample Population}\n\\author{}\n\\date{}\n\n\\begin{document}\n    \\maketitle\n    \\onehalfspacing\n\n    \\section*{Problem Statement}\n    A sample consists of 120 males and 80 females. The table below shows the distribution of individuals by gender and age.\n\n    \\bigskip\n\n    \\section*{Part 1: Total Number of Individuals Younger Than 20}\n    Let the number of males ($n_{\\mathrm{male}}$) and females ($n_{\\mathrm{female}}$) in the sample be:\n    \\[\n    \\begin{aligned}\n        n_{\\mathrm{male}} &amp;= 120, \\\\\n        n_{\\mathrm{female}} &amp;= 80.\n    \\end{aligned}\n    \\]\n    Thus, the total sample size is:\n    \\[\n    n = n_{\\mathrm{male}} + n_{\\mathrm{female}} = 200.\n    \\]\n    Let the number of age groups be:\n    \\[\n    K = 4.\n    \\]\n    Define the relative frequencies of males ($p_{\\mathrm{male}_k}$) and females ($p_{\\mathrm{female}_k}$) in each group:\n    \\[\n    \\begin{alignedat}{4}\n        p_{\\mathrm{male}_1} &amp;= 10\\%,\\quad p_{\\mathrm{male}_2} &amp;= 10\\%,\\quad \\dots,\\quad p_{\\mathrm{male}_K} &amp;= 50\\%, \\\\\n        p_{\\mathrm{female}_1} &amp;= 20\\%,\\quad p_{\\mathrm{female}_2} &amp;= 20\\%,\\quad \\dots,\\quad p_{\\mathrm{female}_K} &amp;= 30\\%.\n    \\end{alignedat}\n    \\]\n    The absolute frequency of males and females in each group is given by:\n    \\[\n    \\begin{alignedat}{2}\n        N_{\\mathrm{male}_k} &amp;= n_{\\mathrm{male}} p_{\\mathrm{male}_k},\\quad &amp;k \\in \\{1,2,\\dots,K\\}, \\\\\n        N_{\\mathrm{female}_k} &amp;= n_{\\mathrm{female}} p_{\\mathrm{female}_k},\\quad &amp;k \\in \\{1,2,\\dots,K\\}.\n    \\end{alignedat}\n    \\]\n    The total absolute frequency is:\n    \\[\n    N_k = N_{\\mathrm{male}_k} + N_{\\mathrm{female}_k},\\quad k \\in \\{1,2,\\dots,K\\}.\n    \\]\n    The number of people younger than 20 is:\n    \\[\n    N_{\\#\\{y/o \\in \\{0,1,\\dots,19\\}\\}} = N_1 = 28.\n    \\]\n    \\textbf{Answer for Part 1:}\n    \\[\n    \\boxed{N_{\\#\\{y/o \\in \\{0,1,\\dots,19\\}\\}} = 28}.\n    \\]\n\n    \\bigskip\n\n    \\section*{Part 2: Percentage of Individuals Aged 50 or Older}\n    The relative frequency for the total population is:\n    \\[\n    p_k = \\frac{N_k}{n},\\quad k \\in \\{1,2,\\dots,K\\}.\n    \\]\n    The percentage of individuals aged 50 or older is:\n    \\[\n    p_{\\frac{\\#\\{y/o \\in \\{50,51,\\dots,89\\}\\}}{\\#\\{y/o \\in \\{0,1,\\dots,89\\}\\}}} = p_4 = 42\\%.\n    \\]\n    \\textbf{Answer for Part 2:}\n    \\[\n    \\boxed{p_{\\frac{\\#\\{y/o \\in \\{50,51,\\dots,89\\}\\}}{\\#\\{y/o \\in \\{0,1,\\dots,89\\}\\}}} = 42\\%}.\n    \\]\n\n    \\bigskip\n\n    \\section*{Part 3: Number of Males Aged 30 or Older}\n    The number of males aged 30 years or older is:\n    \\[\n    N_{\\mathrm{male}_{\\#\\{y/o \\in \\{30,31,\\dots,89\\}\\}}} = \\sum_{k=3}^{K} N_{\\mathrm{male}_k} = 96.\n    \\]\n    \\textbf{Answer for Part 3:}\n    \\[\n    \\boxed{N_{\\mathrm{male}_{\\#\\{y/o \\in \\{30,31,\\dots,89\\}\\}}} = 96}.\n    \\]\n\n    \\bigskip\n\n    \\section*{Part 4: Median Age Calculation}\n    Define the age class intervals:\n    \\[\n    \\begin{aligned}\n        z_1 &amp;= y/o \\in \\{0,1,\\dots,19\\}, \\\\\n        z_2 &amp;= y/o \\in \\{20,21,\\dots,29\\}, \\\\\n        &amp;\\dots \\\\\n        z_K &amp;= y/o \\in \\{50,51,\\dots,89\\},\\quad k \\in \\{1,2,\\dots,K\\}.\n    \\end{aligned}\n    \\]\n    The median position is at:\n    \\[\n    p_m = 50\\%.\n    \\]\n    Since:\n    \\[\n    \\sum_{k=1}^{2} p_k = 28\\% &lt; p_m &lt; 58\\% = \\sum_{k=1}^{3} p_k,\n    \\]\n    the median falls within $z_3$. The lower boundary of $z_3$ is:\n    \\[\n    L_{z_3} = \\frac{29+30}{2} = 29.5.\n    \\]\n    The class width is:\n    \\[\n    C_{z_3} = \\frac{(49+50)-(29+30)}{2} = 20.\n    \\]\n    Assuming a uniform distribution within $z_3$, the median is calculated as:\n    \\[\n    m = L_{z_3} + \\left(\\frac{p_m - \\sum_{k=1}^{2} p_k}{p_3}\\right) C_{z_3}.\n    \\]\n    Substituting values:\n    \\[\n    m = 29.5 + \\left(\\frac{50\\% - 28\\%}{30\\%}\\right) \\times 20 = \\frac{265}{6} \\approx 44.167.\n    \\]\n    \\textbf{Answer for Part 4:}\n    \\[\n    \\boxed{m = \\frac{265}{6} \\approx 44.167}.\n    \\]\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W2/Q2-P2-boxplot.png/","title":"Q2 P2 boxplot","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W2/Q2-P2-boxplot.png/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    png</li> <li>Size:    35 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W2\n        \u2514\u2500\u2500 Q2 P2 boxplot.png\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W2/Q2-P2-boxplot.png/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W2/Q2.pdf/","title":"Q2","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W2/Q2.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    176 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W2\n        \u2514\u2500\u2500 Q2.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W2/Q2.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W2/Q2.tex/","title":"Q2","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W2/Q2.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W2\n        \u2514\u2500\u2500 Q2.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W2/Q2.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[12pt]{article}\n\\usepackage{amsmath, amssymb}\n\\usepackage{geometry}\n\\geometry{a4paper, margin=1in}\n\\usepackage{setspace}\n\\usepackage{lmodern}\n\\usepackage{graphicx}\n\\usepackage{titlesec}\n\n% Formatting section headings\n\\titleformat{\\section}[block]{\\bfseries\\Large}{\\thesection.}{1em}{}\n\\titleformat{\\subsection}[block]{\\bfseries\\large}{\\thesubsection.}{1em}{}\n\n\\title{Question 2: Statistical Analysis of Antithyroid Hormone Levels}\n\\author{}\n\\date{}\n\n\\begin{document}\n\\maketitle\n\\onehalfspacing\n\n\\section*{Problem Statement}\nAlice suffers from a thyroid disorder. The concentration of antithyroid hormone in her blood is described by the following observations.\n\n\\bigskip\n\n\\section*{Part 1: Mean and Quartiles}\nLet the number of observations be:\n\\[\nn = 14.\n\\]\nThe data in ascending order is:\n\\[\nx_1 = 0.11, \\quad x_2 = 1.44, \\quad \\dots, \\quad x_i, \\quad \\dots, \\quad x_n = 10.8, \\quad i \\in \\{1,2,\\dots,n\\}.\n\\]\n\nThe mean is calculated as:\n\\[\n\\bar{x} = \\frac{1}{n} \\sum_{i=1}^{n} x_i = \\frac{2613}{700} \\approx 3.733.\n\\]\n\nThe indices for the quartiles are:\n\\[\n\\begin{alignedat}{2}\ni_{Q_1} &amp;= \\frac{n}{4}+\\frac{1}{2} &amp;= 4, \\\\\ni_{Q_2} &amp;= \\frac{n}{2}+\\frac{1}{2} &amp;= 7.5, \\\\\ni_{Q_3} &amp;= \\frac{3}{4}n+\\frac{1}{2} &amp;= 11.\n\\end{alignedat}\n\\]\n\nThe first quartile ($Q_1$), median ($Q_2$), and third quartile ($Q_3$) are determined as:\n\\[\n\\begin{alignedat}{3}\nQ_1 &amp;= \\frac{x_{\\lceil i_{Q_1}-\\frac{1}{2} \\rceil} + x_{\\lfloor i_{Q_1}+\\frac{1}{2} \\rfloor}}{2} &amp;= x_4 &amp;= 2.6, \\\\\nQ_2 &amp;= \\frac{x_{\\lceil i_{Q_2}-\\frac{1}{2} \\rceil} + x_{\\lfloor i_{Q_2}+\\frac{1}{2} \\rfloor}}{2} &amp;= \\frac{x_7 + x_8}{2} &amp;= 3.615, \\\\\nQ_3 &amp;= \\frac{x_{\\lceil i_{Q_3}-\\frac{1}{2} \\rceil} + x_{\\lfloor i_{Q_3}+\\frac{1}{2} \\rfloor}}{2} &amp;= x_{11} &amp;= 4.38.\n\\end{alignedat}\n\\]\n\n\\textbf{Answer for Part 1:}\n\\[\n\\bar{x} = \\frac{2613}{700} \\approx 3.733, \\quad Q_1 = 2.6, \\quad Q_2 = 3.615, \\quad Q_3 = 4.38.\n\\]\n\n\\bigskip\n\n\\section*{Part 2: Boxplot}\nThe minimum and maximum values are:\n\\[\n\\begin{aligned}\n\\text{min} &amp;= x_1 = 0.11, \\\\\n\\text{max} &amp;= x_n = 10.8.\n\\end{aligned}\n\\]\n\nThe corresponding boxplot is displayed below:\n\n\\begin{center}\n    \\includegraphics[width=1\\textwidth]{Q2-P2-boxplot.png}\n\\end{center}\n\n\\textbf{Answer for Part 2:} Boxplot is shown above.\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W2/Q3-P1-stemplot.png/","title":"Q3 P1 stemplot","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W2/Q3-P1-stemplot.png/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    png</li> <li>Size:    16 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W2\n        \u2514\u2500\u2500 Q3 P1 stemplot.png\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W2/Q3-P1-stemplot.png/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W2/Q3.pdf/","title":"Q3","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W2/Q3.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    159 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W2\n        \u2514\u2500\u2500 Q3.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W2/Q3.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W2/Q3.tex/","title":"Q3","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W2/Q3.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W2\n        \u2514\u2500\u2500 Q3.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W2/Q3.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[12pt]{article}\n\\usepackage{amsmath, amssymb}\n\\usepackage{geometry}\n\\geometry{a4paper, margin=1in}\n\\usepackage{setspace}\n\\usepackage{lmodern}\n\\usepackage{graphicx}\n\\usepackage{titlesec}\n\n% Formatting section headings\n\\titleformat{\\section}[block]{\\bfseries\\Large}{\\thesection.}{1em}{}\n\\titleformat{\\subsection}[block]{\\bfseries\\large}{\\thesubsection.}{1em}{}\n\n\\title{Question 3: Statistical Analysis of Test Grades}\n\\author{}\n\\date{}\n\n\\begin{document}\n\\maketitle\n\\onehalfspacing\n\n\\section*{Part 1: Frequency Distribution}\nThe histogram representing the test grades distribution is shown below:\n\n\\begin{center}\n    \\includegraphics[width=0.3\\textwidth]{Q3-P1-stemplot.png}\n\\end{center}\n\n\\textbf{Answer:} Histogram shown above.\n\n\\bigskip\n\n\\section*{Part 2: Descriptive Statistics}\nLet the number of test scores be:\n\\[\nn = 20.\n\\]\nThe data in ascending order:\n\\[\nx_1 = 52, \\quad x_2 = 62, \\quad \\dots, \\quad x_n = 100.\n\\]\n\nThe range is:\n\\[\nr = x_n - x_1 = 100 - 52 = 48.\n\\]\n\nThe mean is computed as:\n\\[\n\\bar{x} = \\frac{1}{n} \\sum_{i=1}^{n} x_i = 84.5.\n\\]\n\nThe standard deviation is given by:\n\\[\n\\sigma = \\sqrt{\\frac{1}{n} \\sum_{i=1}^{n} x_i^2 - \\bar{x}^2} = \\frac{\\sqrt{659}}{2} \\approx 12.835.\n\\]\n\nThe indices for the quartiles are:\n\\[\n\\begin{alignedat}{2}\ni_{Q_1} &amp;= \\frac{n}{4}+\\frac{1}{2} &amp;= 5.5, \\\\\ni_{Q_2} &amp;= \\frac{n}{2}+\\frac{1}{2} &amp;= 10.5, \\\\\ni_{Q_3} &amp;= \\frac{3}{4}n+\\frac{1}{2} &amp;= 15.5.\n\\end{alignedat}\n\\]\n\nCalculating the quartiles:\n\\[\n\\begin{alignedat}{3}\nQ_1 &amp;= \\frac{x_{\\lceil i_{Q_1}-\\frac{1}{2} \\rceil} + x_{\\lfloor i_{Q_1}+\\frac{1}{2} \\rfloor}}{2} &amp;= \\frac{x_5 + x_6}{2} &amp;= 77, \\\\\nQ_2 &amp;= \\frac{x_{\\lceil i_{Q_2}-\\frac{1}{2} \\rceil} + x_{\\lfloor i_{Q_2}+\\frac{1}{2} \\rfloor}}{2} &amp;= \\frac{x_{10} + x_{11}}{2} &amp;= 87, \\\\\nQ_3 &amp;= \\frac{x_{\\lceil i_{Q_3}-\\frac{1}{2} \\rceil} + x_{\\lfloor i_{Q_3}+\\frac{1}{2} \\rfloor}}{2} &amp;= \\frac{x_{15} + x_{16}}{2} &amp;= 94.\n\\end{alignedat}\n\\]\n\nThe interquartile range (IQR) is:\n\\[\n\\mathrm{IQR} = Q_3 - Q_1 = 94 - 77 = 17.\n\\]\n\n\\textbf{Answer for Part 2:}\n\\[\nQ_2 = 87, \\quad \\bar{x} = 84.5, \\quad r = 48, \\quad \\sigma = \\frac{\\sqrt{659}}{2} \\approx 12.835, \\quad \\mathrm{IQR} = 17.\n\\]\n\n\\bigskip\n\n\\section*{Part 3: Outlier Detection}\nUsing the outlier rule:\n\\[\nQ_1 - 1.5 \\times \\mathrm{IQR} = 77 - 1.5 \\times 17 = 51.5,\n\\]\n\\[\nQ_3 + 1.5 \\times \\mathrm{IQR} = 94 + 1.5 \\times 17 = 119.5.\n\\]\n\nSince all values in the dataset satisfy:\n\\[\n51.5 &lt; x_1 &lt; x_n &lt; 119.5,\n\\]\nthere are no outliers.\n\n\\textbf{Answer:} No outliers.\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W2/Q4.pdf/","title":"Q4","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W2/Q4.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    154 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W2\n        \u2514\u2500\u2500 Q4.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W2/Q4.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W2/Q4.tex/","title":"Q4","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W2/Q4.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    3 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W2\n        \u2514\u2500\u2500 Q4.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W2/Q4.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[12pt]{article}\n\\usepackage{amsmath, amssymb}\n\\usepackage{geometry}\n\\geometry{a4paper, margin=1in}\n\\usepackage{setspace}\n\\usepackage{lmodern}\n\\usepackage{titlesec}\n\n% Formatting section headings\n\\titleformat{\\section}[block]{\\bfseries\\Large}{\\thesection.}{1em}{}\n\\titleformat{\\subsection}[block]{\\bfseries\\large}{\\thesubsection.}{1em}{}\n\n\\title{Question 4: Counting Five-Digit Numbers}\n\\author{}\n\\date{}\n\n\\begin{document}\n\\maketitle\n\\onehalfspacing\n\n\\section*{1. How many five-digit numbers can be written?}\n\nLet the number of digits be:\n\\[\nK = 5.\n\\]\n\nThe set of all possible numbers in one digit is:\n\\[\nD = \\{0,1,\\dots,9\\}.\n\\]\n\nThe number of elements in \\( D \\) is:\n\\[\nd = \\#D = 10.\n\\]\n\nThus, the total number of five-digit numbers is:\n\\[\nn = d^K = 100\\,000.\n\\]\n\n\\subsection*{Other cases:}\n\n\\begin{itemize}\n    \\item Excluding numbers with the most significant digit 0:\n    \\[\n    n_{\\,\\backslash\\,\\{0\\}} = (d-1)d^{K-1} = 90\\,000.\n    \\]\n\n    \\item Including negative numbers:\n    \\[\n    n_{\\mathbb{Z}} = 2d^K - 1 = 199\\,999.\n    \\]\n\n    \\item Including negative numbers but excluding numbers with the most significant digit 0:\n    \\[\n    n_{\\mathbb{Z}\\,\\backslash\\,\\{0\\}} = 2(d-1)d^{K-1} = 180\\,000.\n    \\]\n\\end{itemize}\n\n\\textbf{Answer:}\n\\[\n\\begin{aligned}\nn &amp;= 100\\,000, \\\\\nn_{\\,\\backslash\\,\\{0\\}} &amp;= 90\\,000, \\\\\nn_{\\mathbb{Z}} &amp;= 199\\,999, \\\\\nn_{\\mathbb{Z}\\,\\backslash\\,\\{0\\}} &amp;= 180\\,000.\n\\end{aligned}\n\\]\n\n\\bigskip\n\n\\section*{2. How many five-digit numbers contain at least one even digit?}\n\nDefine the set of odd digits:\n\\[\nD_{\\text{odd}} = \\{1,3,5,7,9\\}.\n\\]\n\nThe number of elements in \\( D_{\\text{odd}} \\) is:\n\\[\nd_{\\text{odd}} = 5.\n\\]\n\nThe number of five-digit numbers with only odd digits:\n\\[\nn_{\\text{odd}} = d_{\\text{odd}}^K = 3\\,125.\n\\]\n\nThus, the number of five-digit numbers containing at least one even digit:\n\\[\nn_{\\#\\{\\text{even} \\geq 1\\}} = n - n_{\\text{odd}} = 96\\,875.\n\\]\n\n\\subsection*{Other cases:}\n\n\\begin{itemize}\n    \\item Excluding numbers with the most significant digit 0:\n    \\[\n    n_{\\,\\backslash\\,\\{0\\}_{\\#\\{\\text{even} \\geq 1\\}}} = n_{\\,\\backslash\\,\\{0\\}} - n_{\\text{odd}} = 86\\,875.\n    \\]\n\n    \\item Including negative numbers:\n    \\[\n    n_{\\mathbb{Z}_{\\#\\{\\text{even} \\geq 1\\}}} = n_{\\mathbb{Z}} - n_{\\text{odd}} = 196\\,874.\n    \\]\n\n    \\item Including negative numbers but excluding numbers with the most significant digit 0:\n    \\[\n    n_{\\mathbb{Z}\\,\\backslash\\,\\{0\\}_{\\#\\{\\text{even} \\geq 1\\}}} = n_{\\mathbb{Z}\\,\\backslash\\,\\{0\\}} - n_{\\text{odd}} = 176\\,875.\n    \\]\n\\end{itemize}\n\n\\textbf{Answer:}\n\\[\n\\begin{aligned}\nn_{\\#\\{\\text{even} \\geq 1\\}} &amp;= 96\\,875, \\\\\nn_{\\,\\backslash\\,\\{0\\}_{\\#\\{\\text{even} \\geq 1\\}}} &amp;= 86\\,875, \\\\\nn_{\\mathbb{Z}_{\\#\\{\\text{even} \\geq 1\\}}} &amp;= 196\\,874, \\\\\nn_{\\mathbb{Z}\\,\\backslash\\,\\{0\\}_{\\#\\{\\text{even} \\geq 1\\}}} &amp;= 176\\,875.\n\\end{aligned}\n\\]\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W3/","title":"W3","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W3/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 8 items</li> <li>Size:  619 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W3\n</code></pre> Name Type Item Size Q1 pdf / 144 KiB Q1 tex / 3 KiB Q2 pdf / 156 KiB Q2 tex / 2 KiB Q3 pdf / 154 KiB Q3 tex / 4 KiB Q4 pdf / 151 KiB Q4 tex / 3 KiB"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W3/Q1.pdf/","title":"Q1","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W3/Q1.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    144 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W3\n        \u2514\u2500\u2500 Q1.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W3/Q1.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W3/Q1.tex/","title":"Q1","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W3/Q1.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    3 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W3\n        \u2514\u2500\u2500 Q1.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W3/Q1.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[12pt]{article}\n\\usepackage{amsmath, amssymb}\n\\usepackage{geometry}\n\\geometry{a4paper, margin=1in}\n\\usepackage{setspace}\n\\usepackage{lmodern}\n\\usepackage{titlesec}\n\n\\titleformat{\\section}[block]{\\bfseries\\Large}{\\thesection.}{1em}{}\n\\titleformat{\\subsection}[block]{\\bfseries\\large}{\\thesubsection.}{1em}{}\n\n\\title{Question 1: Conditional Probability in an Urn Model}\n\\author{}\n\\date{}\n\n\\begin{document}\n\n\\maketitle\n\\onehalfspacing\n\n\\section*{Problem Statement}\n\\begin{quotation}\nA box contains $b$ white and $n$ black balls. A ball is drawn and replaced with $d+1$ balls of the same color, where $d$ is a positive integer. Compute the probability that the first drawn ball was black, given that the second draw was black.\n\\end{quotation}\n\n\\section*{Solution}\nLet $\\mathrm{black}$ and $\\mathrm{white}$ denote the outcomes of drawing a black ball and a white ball, respectively. We define the probability space as\n\\[\n\\begin{aligned}\n\\Omega &amp;= \\{\\mathrm{black},\\,\\mathrm{white}\\},\\\\[1mm]\n\\mathcal{F} &amp;= \\mathcal{P}(\\Omega),\\\\[1mm]\n\\mathbb{P} &amp;\\text{ is the probability measure on } \\mathcal{F}.\n\\end{aligned}\n\\]\n\nLet $A_{\\mathrm{black}}$ and $A_{\\mathrm{white}}$ be the events that a black ball and a white ball are drawn in the first draw, respectively. Then,\n\\[\n\\begin{aligned}\n\\mathbb{P}(A_{\\mathrm{black}}) &amp;= \\frac{n}{n+b},\\\\[1mm]\n\\mathbb{P}(A_{\\mathrm{white}}) &amp;= \\frac{b}{n+b}.\n\\end{aligned}\n\\]\n\nNext, let $B_{\\mathrm{black}}$ be the event that a black ball is drawn in the second draw. Conditioning on the first draw, we obtain:\n\\[\n\\begin{aligned}\n\\mathbb{P}_{A_{\\mathrm{black}}}(B_{\\mathrm{black}}) &amp;= \\frac{n+d}{n+b+d},\\\\[1mm]\n\\mathbb{P}_{A_{\\mathrm{white}}}(B_{\\mathrm{black}}) &amp;= \\frac{n}{n+b+d}.\n\\end{aligned}\n\\]\n\nSince $A_{\\mathrm{black}} \\cup A_{\\mathrm{white}} = \\Omega$ and $\\mathbb{P}(A_{\\mathrm{black}} \\cup A_{\\mathrm{white}})=1$, by the law of total probability we have:\n\\[\n\\begin{aligned}\n\\mathbb{P}(B_{\\mathrm{black}}) &amp;= \\mathbb{P}(A_{\\mathrm{black}} \\cap B_{\\mathrm{black}}) + \\mathbb{P}(A_{\\mathrm{white}} \\cap B_{\\mathrm{black}})\\\\[1mm]\n&amp;= \\mathbb{P}(A_{\\mathrm{black}})\\,\\mathbb{P}_{A_{\\mathrm{black}}}(B_{\\mathrm{black}}) + \\mathbb{P}(A_{\\mathrm{white}})\\,\\mathbb{P}_{A_{\\mathrm{white}}}(B_{\\mathrm{black}})\\\\[1mm]\n&amp;= \\frac{n}{n+b}\\cdot\\frac{n+d}{n+b+d} + \\frac{b}{n+b}\\cdot\\frac{n}{n+b+d}\\\\[1mm]\n&amp;= \\frac{n(n+d) + nb}{(n+b)(n+b+d)}.\n\\end{aligned}\n\\]\n\nFinally, applying Bayes' theorem, the conditional probability that the first drawn ball was black given that the second draw was black is:\n\\[\n\\begin{aligned}\n\\mathbb{P}_{B_{\\mathrm{black}}}(A_{\\mathrm{black}}) \n&amp;=\\frac{\\mathbb{P}_{A_{\\mathrm{black}}}(B_{\\mathrm{black}})\\,\\mathbb{P}(A_{\\mathrm{black}})}{\\mathbb{P}(B_{\\mathrm{black}})}\\\\[1mm]\n&amp;=\\frac{\\frac{n+d}{n+b+d}\\cdot\\frac{n}{n+b}}{\\frac{n(n+d)+nb}{(n+b)(n+b+d)}}\\\\[1mm]\n&amp;=\\frac{n+d}{n+d+b}.\n\\end{aligned}\n\\]\n\n\\section*{Answer}\n\\[\n\\boxed{\\mathbb{P}_{B_{\\mathrm{black}}}(A_{\\mathrm{black}}) = \\frac{n+d}{n+d+b}}\n\\]\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W3/Q2.pdf/","title":"Q2","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W3/Q2.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    156 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W3\n        \u2514\u2500\u2500 Q2.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W3/Q2.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W3/Q2.tex/","title":"Q2","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W3/Q2.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W3\n        \u2514\u2500\u2500 Q2.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W3/Q2.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[12pt]{article}\n\\usepackage{amsmath, amssymb}\n\\usepackage{geometry}\n\\geometry{a4paper, margin=1in}\n\\usepackage{setspace}\n\\usepackage{lmodern}\n\\usepackage{titlesec}\n\n% Formatting section headings\n\\titleformat{\\section}[block]{\\bfseries\\Large}{\\thesection.}{1em}{}\n\\titleformat{\\subsection}[block]{\\bfseries\\large}{\\thesubsection.}{1em}{}\n\n\\title{Question 2: European Roulette Probability Problems}\n\\author{}\n\\date{}\n\n\\begin{document}\n\\maketitle\n\\onehalfspacing\n\n\\section*{Problem Statement}\nA \\emph{European roulette} consists of a wheel with 37 numbered pockets, labeled from $0$ to $36$. The numbers are distributed as described in the following parts.\n\n\\bigskip\n\n\\section*{Part 1: Probability of an Even Number Pocket}\nLet the probability space be defined by\n\\[\n\\begin{aligned}\n\\Omega &amp;= \\{0,1,2,\\dots,36\\},\\\\[1mm]\n\\mathcal{F} &amp;= \\mathcal{P}(\\Omega),\\\\[1mm]\n\\mathbb{P} &amp;:\\quad \\mathbb{P}(\\{0\\}) = \\mathbb{P}(\\{1\\}) = \\cdots = \\mathbb{P}(\\{36\\}) = \\frac{1}{37}.\n\\end{aligned}\n\\]\nDefine the set of even-numbered pockets as\n\\[\nS_{\\mathrm{even}} = \\{2,4,6,\\dots,36\\}.\n\\]\nSince there are $18$ even numbers in $\\Omega$, we have\n\\[\n\\mathbb{P}(S_{\\mathrm{even}}) = \\frac{\\# S_{\\mathrm{even}}}{\\# \\Omega} = \\frac{18}{37}.\n\\]\n\n\\medskip\n\n\\textbf{Answer for Part 1:} \n\\[\n\\boxed{\\mathbb{P}(S_{\\mathrm{even}}) = \\frac{18}{37}}\n\\]\n\n\\bigskip\n\n\\section*{Part 2: Probability of a Red Pocket}\nLet the set of red pockets be\n\\[\nS_{\\mathrm{red}} = \\{1,3,5,\\dots,35\\}.\n\\]\nAssuming there are $18$ red pockets (as given), it follows that\n\\[\n\\mathbb{P}(S_{\\mathrm{red}}) = \\frac{\\# S_{\\mathrm{red}}}{\\# \\Omega} = \\frac{18}{37}.\n\\]\n\n\\medskip\n\n\\textbf{Answer for Part 2:} \n\\[\n\\boxed{\\mathbb{P}(S_{\\mathrm{red}}) = \\frac{18}{37}}\n\\]\n\n\\bigskip\n\n\\section*{Part 3: Conditional Probability of an Even Pocket Given a Red Outcome}\nWe wish to compute the probability\n\\[\n\\mathbb{P}_{S_{\\mathrm{red}}}(S_{\\mathrm{even}}) = \\frac{\\mathbb{P}(S_{\\mathrm{red}} \\cap S_{\\mathrm{even}})}{\\mathbb{P}(S_{\\mathrm{red}})}.\n\\]\nLet \n\\[\nS_{\\mathrm{red}} \\cap S_{\\mathrm{even}} = \\{12,14,\\dots,36\\}.\n\\]\nThen, by counting the number of elements in this intersection relative to the total number of red pockets, we have\n\\[\n\\mathbb{P}_{S_{\\mathrm{red}}}(S_{\\mathrm{even}}) = \\frac{\\#\\{12,14,\\dots,36\\}}{\\# S_{\\mathrm{red}}} = \\frac{4}{9}.\n\\]\n\n\\medskip\n\n\\textbf{Answer for Part 3:} \n\\[\n\\boxed{\\mathbb{P}_{S_{\\mathrm{red}}}(S_{\\mathrm{even}}) = \\frac{4}{9}}\n\\]\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W3/Q3.pdf/","title":"Q3","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W3/Q3.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    154 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W3\n        \u2514\u2500\u2500 Q3.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W3/Q3.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W3/Q3.tex/","title":"Q3","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W3/Q3.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    4 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W3\n        \u2514\u2500\u2500 Q3.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W3/Q3.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[12pt]{article}\n\\usepackage{amsmath, amssymb}\n\\usepackage{geometry}\n\\geometry{a4paper, margin=1in}\n\\usepackage{setspace}\n\\usepackage{lmodern}\n\\usepackage{titlesec}\n\n% Formatting section headings\n\\titleformat{\\section}[block]{\\bfseries\\Large}{\\thesection.}{1em}{}\n\\titleformat{\\subsection}[block]{\\bfseries\\large}{\\thesubsection.}{1em}{}\n\n\\title{Question 3: Conditional Prize Award in a Sequence of Matches}\n\\author{}\n\\date{}\n\n\\begin{document}\n\\maketitle\n\\onehalfspacing\n\n\\section*{Problem Statement}\nTo obtain a prize, you need to win \\emph{at least two consecutive matches} out of the three you play, alternating between matches against your father and your coach. You win 75\\% of the matches against your father and 40\\% of the matches against your coach.\n\n\\bigskip\n\n\\section*{Preliminaries}\nLet $\\mathrm{win}$ and $\\mathrm{lose}$ denote the outcomes of a match, and let $F$ and $C$ denote the events of winning against the father and the coach, respectively. Define the probability space as\n\\[\n\\begin{aligned}\n\\Omega &amp;= \\{\\mathrm{win},\\,\\mathrm{lose}\\},\\\\[1mm]\n\\mathcal{F} &amp;= \\mathcal{P}(\\Omega),\\\\[1mm]\n\\mathbb{P} &amp;: \\quad \\mathbb{P}(F) = 75\\%, \\quad \\mathbb{P}(C) = 40\\%.\n\\end{aligned}\n\\]\n\nLet $W$ be the event of obtaining a prize (i.e., winning at least two consecutive matches) and denote by $A$, $B$, and $C$ the outcomes of the first, second, and third matches respectively. To be specific, we use subscripts $f$ and $c$ to indicate matches played against the father and the coach. For example, $A_f$ means winning the first match against the father, while $A_c$ means winning the first match against the coach.\n\nAssuming that the match outcomes are stochastically independent, we have:\n\\[\n\\begin{alignedat}{4}\n\\mathbb{P}(A_f) &amp;= \\mathbb{P}(B_f) = \\mathbb{P}(C_f) &amp;= \\mathbb{P}(F) &amp;= 75\\%,\\\\[1mm]\n\\mathbb{P}(A_c) &amp;= \\mathbb{P}(B_c) = \\mathbb{P}(C_c) &amp;= \\mathbb{P}(C) &amp;= 40\\%.\n\\end{alignedat}\n\\]\n\n\\bigskip\n\n\\section*{Part 1: Comparing Two Playing Sequences}\nWe consider the following two sequences of matches:\n\\begin{itemize}\n    \\item \\textbf{Father-Coach-Father} (denoted by $W_{FCF}$)\n    \\item \\textbf{Coach-Father-Coach} (denoted by $W_{CFC}$)\n\\end{itemize}\n\n\\subsection*{Sequence 1: Father-Coach-Father}\nIn this sequence, a prize is obtained if at least two consecutive wins occur. One can show that the event of winning a prize in the Father-Coach-Father sequence is given by:\n\\[\n\\begin{aligned}\n\\mathbb{P}(W_{FCF}) &amp;= \\mathbb{P}\\Big((A_f \\cap B_c \\cap C_f) \\cup (A_f^c \\cap B_c \\cap C_f) \\cup (A_f \\cap B_c \\cap C_f^c)\\Big)\\\\[1mm]\n&amp;= 2\\,\\mathbb{P}(F)\\,\\mathbb{P}(C) - \\mathbb{P}(F)^2\\,\\mathbb{P}(C).\n\\end{aligned}\n\\]\n\n\\subsection*{Sequence 2: Coach-Father-Coach}\nSimilarly, for the Coach-Father-Coach sequence, the probability of obtaining a prize is:\n\\[\n\\begin{aligned}\n\\mathbb{P}(W_{CFC}) &amp;= \\mathbb{P}\\Big((A_c \\cap B_f \\cap C_c) \\cup (A_c^c \\cap B_f \\cap C_c) \\cup (A_c \\cap B_f \\cap C_c^c)\\Big)\\\\[1mm]\n&amp;= 2\\,\\mathbb{P}(C)\\,\\mathbb{P}(F) - \\mathbb{P}(C)^2\\,\\mathbb{P}(F).\n\\end{aligned}\n\\]\n\nSince $\\mathbb{P}(F)=75\\%$ and $\\mathbb{P}(C)=40\\%$, we have\n\\[\n\\mathbb{P}(F) &gt; \\mathbb{P}(C),\n\\]\nwhich implies\n\\[\n\\mathbb{P}(W_{FCF}) - \\mathbb{P}(W_{CFC}) = \\mathbb{P}(F)\\,\\mathbb{P}(C)\\bigl(\\mathbb{P}(C) - \\mathbb{P}(F)\\bigr) &lt; 0.\n\\]\nThus,\n\\[\n\\boxed{\\mathbb{P}(W_{CFC}) &gt; \\mathbb{P}(W_{FCF})}.\n\\]\n\\textbf{Answer for Part 1:} The sequence \\emph{Coach-Father-Coach} is preferable.\n\n\\bigskip\n\n\\section*{Part 2: Including Additional Outcomes}\nLet $W'$ be the event of obtaining a prize when additional outcomes are considered.\n\n\\subsection*{Sequence 1: Modified Father-Coach-Father ($W'_{FCF}$)}\nFor the Father-Coach-Father sequence, we now have:\n\\[\n\\begin{aligned}\n\\mathbb{P}(W'_{FCF}) &amp;= \\mathbb{P}\\Big(W_{FCF} \\cup \\bigl(A_f \\cap B_c^c \\cap C_f\\bigr)\\Big)\\\\[1mm]\n&amp;= 2\\,\\mathbb{P}(F)\\,\\mathbb{P}(C) + \\mathbb{P}(F)^2\\Bigl(1-2\\,\\mathbb{P}(C)\\Bigr)\\\\[1mm]\n&amp;\\approx 71.25\\%.\n\\end{aligned}\n\\]\n\n\\subsection*{Sequence 2: Modified Coach-Father-Coach ($W'_{CFC}$)}\nSimilarly, for the Coach-Father-Coach sequence, we have:\n\\[\n\\begin{aligned}\n\\mathbb{P}(W'_{CFC}) &amp;= \\mathbb{P}\\Big(W_{CFC} \\cup \\bigl(A_c \\cap B_f^c \\cap C_c\\bigr)\\Big)\\\\[1mm]\n&amp;= 2\\,\\mathbb{P}(C)\\,\\mathbb{P}(F) + \\mathbb{P}(C)^2\\Bigl(1-2\\,\\mathbb{P}(F)\\Bigr)\\\\[1mm]\n&amp;\\approx 52\\%.\n\\end{aligned}\n\\]\n\nSince\n\\[\n\\mathbb{P}(W'_{FCF}) \\approx 71.25\\% &gt; 52\\% \\approx \\mathbb{P}(W'_{CFC}),\n\\]\n\\textbf{Answer for Part 2:} The strategy should be changed to \\emph{Father-Coach-Father}.\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W3/Q4.pdf/","title":"Q4","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W3/Q4.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    151 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W3\n        \u2514\u2500\u2500 Q4.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W3/Q4.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W3/Q4.tex/","title":"Q4","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W3/Q4.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    3 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W3\n        \u2514\u2500\u2500 Q4.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W3/Q4.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[12pt]{article}\n\\usepackage{amsmath, amssymb}\n\\usepackage{geometry}\n\\geometry{a4paper, margin=1in}\n\\usepackage{setspace}\n\\usepackage{lmodern}\n\\usepackage{titlesec}\n\n% Formatting section headings\n\\titleformat{\\section}[block]{\\bfseries\\Large}{\\thesection.}{1em}{}\n\\titleformat{\\subsection}[block]{\\bfseries\\large}{\\thesubsection.}{1em}{}\n\n\\title{Question 4: Analysis of an Alternating Coin Toss Game}\n\\author{}\n\\date{}\n\n\\begin{document}\n\\maketitle\n\\onehalfspacing\n\n\\section*{Problem Statement}\nTwo players flip a fair coin alternately. The game ends when one of them gets heads.\n\n\\bigskip\n\n\\section*{Part 1: Probability of a Specific Sequence of Outcomes}\nLet $\\mathrm{head}$ and $\\mathrm{tail}$ denote the outcomes \\emph{head} and \\emph{tail} respectively. We define the probability space by\n\\[\n\\begin{aligned}\n\\Omega &amp;= \\{\\mathrm{head},\\,\\mathrm{tail}\\},\\\\[1mm]\n\\mathcal{F} &amp;= \\mathcal{P}(\\Omega),\\\\[1mm]\n\\mathbb{P} &amp;:\\quad \\mathbb{P}(\\{\\mathrm{head}\\}) = \\mathbb{P}(\\{\\mathrm{tail}\\}) = \\frac{1}{2}.\n\\end{aligned}\n\\]\nLet $T_i \\subset \\mathcal{F}$ be the event that the $i$-th flip yields a tail:\n\\[\nT_i = \\{\\mathrm{tail}\\}, \\quad i=1,2,\\dots,n-1,\n\\]\nand let $H_n \\subset \\mathcal{F}$ be the event that the $n$-th flip yields a head:\n\\[\nH_n = \\{\\mathrm{head}\\}.\n\\]\nSince the coin tosses are independent, the probability that the first $n-1$ flips are tails and the $n$-th flip is heads is\n\\[\n\\begin{aligned}\n\\mathbb{P}\\Bigl(T_1\\cap T_2\\cap \\cdots \\cap T_{n-1}\\cap H_n\\Bigr)\n&amp;= \\mathbb{P}(T_1)\\,\\mathbb{P}(T_2)\\cdots\\mathbb{P}(T_{n-1})\\,\\mathbb{P}(H_n)\\\\[1mm]\n&amp;= \\left(\\frac{1}{2}\\right)^{n-1}\\cdot\\frac{1}{2}\\\\[1mm]\n&amp;= \\frac{1}{2^n}.\n\\end{aligned}\n\\]\n\\textbf{Answer for Part 1:} \n\\[\n\\boxed{\\mathbb{P}(T_1\\cap T_2\\cap \\cdots \\cap T_{n-1}\\cap H_n) = \\frac{1}{2^n}}.\n\\]\n\n\\bigskip\n\n\\section*{Part 2: Probability that the First Player Wins}\nAssume that the players alternate flips, with the first player flipping on the odd-numbered turns and the second player on the even-numbered turns. Let us denote:\n\\begin{itemize}\n    \\item ${T'}_{i'} = \\{\\mathrm{tail}\\}$ for the $i'$-th flip,\n    \\item ${H'}_{2k+1} = \\{\\mathrm{head}\\}$ corresponding to the first player's flip on turn $2k+1$ (with $k\\ge0$, $k\\in\\mathbb{N}$).\n\\end{itemize}\n\nLet $F$ be the event that the first player wins. This happens if the first flip is a head, or if the first head appears on any odd-numbered flip (after an even number of tails), i.e.,\n\\[\n\\begin{aligned}\n\\mathbb{P}(F) &amp;= \\mathbb{P}({H'}_1) + \\sum_{k=1}^{\\infty} \\mathbb{P}\\Bigl({T'}_1\\cap {T'}_2\\cap \\cdots \\cap {T'}_{2k}\\cap {H'}_{2k+1}\\Bigr)\\\\[1mm]\n&amp;= \\mathbb{P}({H'}_1) + \\sum_{k=1}^{\\infty} \\left(\\frac{1}{2}\\right)^{2k+1}.\n\\end{aligned}\n\\]\nNoting that $\\mathbb{P}({H'}_1)=\\frac{1}{2}$, we can rewrite the sum as:\n\\[\n\\mathbb{P}(F) = \\frac{1}{2} + \\sum_{k=1}^{\\infty}\\left(\\frac{1}{2}\\right)^{2k+1}\n= \\sum_{k=0}^{\\infty}\\left(\\frac{1}{2}\\right)^{2k+1}.\n\\]\nFactor out $\\frac{1}{2}$:\n\\[\n\\mathbb{P}(F) = \\frac{1}{2}\\sum_{k=0}^{\\infty}\\left(\\frac{1}{4}\\right)^k.\n\\]\nRecognizing the sum as a geometric series with common ratio $r=\\frac{1}{4}$, where\n\\[\n\\sum_{k=0}^{\\infty} r^k = \\frac{1}{1-r},\n\\]\nwe obtain:\n\\[\n\\mathbb{P}(F) = \\frac{1}{2} \\cdot \\frac{1}{1-\\frac{1}{4}} = \\frac{1}{2} \\cdot \\frac{1}{\\frac{3}{4}} = \\frac{1}{2}\\cdot \\frac{4}{3} = \\frac{2}{3}.\n\\]\n\\textbf{Answer for Part 2:}\n\\[\n\\boxed{\\mathbb{P}(F) = \\frac{2}{3}}.\n\\]\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W4/","title":"W4","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W4/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 8 items</li> <li>Size:  376 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W4\n</code></pre> Name Type Item Size Q1 pdf / 70 KiB Q1 tex / 2 KiB Q2 pdf / 85 KiB Q2 tex / 2 KiB Q3 pdf / 118 KiB Q3 tex / 3 KiB Q4 pdf / 94 KiB Q4 tex / 2 KiB"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W4/Q1.pdf/","title":"Q1","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W4/Q1.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    70 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W4\n        \u2514\u2500\u2500 Q1.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W4/Q1.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W4/Q1.tex/","title":"Q1","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W4/Q1.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W4\n        \u2514\u2500\u2500 Q1.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W4/Q1.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[12pt]{article}\n\n\\usepackage{graphicx}\n\\usepackage{amssymb}\n\\usepackage{amsmath}\n\\usepackage[margin=1in]{geometry}\n\\usepackage{fancyhdr}\n\\usepackage{enumerate}\n\\usepackage[shortlabels]{enumitem}\n\n\\pagestyle{fancy}\n\\fancyhead[l]{Li Yifeng}\n\\fancyhead[c]{Homework \\#4}\n\\fancyhead[r]{\\today}\n\\fancyfoot[c]{\\thepage}\n\\renewcommand{\\headrulewidth}{0.2pt}\n\\setlength{\\headheight}{15pt}\n\n\\newcommand{\\bP}{\\mathbb{P}}\n\n\\begin{document}\n\n    \\section*{Question 1}\n\n    \\noindent A student is applying to Harvard and Dartmouth. She estimates that she has a probability of $0.5$ of being accepted at Dartmouth and $0.3$ of being accepted at Harvard. She further estimates that the probability that she will be accepted by both is $0.2$.\n\n    \\bigskip\n\n    \\begin{enumerate}[start=1,label={\\bfseries Part \\arabic*:},leftmargin=0in]\n        \\bigskip\\item What is the probability that she is accepted by Dartmouth if she is accepted by Harvard?\n\n        \\subsection*{Solution}\n\n            Let $\\it{accept}$ and $\\it{reject}$ denote the results of an application, and let $D$ and $H$ denote the events of being accepted by Dartmouth and by Harvard, respectively. Define the probability space as\n\n            \\[\n            \\begin{aligned}\n                \\Omega &amp;= \\{\\mathrm{accept},\\,\\mathrm{reject}\\}\\\\\n                \\mathcal{F} &amp;= \\mathcal{P}(\\Omega)\\\\\n                \\bP &amp;:\\enspace \\bP(D) = 0.5,\\enspace \\bP(H) = 0.3\n            \\end{aligned}\n            \\]\n\n            We know that\n\n            \\[\\bP(D\\cap H) = 0.2\\]\n\n            Then we have\n\n            \\[\\bP_H(D) = \\frac{\\bP(D\\cap H)}{\\bP(H)} = \\frac{2}{3} \\approx 0.667\\]\n\n        \\subsection*{Answer}\n\n            \\[\\boxed{\\bP_H(D) = \\frac{2}{3} \\approx 0.667}\\]\n\n        \\bigskip\\item Is the event \u201caccepted at Harvard\u201d independent of the event \u201caccepted at Dartmouth\u201d?\n\n        \\subsection*{Solution}\n\n            Applying the Bayes\u2019 Theorem, we know that\n\n            \\[\\bP_D(H) = \\frac{\\bP_H(D)\\bP(H)}{\\bP(D)} = 0.4 \\ne 0.3 = \\bP(H)\\]\n\n            Then we know that $D$ and $H$ are not stochastically independent.\n\n        \\subsection*{Answer}\n\n            \\[\\boxed{\\text{No, $H$ is not stochastically independent of $D$.}}\\]\n\n    \\end{enumerate}\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W4/Q2.pdf/","title":"Q2","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W4/Q2.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    85 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W4\n        \u2514\u2500\u2500 Q2.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W4/Q2.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W4/Q2.tex/","title":"Q2","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W4/Q2.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W4\n        \u2514\u2500\u2500 Q2.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W4/Q2.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[12pt]{article}\n\n\\usepackage{graphicx}\n\\usepackage{amssymb}\n\\usepackage{amsmath}\n\\usepackage[margin=1in]{geometry}\n\\usepackage{fancyhdr}\n\\usepackage{enumerate}\n\\usepackage[shortlabels]{enumitem}\n\n\\pagestyle{fancy}\n\\fancyhead[l]{Li Yifeng}\n\\fancyhead[c]{Homework \\#4}\n\\fancyhead[r]{\\today}\n\\fancyfoot[c]{\\thepage}\n\\renewcommand{\\headrulewidth}{0.2pt}\n\\setlength{\\headheight}{15pt}\n\n\\newcommand{\\bP}{\\mathbb{P}}\n\n\\begin{document}\n\n    \\section*{Question 2}\n\n    \\noindent You have three coins in your pocket, two fair ones but the third is biased with probability of heads $p$ and tails $1-p$. One coin selected at random drops on the floor, landing heads up. How likely is it that it is one of the fair coins?\n\n    \\begin{enumerate}[label={},leftmargin=0in]\\item\n\n        \\subsection*{Solution}\n\n            Let $\\it{head}$ and $\\it{tail}$ denote the results of a drop. Define the probability space as\n\n            \\[\n            \\begin{aligned}\n                \\Omega &amp;= \\{\\mathrm{head},\\,\\mathrm{tail}\\}\\\\\n                \\mathcal{F} &amp;= \\mathcal{P}(\\Omega)\\\\\n                \\bP &amp;:\\enspace \\text{the probability measure on $\\mathcal{F}$}\n            \\end{aligned}\n            \\]\n\n            Let $F$ and $B$ denote the events of selecting a fair coin and a biased coin, respectively, then we have\n\n            \\[\n            \\begin{aligned}\n                \\bP_F(\\{\\mathrm{head}\\}) &amp;= \\frac{1}{2}\\\\\n                \\bP_B(\\{\\mathrm{head}\\}) &amp;= p\n            \\end{aligned}\n            \\]\n\n            By applying the principle of symmetry, we have\n\n            \\[\n            \\begin{aligned}\n                \\bP(F) &amp;= \\frac{2}{3}\\\\\n                \\bP(B) &amp;= \\frac{1}{3}\n            \\end{aligned}\n            \\]\n\n            We know that $\\{F,B\\}$ is a partition of $\\Omega$, then by applying the law of total probability, we have\n\n            \\[\\bP(\\{\\mathrm{head}\\}) = \\bP_F(\\{\\mathrm{head}\\})\\bP(F) + \\bP_B(\\{\\mathrm{head}\\})\\bP(B) = \\frac{p + 1}{3}\\]\n\n            Then by applying the Bayes\u2019 Theorem, we have\n\n            \\[{\\bP_{\\{\\mathrm{head}\\}}}(F) = \\frac{\\bP_F(\\{\\mathrm{head}\\})\\bP(F)}{\\bP(\\{\\mathrm{head}\\})} = \\frac{1}{p+1}\\]\n\n        \\subsection*{Answer}\n\n            \\[\\boxed{{\\bP_{\\{\\mathrm{head}\\}}}(F) = \\frac{1}{p+1}}\\]\n\n    \\end{enumerate}\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W4/Q3.pdf/","title":"Q3","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W4/Q3.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    118 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W4\n        \u2514\u2500\u2500 Q3.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W4/Q3.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W4/Q3.tex/","title":"Q3","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W4/Q3.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    3 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W4\n        \u2514\u2500\u2500 Q3.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W4/Q3.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[12pt]{article}\n\n\\usepackage{graphicx}\n\\usepackage{amssymb}\n\\usepackage{amsmath}\n\\usepackage[margin=1in]{geometry}\n\\usepackage{fancyhdr}\n\\usepackage{enumerate}\n\\usepackage[shortlabels]{enumitem}\n\n\\pagestyle{fancy}\n\\fancyhead[l]{Li Yifeng}\n\\fancyhead[c]{Homework \\#4}\n\\fancyhead[r]{\\today}\n\\fancyfoot[c]{\\thepage}\n\\renewcommand{\\headrulewidth}{0.2pt}\n\\setlength{\\headheight}{15pt}\n\n\\newcommand{\\bP}{\\mathbb{P}}\n\n\\begin{document}\n\n    \\section*{Question 3}\n\n    \\noindent You have two unfair coins, one with the probability of heads equal to $p_1$ and the other with the probability of heads equal to $p_2$, where $p_2 \\neq p_1$. In strategy A, you choose one coin at random and toss it twice. In strategy B, you toss both coins. What is the best strategy to maximize the probability of the event $E = \\text{\"the two tosses are both heads\"}$?\n\n    \\begin{enumerate}[label={},leftmargin=0in]\\item\n\n        \\subsection*{Solution}\n\n            Let $\\it{head}$ and $\\it{tail}$ denote the results of a drop. Define the probability space as\n\n            \\[\n            \\begin{aligned}\n                \\Omega &amp;= \\{\\mathrm{head},\\,\\mathrm{tail}\\}\\\\\n                \\mathcal{F} &amp;= \\mathcal{P}(\\Omega)\\\\\n                \\bP &amp;:\\enspace \\text{the probability measure on $\\mathcal{F}$}\n            \\end{aligned}\n            \\]\n\n            Let $C_1$ and $C_2$ denote the events of selecting the first mentioned coin and the second mentioned coin, respectively, and let the first drop and the second drop be denoted by subscripts $1$ and $2$, respectively, then we have\n\n            \\[\\bP_{C_{i_j}}(\\{\\mathrm{head}\\}_k) = p_i,\\quad i,j,k\\in\\{1,2\\}\\]\n\n            \\subsubsection*{Strategy A: choose one coin at random and toss it twice}\n\n            By applying the principle of symmetry, we have\n\n            \\[\\bP(C_{1_1}) = \\bP(C_{2_1}) = \\frac{1}{2}\\]\n\n            And from the context we know\n\n            \\[\\bP_{C_{1_1}}(C_{1_2}) = \\bP_{C_{2_1}}(C_{2_2}) = 1\\]\n\n            We know that $\\{C_{1_1},C_{2_1}\\}$ and $\\{C_{1_2},C_{2_2}\\}$ are two partitions of $\\Omega$, then we have the probability of event $E$ in strategy A\n\n            \\[\n            \\begin{aligned}\n                \\bP(E_A) &amp;= \\bP(\\{\\mathrm{head}\\}_1\\cap \\{\\mathrm{head}\\}_2)\\\\\n                &amp;= \\sum_{j=1}^2\\left(\\bP(C_{j_1})\\bP_{C_{j_1}}(\\{\\mathrm{head}\\}_1)\\bP_{C_{j_1}\\cap \\{\\mathrm{head}\\}_1}(\\{\\mathrm{head}\\}_2)\\right)\\\\\n                &amp;= \\frac{{p_1}^2 + {p_2}^2}{2}\n            \\end{aligned}\n            \\]\n\n            \\subsubsection*{Strategy B: toss both coins}\n\n            Because the order does not matter here, one can assume to drop the coin $C_1$ first with the coin $C_2$ second, that is\n\n            \\[\\bP(C_{1_1}) = \\bP(C_{2_2}) = 1\\]\n\n            Easy to see that $\\{\\mathrm{head}\\}_1$ and $\\{\\mathrm{head}\\}_2$ are stochastically independent, then we have the probability of event $E$ in strategy B\n\n            \\[\n            \\begin{aligned}\n                \\bP(E_B) &amp;= \\bP(\\{\\mathrm{head}\\}_1\\cap \\{\\mathrm{head}\\}_2)\\\\\n                &amp;= \\bP(\\{\\mathrm{head}\\}_1)\\bP(\\{\\mathrm{head}\\}_2)\\\\\n                &amp;= \\bP_{C_{1_1}}(\\{\\mathrm{head}\\}_1)\\bP_{C_{2_2}}(\\{\\mathrm{head}\\}_2)\\\\\n                &amp;= p_1p_2\n            \\end{aligned}\n            \\]\n\n            \\subsubsection*{Conclusion}\n\n            By applying the AM\u2013GM inequality, we have\n\n            \\[\n            \\begin{aligned}\n                \\frac{p_1 + p_2}{2}&amp;\\ge \\sqrt{p_1p_2}\\\\\n                &amp;\\Downarrow\\\\\n                \\frac{{p_1}^2 + {p_2}^2}{2}&amp;\\ge p_1p_2\\\\\n            \\end{aligned}\n            \\]\n\n            Then we know\n\n            \\[\\bP(E_A) \\ge \\bP(E_B),\\quad \\text{equal when } p_1 = p_2\\]\n\n        \\subsection*{Answer}\n\n            \\[\\boxed{\n                \\begin{aligned}\n                    &amp;\\text{Strategy A is the best.}\\\\\n                    &amp;\\text{Two Strategies are equivalent when $p_1 = p_2$.}\n                \\end{aligned}\n            }\\]\n\n    \\end{enumerate}\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W4/Q4.pdf/","title":"Q4","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W4/Q4.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    94 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W4\n        \u2514\u2500\u2500 Q4.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W4/Q4.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W4/Q4.tex/","title":"Q4","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W4/Q4.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W4\n        \u2514\u2500\u2500 Q4.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W4/Q4.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[12pt]{article}\n\n\\usepackage{graphicx}\n\\usepackage{amssymb}\n\\usepackage{amsmath}\n\\usepackage[margin=1in]{geometry}\n\\usepackage{fancyhdr}\n\\usepackage{enumerate}\n\\usepackage[shortlabels]{enumitem}\n\n\\pagestyle{fancy}\n\\fancyhead[l]{Li Yifeng}\n\\fancyhead[c]{Homework \\#4}\n\\fancyhead[r]{\\today}\n\\fancyfoot[c]{\\thepage}\n\\renewcommand{\\headrulewidth}{0.2pt}\n\\setlength{\\headheight}{15pt}\n\n\\newcommand{\\bP}{\\mathbb{P}}\n\n\\begin{document}\n\n    \\section*{Question 4}\n\n    \\noindent Consider a routine screening test for a disease. Suppose the frequency of the disease in the population (base rate) is $0.5\\%$. The test is fairly accurate with a $5\\%$ false positive rate and a $10\\%$ false negative rate. You take the test and it comes back positive. What is the probability that you have the disease?\n\n    \\bigskip\n\n    \\begin{enumerate}[label={},leftmargin=0in]\\item\n\n        \\subsection*{Solution}\n\n            Let $\\it{positive}$ and $\\it{negative}$ denote the results of a test. Define the probability space as\n\n            \\[\n            \\begin{aligned}\n                \\Omega &amp;= \\{\\mathrm{positive},\\,\\mathrm{negative}\\}\\\\\n                \\mathcal{F} &amp;= \\mathcal{P}(\\Omega)\\\\\n                \\bP &amp;:\\enspace \\text{the probability measure on $\\mathcal{F}$}\n            \\end{aligned}\n            \\]\n\n            Let $B$ be the event that having the disease in the population (base rate)\n\n            \\[\\bP(B) = 0.5\\%\\]\n\n            Then we have the false positive rate ($\\bP_{B^c}(\\{\\mathrm{positive}\\})$) and the false negative rate ($\\bP_B(\\{\\mathrm{negative}\\})$)\n\n            \\[\n            \\begin{aligned}\n                \\bP_{B^c}(\\{\\mathrm{positive}\\}) &amp;= 5\\%\\\\\n                \\bP_B(\\{\\mathrm{negative}\\}) &amp;= 10\\%\n            \\end{aligned}\n            \\]\n\n            Then we have the true negative rate ($\\bP_{B^c}(\\{\\mathrm{negative}\\})$) and the true positive rate ($\\bP_B(\\{\\mathrm{positive}\\})$)\n\n            \\[\n            \\begin{aligned}\n                \\bP_{B^c}(\\{\\mathrm{negative}\\}) &amp;= 1-\\bP_{B^c}(\\{\\mathrm{positive}\\}) &amp;= 95\\%\\\\\n                \\bP_B(\\{\\mathrm{positive}\\}) &amp;= 1-\\bP_B(\\{\\mathrm{negative}\\}) &amp;= 90\\%\n            \\end{aligned}\n            \\]\n\n            Then by applying the law of total probability, we have\n\n            \\[\\bP(\\{\\mathrm{positive}\\}) = \\bP(B)\\bP_B(\\{\\mathrm{positive}\\}) + \\bP(B^c)\\bP_{B^c}(\\{\\mathrm{positive}\\}) = 5.425\\%\\]\n\n            By applying the Bayes\u2019 Theorem, we have\n\n            \\[\n            \\bP_{\\{\\mathrm{positive}\\}}(B) = \\frac{\\bP_B(\\{\\mathrm{positive}\\})\\bP(B)}{\\bP(\\{\\mathrm{positive}\\})} = \\frac{18}{217} \\approx 8.295\\%\n            \\]\n\n        \\subsection*{Answer}\n\n            \\[\\boxed{\\bP_{\\{\\mathrm{positive}\\}}(B) = \\frac{18}{217} \\approx 8.295\\%}\\]\n\n    \\end{enumerate}\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W5/","title":"W5","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W5/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 8 items</li> <li>Size:  367 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W5\n</code></pre> Name Type Item Size Q1 pdf / 81 KiB Q1 tex / 3 KiB Q2 pdf / 97 KiB Q2 tex / 2 KiB Q3 pdf / 102 KiB Q3 tex / 2 KiB Q4 pdf / 75 KiB Q4 tex / 5 KiB"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W5/Q1.pdf/","title":"Q1","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W5/Q1.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    81 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W5\n        \u2514\u2500\u2500 Q1.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W5/Q1.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W5/Q1.tex/","title":"Q1","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W5/Q1.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    3 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W5\n        \u2514\u2500\u2500 Q1.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W5/Q1.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[12pt]{article}\n\n\\usepackage{graphicx}\n\\usepackage{amssymb}\n\\usepackage{amsmath}\n\\usepackage[margin=1in]{geometry}\n\\usepackage{fancyhdr}\n\\usepackage{enumerate}\n\\usepackage[shortlabels]{enumitem}\n\n\\pagestyle{fancy}\n\\fancyhead[l]{Li Yifeng}\n\\fancyhead[c]{Homework \\#5}\n\\fancyhead[r]{\\today}\n\\fancyfoot[c]{\\thepage}\n\\renewcommand{\\headrulewidth}{0.2pt}\n\\setlength{\\headheight}{15pt}\n\n\\newcommand{\\bP}{\\mathbb{P}}\n\n\\begin{document}\n\n    \\section*{Question 1}\n\n    \\noindent Consider a binary communication channel, with input $X$ having a Bernoulli distribution with parameter $p = 0.9$. The common error probability is $\\epsilon = 0.05$ (i.e., the probability that the received character differs from the input character is $\\epsilon$). Let $Y$ denote the output character.\n\n    \\bigskip\n\n    \\begin{enumerate}[start=1,label={\\bfseries Part \\arabic*:},leftmargin=0in]\n        \\bigskip\\item Show that $Y$ is a Bernoulli distribution with parameter $q$.\n\n        \\subsection*{Solution}\n\n            We know that $X$ has a Bernoulli distribution in sample space $\\Omega = \\{0,1\\}$ (let 0 denotes $not\\enspace received$ and 1 denotes $received$) with parameter $p = 0.9$, then easy to see that\n\n            \\[\n            \\begin{aligned}\n                \\bP(Y=0) &amp;= \\bP(X=0)\\bP_{X=0}(Y=0) + \\bP(X=1)\\bP_{X=1}(Y=0)\\\\\n                &amp;= (1-p)(1-\\epsilon) + p\\epsilon\\\\\n                &amp;= 2p\\epsilon - p - \\epsilon + 1\n            \\end{aligned}\n            \\]\n\n            Similiarly, we have\n\n            \\[\n            \\begin{aligned}\n                \\bP(Y=1) &amp;= \\bP(X=0)\\bP_{X=0}(Y=1) + \\bP(X=1)\\bP_{X=1}(Y=1)\\\\\n                &amp;= (1-p)\\epsilon + p(1-\\epsilon)\\\\\n                &amp;= -2p\\epsilon + p + \\epsilon\n            \\end{aligned}\n            \\]\n\n            Then we have\n\n            \\[\n                0 &lt; \\bP(Y=0), \\bP(Y=1) &lt; 1,\\quad\\text{and}\\quad \\bP(Y=0) + \\bP(Y=1) = 1\n            \\]\n\n            Then we can say that $Y$ is a Bernouli distribution in sample space $\\Omega = \\{0,1\\}$ with parameter\n\n            \\[\n            \\begin{aligned}\n                q &amp;= \\bP(Y = 1)\\\\\n                &amp;= -2p\\epsilon + p + \\epsilon\n            \\end{aligned}\n            \\]\n\n        \\subsection*{Answer}\n\n            \\[\\boxed{\\text{See above.}}\\]\n\n        \\bigskip\\item Determine $q$.\n\n        \\subsection*{Solution}\n\n            With the explanation and formula above, easy to see that\n\n            \\[q = -2p\\epsilon + p + \\epsilon = 0.86\\]\n\n        \\subsection*{Answer}\n\n            \\[\\boxed{q = 0.86}\\]\n\n        \\bigskip\\item Compute the joint probability distribution function of $(X,Y)$.\n\n        \\subsection*{Solution}\n\n            Easy to compute the joint distribution function of $(X,Y)$ as\n\n            \\[\n                f(x,y) =\n                    \\begin{cases}\n                        \\begin{aligned}\n                            \\bP(X=0,Y=0) &amp;= \\bP(X=0)\\bP_{X = 0}(Y = 0) = &amp;(1-p)1 - \\epsilon &amp;= 0.095,&amp;\\quad x = 0,\\quad y = 0\\\\\n                            \\bP(X=0,Y=1) &amp;= \\bP(X=0)\\bP_{X = 0}(Y = 1) = &amp;(1-p)\\epsilon &amp;= 0.005,&amp;\\quad x = 0,\\quad y = 1\\\\\n                            \\bP(X=1,Y=0) &amp;= \\bP(X=1)\\bP_{X = 1}(Y = 0) = &amp;p\\epsilon &amp;= 0.045,&amp;\\quad x = 1,\\quad y = 0\\\\\n                            \\bP(X=1,Y=1) &amp;= \\bP(X=1)\\bP_{X = 1}(Y = 1) = &amp;p(1 - \\epsilon) &amp;= 0.855,&amp;\\quad x = 1,\\quad y = 1\n                        \\end{aligned}\n                    \\end{cases}\n            \\]\n\n        \\subsection*{Answer}\n\n            \\[\\boxed{f(x,y) =\n                \\begin{cases}\n                    \\begin{aligned}\n                        0.095,&amp;\\quad x = 0,\\quad y = 0\\\\\n                        0.005,&amp;\\quad x = 0,\\quad y = 1\\\\\n                        0.045,&amp;\\quad x = 1,\\quad y = 0\\\\\n                        0.855,&amp;\\quad x = 1,\\quad y = 1\n                    \\end{aligned}\n            \\end{cases}}\\]\n    \\end{enumerate}\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W5/Q2.pdf/","title":"Q2","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W5/Q2.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    97 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W5\n        \u2514\u2500\u2500 Q2.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W5/Q2.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W5/Q2.tex/","title":"Q2","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W5/Q2.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W5\n        \u2514\u2500\u2500 Q2.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W5/Q2.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[12pt]{article}\n\n\\usepackage{graphicx}\n\\usepackage{amssymb}\n\\usepackage{amsmath}\n\\usepackage[margin=1in]{geometry}\n\\usepackage{fancyhdr}\n\\usepackage{enumerate}\n\\usepackage[shortlabels]{enumitem}\n\n\\pagestyle{fancy}\n\\fancyhead[l]{Li Yifeng}\n\\fancyhead[c]{Homework \\#5}\n\\fancyhead[r]{\\today}\n\\fancyfoot[c]{\\thepage}\n\\renewcommand{\\headrulewidth}{0.2pt}\n\\setlength{\\headheight}{15pt}\n\n\\newcommand{\\bP}{\\mathbb{P}}\n\n\\begin{document}\n\n    \\section*{Question 2}\n\n    \\noindent Consider a binary communication channel, with every digit in the input having a Bernoulli distribution with parameter $p = 0.8$ (i.e., the probability of sending $1$ is $p$). A \"word\" contains 6 digits: $X_1$, $X_2$, ..., $X_6$.\n\n    \\bigskip\n\n    \\begin{enumerate}[start=1,label={\\bfseries Part \\arabic*:},leftmargin=0in]\n        \\bigskip\\item What is the probability that a word contains exactly four $1$'s and two $0$'s?\n\n        \\subsection*{Solution}\n\n            As given, we can define the Bernoulli distribution with sample space $\\{0,1\\}$ ($0$ denotes $not\\enspace received$ and $1$ denotes $received$) and with parameter $p = 0.8$, then we can define its Binomial distribution as\n\n            \\[X\\sim \\text{Bin}(n,p),\\quad n = 6\\]\n\n            Then we can know the probability that a word contains exactly four $1$'s and two $0$'s\n\n            \\[\n            \\begin{aligned}\n                \\bP(X = 4) &amp;= \\dbinom{n}{4}p^4(1-p)^{n-4}\\\\\n                &amp;= 0.245\\,76\n            \\end{aligned}\n            \\]\n\n        \\subsection*{Answer}\n\n            \\[\\boxed{\\bP(X = 4) = 0.245\\,76}\\]\n\n        \\bigskip\\item What is the probability that a word contains at least four $1$'s?\n\n        \\subsection*{Solution}\n\n            \\[\n            \\begin{aligned}\n                \\bP(X\\ge 4) &amp;= \\sum_{k = 4}^n\\bP(X = k)\\\\\n                &amp;= \\sum_{i = 4}^n\\dbinom{n}{k}p^k(1-p)^{n-k}\\\\\n                &amp;= 0.901\\,12\n            \\end{aligned}\n            \\]\n\n        \\subsection*{Answer}\n\n            \\[\\boxed{\\bP(X\\ge 4) = 0.901\\,12}\\]\n\n        \\bigskip\\item Assume that the first digit is $X_1 = 1$. What is the probability that the sum of the first two digits is $2$?\n\n        \\subsection*{Solution}\n\n            Let the trials be denoted as\n\n            \\[X_i,\\quad i\\in\\{1,2,\\dots,n\\}\\]\n\n            Then we have\n\n            \\[\n            \\begin{aligned}\n                \\bP_{X_1=1}(X_1 + X_2 = 2) &amp;= \\bP(X_2 = 1)\\\\\n                &amp;= p\\\\\n                &amp;= 0.8\n            \\end{aligned}\n            \\]\n\n        \\subsection*{Answer}\n\n            \\[\\boxed{\\bP_{X_1=1}(X_1 + X_2 = 2) = 0.8}\\]\n    \\end{enumerate}\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W5/Q3.pdf/","title":"Q3","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W5/Q3.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    102 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W5\n        \u2514\u2500\u2500 Q3.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W5/Q3.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W5/Q3.tex/","title":"Q3","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W5/Q3.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W5\n        \u2514\u2500\u2500 Q3.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W5/Q3.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[12pt]{article}\n\n\\usepackage{graphicx}\n\\usepackage{amssymb}\n\\usepackage{amsmath}\n\\usepackage[margin=1in]{geometry}\n\\usepackage{fancyhdr}\n\\usepackage{enumerate}\n\\usepackage[shortlabels]{enumitem}\n\n\\pagestyle{fancy}\n\\fancyhead[l]{Li Yifeng}\n\\fancyhead[c]{Homework \\#5}\n\\fancyhead[r]{\\today}\n\\fancyfoot[c]{\\thepage}\n\\renewcommand{\\headrulewidth}{0.2pt}\n\\setlength{\\headheight}{15pt}\n\n\\newcommand{\\bP}{\\mathbb{P}}\n\n\\begin{document}\n\n    \\section*{Question 3}\n\n    \\noindent Three fair dice are thrown. Let $X$ denote the number of dice that land with the same number of dots. Describe the probability distribution function of $X$.\n\n    \\bigskip\n\n    \\begin{enumerate}[label={},leftmargin=0in]\\item\n        \\subsection*{Solution}\n\n            By applying the principle of symmetry, easy to define the probability space as\n\n            \\[\n            \\begin{aligned}\n                \\Omega &amp;= \\{1,2,\\dots,6\\}\\\\\n                \\mathcal{F} &amp;= \\mathcal{P}(\\Omega)\\\\\n                \\bP &amp;:\\enspace \\bP(\\{1\\}) = \\bP(\\{2\\}) = \\dots = \\bP(\\{6\\}) = \\frac{1}{6}\n            \\end{aligned}\n            \\]\n\n            Then as given, we have\n\n            \\[X:\\enspace \\Omega \\rightarrow R,\\quad R = \\{1,2,3\\}\\]\n\n            Then we have the $pdf$ of $X$\n\n            \\[\n            p(x) =\n            \\begin{cases}\n                \\begin{aligned}\n                    \\frac{6\\times 5\\times 4}{6^3} &amp;= \\frac{5}{9},&amp;\\quad x = 1\\\\\n                    \\frac{6\\times 3\\times 5}{6^3} &amp;= \\frac{5}{12},&amp;\\quad x = 2\\\\\n                    \\frac{6}{6^3} &amp;= \\frac{1}{36},&amp;\\quad x = 3\n                \\end{aligned}\n            \\end{cases}\n            \\]\n\n            Or a general formula, with $N_i \\in \\{1,2,3\\},\\, i\\in \\{1,2,\\dots,6\\}$ denotes the absolute frequency of every face ($i.e.$ $N_1 = 2$ means that face $1$ shows $2$ times)\n\n            \\[\n                p(x) = \\frac{1}{6^3}\\sum_{\\sum_{i=1}^6N_i=3}\\frac{3!}{N_1!N_2!\\dots N_6!},\\quad \\max(\\{N_1,N_2,\\dots,N_6\\}) = x,\\quad x\\in R\n            \\]\n\n        \\subsection*{Answer}\n\n            \\[\\boxed{p(x) =\n                \\begin{cases}\n                    \\begin{aligned}\n                        \\frac{5}{9},&amp;\\quad x = 1\\\\\n                        \\frac{5}{12},&amp;\\quad x = 2\\\\\n                        \\frac{1}{36},&amp;\\quad x = 3\n                    \\end{aligned}\n            \\end{cases}}\\]\n    \\end{enumerate}\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W5/Q4.pdf/","title":"Q4","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W5/Q4.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    75 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W5\n        \u2514\u2500\u2500 Q4.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W5/Q4.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W5/Q4.tex/","title":"Q4","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W5/Q4.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    5 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W5\n        \u2514\u2500\u2500 Q4.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W5/Q4.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[12pt]{article}\n\n\\usepackage{graphicx}\n\\usepackage{amssymb}\n\\usepackage{amsmath}\n\\usepackage[margin=1in]{geometry}\n\\usepackage{fancyhdr}\n\\usepackage{enumerate}\n\\usepackage[shortlabels]{enumitem}\n\n\\pagestyle{fancy}\n\\fancyhead[l]{Li Yifeng}\n\\fancyhead[c]{Homework \\#5}\n\\fancyhead[r]{\\today}\n\\fancyfoot[c]{\\thepage}\n\\renewcommand{\\headrulewidth}{0.2pt}\n\\setlength{\\headheight}{15pt}\n\n\\newcommand{\\bP}{\\mathbb{P}}\n\n\\begin{document}\n\n    \\section*{Question 4}\n\n    \\noindent We are given a bowl that contains $6$ balls, numbered from $1$ to $6$. We extract two balls and denote $X$ and $Y$ the numbers on the ball obtained at the first (second) extraction, and $W = \\max(X,Y)$ the maximum value obtained. In all scenarios, describe the probability distribution of $W$.\n\n    \\bigskip\n\n    \\begin{enumerate}[start=1,label={\\bfseries Part \\arabic*:},leftmargin=0in]\n        \\bigskip\\item In the first scenario, assume that the extractions are made with replacement.\n\n        \\subsection*{Solution}\n\n            By applying the principle of symmetry, easy to define the probability space as\n\n            \\[\n            \\begin{aligned}\n                \\Omega &amp;= \\{1,2,\\dots,6\\}\\\\\n                \\mathcal{F} &amp;= \\mathcal{P}(\\Omega)\\\\\n                \\bP &amp;:\\enspace \\bP(\\{1\\}) = \\bP(\\{2\\}) = \\dots = \\bP(\\{6\\}) = \\frac{1}{6}\n            \\end{aligned}\n            \\]\n\n            Then as given, we have\n\n            \\[\n            \\begin{aligned}\n                X,Y &amp;:\\enspace \\Omega \\rightarrow R\\\\\n                W &amp;= \\max(X,Y)\\\\\n                R &amp;= \\{1,2,\\dots,6\\}\n            \\end{aligned}\n            \\]\n\n            Then we have the probability distribution of $W$ in scenario \\#1 (denoted as $W_1$ and $p_1$)\n\n            \\[\n            p_1(w_1) =\n            \\begin{cases}\n                \\begin{aligned}\n                    \\bP(W_1 = 1) &amp;= \\bP(\\{(1,1)\\}) &amp;= \\frac{1}{6^2} = \\frac{1}{36},&amp;\\quad w_1 = 1\\\\\n                    \\bP(W_1 = 2) &amp;= \\bP(\\{(1,2),(2,1),(2,2)\\}) &amp;= \\frac{3}{36},&amp;\\quad w_1 = 2\\\\\n                    \\bP(W_1 = 3) &amp;= \\bP(\\{(1,3),(2,3),\\dots,(3,3)\\}) &amp;= \\frac{5}{36},&amp;\\quad w_1 = 3\\\\\n                    \\bP(W_1 = 4) &amp;= \\bP(\\{(1,4),(2,4),\\dots,(4,4)\\}) &amp;= \\frac{7}{36},&amp;\\quad w_1 = 4\\\\\n                    \\bP(W_1 = 5) &amp;= \\bP(\\{(1,5),(2,5),\\dots,(5,5)\\}) &amp;= \\frac{9}{36},&amp;\\quad w_1 = 5\\\\\n                    \\bP(W_1 = 6) &amp;= \\bP(\\{(1,6),(2,6),\\dots,(6,6)\\}) &amp;= \\frac{11}{36},&amp;\\quad w_1 = 6\n                \\end{aligned}\n            \\end{cases}\n            \\]\n\n            Or a general formula without cases\n\n            \\[p_1(w_1) = \\frac{2w_1-1}{6^2} = \\frac{2w_1-1}{36},\\quad w_1\\in \\{1,2,\\dots,6\\}\\]\n\n        \\subsection*{Answer}\n\n            \\[\\boxed{p_1(w_1) =\n                \\begin{cases}\n                    \\begin{aligned}\n                        \\frac{1}{36},&amp;\\quad w_1 = 1\\\\\n                        \\frac{3}{36},&amp;\\quad w_1 = 2\\\\\n                        \\frac{5}{36},&amp;\\quad w_1 = 3\\\\\n                        \\frac{7}{36},&amp;\\quad w_1 = 4\\\\\n                        \\frac{9}{36},&amp;\\quad w_1 = 5\\\\\n                        \\frac{11}{36},&amp;\\quad w_1 = 6\n                    \\end{aligned}\n            \\end{cases}}\\]\n\n        \\bigskip\\item In the second scenario, assume that the extractions are performed without replacement.\n\n        \\subsection*{Solution}\n\n            Easy to see that\n\n            \\[\n            p_2(w_2) =\n            \\begin{cases}\n                \\begin{aligned}\n                    \\bP(W_2 = 2) &amp;= \\bP(\\{(1,2),(2,1)\\}) &amp;= \\frac{2}{6\\times 5} = \\frac{1}{15},&amp;\\quad w_2 = 2\\\\\n                    \\bP(W_2 = 3) &amp;= \\bP(\\{(1,3),(2,3),\\dots,(3,2)\\}) &amp;= \\frac{2}{15},&amp;\\quad w_2 = 3\\\\\n                    \\bP(W_2 = 4) &amp;= \\bP(\\{(1,4),(2,4),\\dots,(4,3)\\}) &amp;= \\frac{3}{15},&amp;\\quad w_2 = 4\\\\\n                    \\bP(W_2 = 5) &amp;= \\bP(\\{(1,5),(2,5),\\dots,(5,4)\\}) &amp;= \\frac{4}{15},&amp;\\quad w_2 = 5\\\\\n                    \\bP(W_2 = 6) &amp;= \\bP(\\{(1,6),(2,6),\\dots,(6,5)\\}) &amp;= \\frac{5}{15},&amp;\\quad w_2 = 6\\\\\n                \\end{aligned}\n            \\end{cases}\n            \\]\n\n            Or a general formula without cases\n\n            \\[p_2(w_2) = \\frac{2w_2-2}{6\\times 5} = \\frac{w_2-1}{15},\\quad w_2\\in \\{2,3,\\dots,6\\}\\]\n\n        \\subsection*{Answer}\n\n            \\[\\boxed{p_2(w_2) =\n                \\begin{cases}\n                    \\begin{aligned}\n                        \\frac{1}{15},&amp;\\quad w_2 = 2\\\\\n                        \\frac{2}{15},&amp;\\quad w_2 = 3\\\\\n                        \\frac{3}{15},&amp;\\quad w_2 = 4\\\\\n                        \\frac{4}{15},&amp;\\quad w_2 = 5\\\\\n                        \\frac{5}{15},&amp;\\quad w_2 = 6\\\\\n                    \\end{aligned}\n            \\end{cases}}\\]\n\n        \\bigskip\\item In the third scenario, assume that after the first extraction, we replace the ball in the urn, together with another one with the same number.\n\n        \\subsection*{Solution}\n\n            Easy to see that\n\n            \\[\n            p_3(w_3) =\n            \\begin{cases}\n                \\begin{aligned}\n                    \\bP(W_3 = 1) &amp;= \\bP(\\{(1,1)\\}) &amp;= \\frac{1}{6}\\times \\frac{2}{7} &amp;= \\frac{1}{21},&amp;\\quad w_3 = 1\\\\\n                    \\bP(W_3 = 2) &amp;= \\bP(\\{(1,2),(2,1),(2,2)\\}) &amp;= 2\\left(\\frac{1}{6}\\times \\frac{1}{7}\\right) + \\frac{2}{42} &amp;= \\frac{2}{21},&amp;\\quad w_3 = 2\\\\\n                    \\bP(W_3 = 3) &amp;= \\bP(\\{(1,3),(2,3),\\dots,(3,3)\\}) &amp;= 4\\left(\\frac{1}{42}\\right) + \\frac{2}{42} &amp;= \\frac{3}{21},&amp;\\quad w_3 = 3\\\\\n                    \\bP(W_3 = 4) &amp;= \\bP(\\{(1,4),(2,4),\\dots,(4,4)\\}) &amp;= 6\\left(\\frac{1}{42}\\right) + \\frac{2}{42} &amp;= \\frac{4}{21},&amp;\\quad w_3 = 4\\\\\n                    \\bP(W_3 = 5) &amp;= \\bP(\\{(1,5),(2,5),\\dots,(5,5)\\}) &amp;= 8\\left(\\frac{1}{42}\\right) + \\frac{2}{42} &amp;= \\frac{5}{21},&amp;\\quad w_3 = 5\\\\\n                    \\bP(W_3 = 6) &amp;= \\bP(\\{(1,6),(2,6),\\dots,(6,6)\\}) &amp;= 10\\left(\\frac{1}{42}\\right) + \\frac{2}{42} &amp;= \\frac{6}{21},&amp;\\quad w_3 = 6\n                \\end{aligned}\n            \\end{cases}\n            \\]\n\n            Or a general formula without cases\n\n            \\[p_3(w_3) = \\frac{w_3}{21},\\quad w_3\\in \\{1,2,\\dots,6\\}\\]\n\n        \\subsection*{Answer}\n\n            \\[\\boxed{p_3(w_3) =\n                \\begin{cases}\n                    \\begin{aligned}\n                        \\frac{1}{21},&amp;\\quad w_3 = 1\\\\\n                        \\frac{2}{21},&amp;\\quad w_3 = 2\\\\\n                        \\frac{3}{21},&amp;\\quad w_3 = 3\\\\\n                        \\frac{4}{21},&amp;\\quad w_3 = 4\\\\\n                        \\frac{5}{21},&amp;\\quad w_3 = 5\\\\\n                        \\frac{6}{21},&amp;\\quad w_3 = 6\n                    \\end{aligned}\n            \\end{cases}}\\]\n    \\end{enumerate}\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W6/","title":"W6","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W6/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 8 items</li> <li>Size:  309 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W6\n</code></pre> Name Type Item Size Q1 pdf / 90 KiB Q1 tex / 3 KiB Q2 pdf / 62 KiB Q2 tex / 2 KiB Q3 pdf / 71 KiB Q3 tex / 3 KiB Q4 pdf / 76 KiB Q4 tex / 2 KiB"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W6/Q1.pdf/","title":"Q1","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W6/Q1.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    90 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W6\n        \u2514\u2500\u2500 Q1.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W6/Q1.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W6/Q1.tex/","title":"Q1","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W6/Q1.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    3 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W6\n        \u2514\u2500\u2500 Q1.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W6/Q1.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[12pt]{article}\n\n\\usepackage{graphicx}\n\\usepackage{amssymb}\n\\usepackage{amsmath}\n\\usepackage[margin=1in]{geometry}\n\\usepackage{fancyhdr}\n\\usepackage{enumerate}\n\\usepackage[shortlabels]{enumitem}\n\n\\pagestyle{fancy}\n\\fancyhead[l]{Li Yifeng}\n\\fancyhead[c]{Homework \\#6}\n\\fancyhead[r]{\\today}\n\\fancyfoot[c]{\\thepage}\n\\renewcommand{\\headrulewidth}{0.2pt}\n\\setlength{\\headheight}{15pt}\n\n\\newcommand{\\bP}{\\mathbb{P}}\n\n\\begin{document}\n\n    \\section*{Question 1}\n\n    \\noindent Hugo is trying to complete his card collection and needs just one last card. He can obtain cards from biscuit packs, and each pack has a $0.2$ probability of containing the card he needs. Hugo has enough money to buy at most $4$ packs, but he will stop buying as soon as he finds the missing card. Let $X$ be the number of packs Hugo buys.\n\n    \\bigskip\n\n    \\begin{enumerate}[start=1,label={\\bfseries Part \\arabic*:},leftmargin=0in]\n        \\bigskip\\item What is the probability distribution of $X$?\n\n        \\subsection*{Solution}\n\n            As given, easy to know that $X$ has a geometric distribution with parameter $p$, that is\n\n            \\[X\\sim\\text{Geo}(p),\\quad p = 0.2,\\quad X \\in \\{1,2,3,4\\}\\]\n\n            We know that\n\n            \\[\\bP(X = k) = (1-p)^{k-1}p,\\quad k\\in X\\]\n\n            Then we have\n\n            \\[\n                \\bP(X = k) =\n                    \\begin{cases}\n                        \\begin{aligned}\n                            (1-0.2)^{1-1} 0.2 &amp;= \\frac{1}{5} &amp;= 0.2, &amp;\\quad k = 1\\\\\n                            (1-0.2)^{2-1} 0.2 &amp;= \\frac{4}{25} &amp;= 0.16, &amp;\\quad k = 2\\\\\n                            (1-0.2)^{3-1} 0.2 &amp;= \\frac{16}{125} &amp;= 0.128, &amp;\\quad k = 3\\\\\n                            1 - \\sum_{i=1}^3\\bP(X = i) &amp;= \\frac{64}{125} &amp;= 0.512, &amp;\\quad k = 4\n                        \\end{aligned}\n                    \\end{cases}\n            \\]\n\n        \\subsection*{Answer}\n\n            \\[\\boxed{\\bP(X = k) =\n                \\begin{cases}\n                    \\begin{aligned}\n                        \\frac{1}{5} &amp;= 0.2, &amp;\\quad k = 1\\\\\n                        \\frac{4}{25} &amp;= 0.16, &amp;\\quad k = 2\\\\\n                        \\frac{16}{125} &amp;= 0.128, &amp;\\quad k = 3\\\\\n                        \\frac{64}{125} &amp;= 0.512, &amp;\\quad k = 4\n                    \\end{aligned}\n            \\end{cases}}\\]\n\n        \\bigskip\\item What is the probability that Hugo successfully completes his collection?\n\n        \\subsection*{Solution}\n\n            Let event $C$ denotes that Hugo completes his collection and let $C_4$ denotes that Hugo completes his collection when opening the fourth pack, easy to know that\n\n            \\[C = C_4 \\cup \\bigcup_{k=1}^3(X = k),\\quad \\bP(C_4) = (1-p)^{4-1}p\\]\n\n            Then we have\n\n            \\[\n                \\begin{aligned}\n                    \\bP(C) &amp;= \\bP(C_4) + \\sum_{k=1}^3\\bP(X = k)\\\\\n                    &amp;= (1-0.2)^{3}0.2 + \\frac{1}{5} + \\frac{4}{25} + \\frac{16}{125}\\\\\n                    &amp;= \\frac{369}{625}\\\\\n                    &amp;= 0.590\\,4\n                \\end{aligned}\n            \\]\n\n        \\subsection*{Answer}\n\n            \\[\\boxed{\\bP(C) = \\frac{369}{625} = 0.590\\,4}\\]\n\n        \\bigskip\\item Given that Hugo completes the collection, what is the probability that he only buys one pack?\n\n        \\subsection*{Solution}\n\n            By applying the Bayes\u2019 Theorem, we know that\n\n            \\[\n                \\begin{aligned}\n                    \\bP_C(X = 1) &amp;= \\frac{\\bP_{X = 1}(C)\\bP(X = 1)}{\\bP(C)}\\\\\n                    &amp;= \\frac{1\\times \\frac{1}{5}}{\\frac{369}{625}}\\\\\n                    &amp;= \\frac{125}{369}\\\\\n                    &amp;\\approx 0.339\n                \\end{aligned}\n            \\]\n\n        \\subsection*{Answer}\n\n            \\[\\boxed{\\bP_C(X = 1) = \\frac{125}{369} \\approx 0.339}\\]\n    \\end{enumerate}\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W6/Q2.pdf/","title":"Q2","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W6/Q2.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    62 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W6\n        \u2514\u2500\u2500 Q2.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W6/Q2.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W6/Q2.tex/","title":"Q2","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W6/Q2.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W6\n        \u2514\u2500\u2500 Q2.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W6/Q2.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[12pt]{article}\n\n\\usepackage{graphicx}\n\\usepackage{amssymb}\n\\usepackage{amsmath}\n\\usepackage[margin=1in]{geometry}\n\\usepackage{fancyhdr}\n\\usepackage{enumerate}\n\\usepackage[shortlabels]{enumitem}\n\n\\pagestyle{fancy}\n\\fancyhead[l]{Li Yifeng}\n\\fancyhead[c]{Homework \\#6}\n\\fancyhead[r]{\\today}\n\\fancyfoot[c]{\\thepage}\n\\renewcommand{\\headrulewidth}{0.2pt}\n\\setlength{\\headheight}{15pt}\n\n\\newcommand{\\bP}{\\mathbb{P}}\n\n\\begin{document}\n\n    \\section*{Question 2}\n\n    \\noindent An urn contains six balls, numbered $1$ to $6$. Two balls are drawn at random, without replacement. Let $X$ be the difference between the larger and smaller of the two numbers drawn. What is the probability distribution of $X$?\n\n    \\bigskip\n\n    \\begin{enumerate}[label={},leftmargin=0in]\\item\n        \\subsection*{Solution}\n\n            By applying the principle of symmetry, easy to define the probability space as\n\n            \\[\n            \\begin{aligned}\n                \\Omega &amp;= \\{1,2,\\dots,6\\}\\\\\n                \\mathcal{F} &amp;= \\mathcal{P}(\\Omega)\\\\\n                \\bP &amp;:\\enspace \\bP(\\{1,2\\}) = \\bP(\\{1,3\\}) = \\dots = \\bP(\\{6,5\\}) = \\frac{1}{6}\\times \\frac{1}{5} = \\frac{1}{30}\n            \\end{aligned}\n            \\]\n\n            Then we have the $pdf$ of $X$\n\n            \\[\n                p(x) =\n                \\begin{cases}\n                    \\begin{aligned}\n                        \\bP(X = 1) &amp;= \\bP(\\{1,2\\},\\{2,1\\},\\dots,\\{6,5\\}) &amp;= \\frac{5}{15} &amp;\\approx 0.333,&amp;\\quad x = 1\\\\\n                        \\bP(X = 2) &amp;= \\bP(\\{1,3\\},\\{2,4\\},\\dots,\\{6,4\\}) &amp;= \\frac{4}{15} &amp;\\approx 0.267,&amp;\\quad x = 2\\\\\n                        \\bP(X = 3) &amp;= \\bP(\\{1,4\\},\\{2,5\\},\\dots,\\{6,3\\}) &amp;= \\frac{3}{15} &amp;= 0.2,&amp;\\quad x = 3\\\\\n                        \\bP(X = 4) &amp;= \\bP(\\{1,5\\},\\{2,6\\},\\dots,\\{6,2\\}) &amp;= \\frac{2}{15} &amp;\\approx 0.133,&amp;\\quad x = 4\\\\\n                        \\bP(X = 5) &amp;= \\bP(\\{1,6\\},\\{6,1\\}) &amp;= \\frac{1}{15} &amp;\\approx 0.067,&amp;\\quad x = 5\n                    \\end{aligned}\n                \\end{cases}\n            \\]\n\n            Or a general formula without cases\n\n            \\[p(x) = \\frac{6-x}{\\dbinom{6}{2}} = \\frac{6-x}{15},\\quad x\\in\\{1,2,\\dots,5\\}\\]\n\n        \\subsection*{Answer}\n\n            \\[\\boxed{p(x) =\n                \\begin{cases}\n                    \\begin{aligned}\n                        \\frac{5}{15} &amp;\\approx 0.333,&amp;\\quad x = 1\\\\\n                        \\frac{4}{15} &amp;\\approx 0.267,&amp;\\quad x = 2\\\\\n                        \\frac{3}{15} &amp;= 0.2,&amp;\\quad x = 3\\\\\n                        \\frac{2}{15} &amp;\\approx 0.133,&amp;\\quad x = 4\\\\\n                        \\frac{1}{15} &amp;\\approx 0.067,&amp;\\quad x = 5\n                    \\end{aligned}\n            \\end{cases}}\\]\n    \\end{enumerate}\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W6/Q3.pdf/","title":"Q3","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W6/Q3.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    71 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W6\n        \u2514\u2500\u2500 Q3.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W6/Q3.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W6/Q3.tex/","title":"Q3","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W6/Q3.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    3 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W6\n        \u2514\u2500\u2500 Q3.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W6/Q3.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[12pt]{article}\n\n\\usepackage{graphicx}\n\\usepackage{amssymb}\n\\usepackage{amsmath}\n\\usepackage[margin=1in]{geometry}\n\\usepackage{fancyhdr}\n\\usepackage{enumerate}\n\\usepackage[shortlabels]{enumitem}\n\n\\pagestyle{fancy}\n\\fancyhead[l]{Li Yifeng}\n\\fancyhead[c]{Homework \\#6}\n\\fancyhead[r]{\\today}\n\\fancyfoot[c]{\\thepage}\n\\renewcommand{\\headrulewidth}{0.2pt}\n\\setlength{\\headheight}{15pt}\n\n\\newcommand{\\bP}{\\mathbb{P}}\n\n\\begin{document}\n\n    \\section*{Question 3}\n\n    \\noindent Alice proposes to Bob the following bet. Alice tosses a fair coin n times, and computes the number of heads $X$. Bob tosses the coin $n+1$ times, and obtain $Y$ heads. Bob wins the bet if $Y &gt; X$.\n\n    \\bigskip\n\n    \\begin{enumerate}[start=1,label={\\bfseries Part \\arabic*:},leftmargin=0in]\n        \\bigskip\\item Is the bet fair?\n\n        \\subsection*{Solution}\n\n            As given, we can define the Bernoulli distribution with sample space $\\Omega = \\{\\text{head},\\text{tail}\\}$ ($head$ denotes $drop\\enspace headed$ and $tail$ denotes $drop\\enspace tailed$) and with parameter $p = 0.5$ (by applying the principle of symmetry), then we can define the Binomial distribution of both $X$ and $Y$ as\n\n            \\[\n                \\begin{aligned}\n                    X\\sim &amp;\\text{Bin}(n,p)\\\\\n                    Y\\sim &amp;\\text{Bin}(n+1,p)\n                \\end{aligned}\n            \\]\n\n            Let as define $Z = Y - X$, then we have\n\n            \\[Z\\sim \\text{Bin}(1,p)\\]\n\n            Then we have the distribution of $Z$\n\n            \\[\n                p(z) =\n                \\begin{cases}\n                    \\begin{aligned}\n                        0.5,\\quad z = 0\\\\\n                        0.5,\\quad z = 1\n                    \\end{aligned}\n                \\end{cases}\n            \\]\n\n            That is\n\n            \\[\n                \\begin{aligned}\n                    \\bP(Y &gt; X) &amp;= \\bP(Z &gt; 0)\\\\\n                    &amp;= \\frac{p(1)}{p(0) + p(1)}\\\\\n                    &amp;= \\frac{1}{2}\n                \\end{aligned}\n            \\]\n\n        \\subsection*{Answer}\n\n            \\[\\boxed{\\text{Fair.}}\\]\n\n        \\bigskip\\item Compute the answer for a general coin.\n\n        \\subsection*{Solution}\n\n            Here we let $p_g$ denote a random variable in $(0,1)$, then we have the $Z$ in general case\n\n            \\[Z_g\\sim \\text{Bin}(1,p_g)\\]\n\n            Then we have the distribution of $Z_g$\n\n            \\[\n                p_g(z) =\n                \\begin{cases}\n                    \\begin{aligned}\n                        1-p_g,\\quad z = 0\\\\\n                        p_g,\\quad z = 1\n                    \\end{aligned}\n                \\end{cases}\n            \\]\n\n            By denoting $X$ and $Y$ in general case as $X_g$ and $Y_g$, we have\n\n            \\[\n                \\begin{aligned}\n                    \\bP(Y_g &gt; X_g) &amp;= \\bP(Z_g &gt; 0)\\\\\n                    &amp;= \\frac{p_g(1)}{p_g(0) + p_g(1)}\\\\\n                    &amp;= p_g\n                \\end{aligned}\n            \\]\n\n            That is\n\n            \\[\n                \\text{Bet is}\n                \\begin{cases}\n                    \\begin{aligned}\n                        \\text{Unfair, Alice tends to win more},&amp;\\quad p_g &lt; 0.5\\\\\n                        \\text{Fair},&amp;\\quad p_g = 0.5\\\\\n                        \\text{Unfair, Bob tends to win more},&amp;\\quad p_g &gt; 0.5\n                    \\end{aligned}\n                \\end{cases}\n            \\]\n\n        \\subsection*{Answer}\n\n            \\[\\boxed{\\text{Bet is}\n                \\begin{cases}\n                    \\begin{aligned}\n                        \\text{Unfair, Alice tends to win more},&amp;\\quad p_g &lt; 0.5\\\\\n                        \\text{Fair},&amp;\\quad p_g = 0.5\\\\\n                        \\text{Unfair, Bob tends to win more},&amp;\\quad p_g &gt; 0.5\n                    \\end{aligned}\n            \\end{cases}}\\]\n    \\end{enumerate}\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W6/Q4.pdf/","title":"Q4","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W6/Q4.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    76 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W6\n        \u2514\u2500\u2500 Q4.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W6/Q4.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W6/Q4.tex/","title":"Q4","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W6/Q4.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W6\n        \u2514\u2500\u2500 Q4.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W6/Q4.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[12pt]{article}\n\n\\usepackage{graphicx}\n\\usepackage{amssymb}\n\\usepackage{amsmath}\n\\usepackage[margin=1in]{geometry}\n\\usepackage{fancyhdr}\n\\usepackage{enumerate}\n\\usepackage[shortlabels]{enumitem}\n\n\\pagestyle{fancy}\n\\fancyhead[l]{Li Yifeng}\n\\fancyhead[c]{Homework \\#6}\n\\fancyhead[r]{\\today}\n\\fancyfoot[c]{\\thepage}\n\\renewcommand{\\headrulewidth}{0.2pt}\n\\setlength{\\headheight}{15pt}\n\n\\newcommand{\\bP}{\\mathbb{P}}\n\n\\begin{document}\n\n    \\section*{Question 4}\n\n    \\noindent Let $X$ be a discrete random variable with the following probability distribution function (PDF):\n\n    \\[\n        p_X(k) =\n        \\begin{cases}\n            \\begin{aligned}\n                \\frac{1}{4}, &amp;\\quad k = -2\\\\\n                \\frac{1}{8}, &amp;\\quad k = -1\\\\\n                \\frac{1}{8}, &amp;\\quad k = 0\\\\\n                \\frac{1}{4}, &amp;\\quad k = 1\\\\\n                \\frac{1}{4}, &amp;\\quad k = 2\\\\\n                0, &amp;\\quad \\text{otherwise}\n            \\end{aligned}\n        \\end{cases}\n    \\]\n\n    \\noindent We define a new random variable $Y$ as $Y = (X + 1)^2$. Find the probability distribution function (PDF) of $Y$.\n\n    \\bigskip\n\n    \\begin{enumerate}[label={},leftmargin=0in]\\item\n        \\subsection*{Solution}\n\n            Easy to see that\n\n            \\[\n                \\begin{tabular}{|c|c|c|}\n                    \\hline\n                    $X$  &amp; $(X+1)^2=Y$ &amp; $\\bP(X)$       \\\\ \\hline\n                    $-2$ &amp; $1$         &amp; $\\frac{1}{4}$  \\\\ \\hline\n                    $-1$ &amp; $0$         &amp; $\\frac{1}{8}$  \\\\ \\hline\n                    $0$  &amp; $1$         &amp; $\\frac{1}{8}$  \\\\ \\hline\n                    $1$  &amp; $4$         &amp; $\\frac{1}{4}$  \\\\ \\hline\n                    $2$  &amp; $9$         &amp; $\\frac{1}{4}$  \\\\ \\hline\n                \\end{tabular}\n            \\]\n\n            Then we have the $pdf$ of $Y$\n\n            \\[\n                p_Y(k) =\n                \\begin{cases}\n                    \\begin{aligned}\n                        \\frac{1}{8}, &amp;\\quad k = 0\\\\\n                        \\frac{1}{4} + \\frac{1}{8} = \\frac{3}{8}, &amp;\\quad k = 1\\\\\n                        \\frac{1}{4}, &amp;\\quad k = 4\\\\\n                        \\frac{1}{4}, &amp;\\quad k = 9\\\\\n                        0, &amp;\\quad \\text{otherwise}\n                    \\end{aligned}\n                \\end{cases}\n            \\]\n\n        \\subsection*{Answer}\n\n            \\[\\boxed{p_Y(k) =\n                \\begin{cases}\n                    \\begin{aligned}\n                        \\frac{1}{8}, &amp;\\quad k = 0\\\\\n                        \\frac{3}{8}, &amp;\\quad k = 1\\\\\n                        \\frac{1}{4}, &amp;\\quad k = 4\\\\\n                        \\frac{1}{4}, &amp;\\quad k = 9\\\\\n                        0, &amp;\\quad \\text{otherwise}\n                    \\end{aligned}\n            \\end{cases}}\\]\n    \\end{enumerate}\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W7/","title":"W7","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W7/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 8 items</li> <li>Size:  303 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W7\n</code></pre> Name Type Item Size Q1 pdf / 73 KiB Q1 tex / 3 KiB Q2 pdf / 68 KiB Q2 tex / 2 KiB Q3 pdf / 93 KiB Q3 tex / 4 KiB Q4 pdf / 58 KiB Q4 tex / 1 KiB"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W7/Q1.pdf/","title":"Q1","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W7/Q1.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    73 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W7\n        \u2514\u2500\u2500 Q1.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W7/Q1.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W7/Q1.tex/","title":"Q1","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W7/Q1.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    3 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W7\n        \u2514\u2500\u2500 Q1.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W7/Q1.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[12pt]{article}\n\n\\usepackage{graphicx}\n\\usepackage{amssymb}\n\\usepackage{amsmath}\n\\usepackage[margin=1in]{geometry}\n\\usepackage{fancyhdr}\n\\usepackage{enumerate}\n\\usepackage[shortlabels]{enumitem}\n\n\\pagestyle{fancy}\n\\fancyhead[l]{Li Yifeng}\n\\fancyhead[c]{Homework \\#7}\n\\fancyhead[r]{\\today}\n\\fancyfoot[c]{\\thepage}\n\\renewcommand{\\headrulewidth}{0.2pt}\n\\setlength{\\headheight}{15pt}\n\n\\newcommand{\\bE}{\\mathbb{E}}\n\\newcommand{\\bP}{\\mathbb{P}}\n\n\\begin{document}\n\n    \\section*{Question 1}\n\n    \\noindent Eight thousand lottery tickets are sold for \\$5 each.\n\n    \\bigskip\n\n    \\noindent One ticket will win $\\$2,000$, two tickets will win $\\$750$ each, and five tickets will win $\\$100$ each.\n\n    \\bigskip\n\n    \\begin{enumerate}[start=1,label={\\bfseries Part \\arabic*:},leftmargin=0in]\n        \\bigskip\\item Let $X$ denote the net gain from the purchase of a randomly selected ticket. Construct the probability distribution of $X$.\n\n        \\subsection*{Solution}\n\n            Easy to get the $pdf$ of $X$\n\n            \\[\n                p(x) =\n                \\begin{cases}\n                    \\begin{aligned}\n                        \\frac{1}{8\\,000},&amp;\\quad x = 2\\,000 - 5 &amp;= 1\\,995\\\\\n                        \\frac{2}{8\\,000},&amp;\\quad x = 750 - 5 &amp;= 745\\\\\n                        \\frac{5}{8\\,000},&amp;\\quad x = 100 - 5 &amp;= 95\\\\\n                        \\frac{8\\,000 - 1 - 2 - 5}{8\\,000} = \\frac{7\\,992}{8000},&amp;\\quad x = 0 - 5 &amp;= -5\n                    \\end{aligned}\n                \\end{cases}\n            \\]\n\n        \\subsection*{Answer}\n\n            \\[\\boxed{p(x) =\n                \\begin{cases}\n                    \\begin{aligned}\n                        \\frac{1}{8\\,000},&amp;\\quad x = 1\\,995\\\\\n                        \\frac{2}{8\\,000},&amp;\\quad x = 745\\\\\n                        \\frac{5}{8\\,000},&amp;\\quad x = 95\\\\\n                        \\frac{7\\,992}{8000},&amp;\\quad x = -5\n                    \\end{aligned}\n            \\end{cases}}\\]\n\n        \\bigskip\\item Compute the expected value $\\mu$ of $X$ and intepret its meaning.\n\n        \\subsection*{Solution}\n\n            As given, easy to get\n\n            \\[\n                \\begin{aligned}\n                    \\mu &amp;= 1\\,995p(1\\,995) + 745p(745) + 95p(95) + -5p(-5)\\\\\n                    &amp;= \\frac{399}{1\\,600} + \\frac{149}{800} + \\frac{19}{320} - \\frac{999}{200}\\\\\n                    &amp;= -\\frac{9}{2}\n                \\end{aligned}\n            \\]\n\n        \\subsection*{Answer}\n\n            \\[\\boxed{\\mu = -\\frac{9}{2}}\\]\n\n        \\bigskip\\item Compute the standard deviation $\\sigma$ of $X$.\n\n        \\subsection*{Solution}\n\n            Easy to get\n\n            \\[\n                \\begin{aligned}\n                    \\sigma &amp;= \\sqrt{-\\mu^2 + \\bE\\left[X^2\\right]}\\\\\n                    &amp;= \\sqrt{-\\mu^2 + \\left(1\\,995^2p(1\\,995) + 745^2p(745) + 95^2p(95) + (-5)^2p(-5)\\right)}\\\\\n                    &amp;= \\sqrt{-\\frac{81}{4} + \\left(\\frac{398\\,0025 + 111\\,0050 + 45\\,125 + 199\\,800}{8\\,000}\\right)}\\\\\n                    &amp;= \\sqrt{\\frac{5\\,173}{8}}\\\\\n                    &amp;\\approx 25.429\n                \\end{aligned}\n            \\]\n\n        \\subsection*{Answer}\n\n            \\[\\boxed{\\sigma = \\sqrt{\\frac{5\\,173}{8}} \\approx 25.429}\\]\n    \\end{enumerate}\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W7/Q2.pdf/","title":"Q2","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W7/Q2.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    68 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W7\n        \u2514\u2500\u2500 Q2.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W7/Q2.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W7/Q2.tex/","title":"Q2","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W7/Q2.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W7\n        \u2514\u2500\u2500 Q2.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W7/Q2.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[12pt]{article}\n\n\\usepackage{graphicx}\n\\usepackage{amssymb}\n\\usepackage{amsmath}\n\\usepackage[margin=1in]{geometry}\n\\usepackage{fancyhdr}\n\\usepackage{enumerate}\n\\usepackage[shortlabels]{enumitem}\n\n\\pagestyle{fancy}\n\\fancyhead[l]{Li Yifeng}\n\\fancyhead[c]{Homework \\#7}\n\\fancyhead[r]{\\today}\n\\fancyfoot[c]{\\thepage}\n\\renewcommand{\\headrulewidth}{0.2pt}\n\\setlength{\\headheight}{15pt}\n\n\\newcommand{\\bE}{\\mathbb{E}}\n\\newcommand{\\bP}{\\mathbb{P}}\n\n\\begin{document}\n\n    \\section*{Question 2}\n\n    \\noindent Assume that the random variable $X$ has the following probability mass function:\n\n    \\[\n        p(x) =\n        \\begin{cases}\n            \\begin{aligned}\n                \\frac{1}{8},&amp;\\quad x = -1\\\\\n                \\frac{1}{4},&amp;\\quad x = 0\\\\\n                \\frac{1}{2},&amp;\\quad x = 1\\\\\n                \\frac{1}{8},&amp;\\quad x = 2\n            \\end{aligned}\n        \\end{cases}\n    \\]\n\n    \\bigskip\n\n    \\begin{enumerate}[start=1,label={\\bfseries Part \\arabic*:},leftmargin=0in]\n        \\bigskip\\item Compute the expectation of $X$ and of $X^2$.\n\n        \\subsection*{Solution}\n\n            Easy to get\n\n            \\[\n                \\begin{aligned}\n                    \\bE[X] &amp;= -1p(-1) + 0p(0) + 1p(1) + 2p(2)\\\\\n                    &amp;= -\\frac{1}{8} + 0 + \\frac{1}{2} + \\frac{1}{4}\\\\\n                    &amp;= \\frac{5}{8}\n                \\end{aligned}\n            \\]\n\n            As well as\n\n            \\[\n            \\begin{aligned}\n                \\bE\\left[X^2\\right] &amp;= (-1)^2p(-1) + 0^2p(0) + 1^2p(1) + 2^2p(2)\\\\\n                &amp;= \\frac{1}{8} + 0 + \\frac{1}{2} + \\frac{1}{2}\\\\\n                &amp;= \\frac{9}{8}\n            \\end{aligned}\n            \\]\n\n        \\subsection*{Answer}\n\n            \\[\\boxed{\\begin{aligned}\n                    \\bE[X] &amp;= \\frac{5}{8}\\\\\n                    \\bE\\left[X^2\\right] &amp;= \\frac{9}{8}\n            \\end{aligned}}\\]\n\n        \\bigskip\\item Compute the variance of $X$ and of $X^2$.\n\n        \\subsection*{Solution}\n\n            Easy to get the variance of $X$\n\n            \\[\n                \\begin{aligned}\n                    V(X) &amp;= \\bE\\left[X^2\\right] - (\\bE[X])^2\\\\\n                    &amp;= \\frac{9}{8} - \\left(\\frac{5}{8}\\right)^2\\\\\n                    &amp;= \\frac{47}{64}\n                \\end{aligned}\n            \\]\n\n            As well as the variance of $X^2$\n\n            \\[\n                \\begin{aligned}\n                    V(X^2) &amp;= - \\left(\\bE\\left[X^2\\right]\\right)^2 + \\bE\\left[\\left(X^2\\right)^2\\right]\\\\\n                    &amp;= -\\frac{81}{64} + \\left((-1)^4p(-1) + 0^4p(0) + 1^4p(1) + 2^4p(2)\\right)\\\\\n                    &amp;= -\\frac{81}{64} + \\left(\\frac{1}{8} + 0 + \\frac{1}{2} + 2\\right)\\\\\n                    &amp;= \\frac{87}{64}\n                \\end{aligned}\n            \\]\n\n        \\subsection*{Answer}\n\n            \\[\\boxed{\\begin{aligned}\n                    V(X) &amp;= \\frac{47}{64}\\\\\n                    V(X^2) &amp;= \\frac{87}{64}\n            \\end{aligned}}\\]\n\n    \\end{enumerate}\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W7/Q3.pdf/","title":"Q3","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W7/Q3.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    93 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W7\n        \u2514\u2500\u2500 Q3.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W7/Q3.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W7/Q3.tex/","title":"Q3","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W7/Q3.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    4 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W7\n        \u2514\u2500\u2500 Q3.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W7/Q3.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[12pt]{article}\n\n\\usepackage{graphicx}\n\\usepackage{amssymb}\n\\usepackage{amsmath}\n\\usepackage[margin=1in]{geometry}\n\\usepackage{fancyhdr}\n\\usepackage{enumerate}\n\\usepackage[shortlabels]{enumitem}\n\n\\pagestyle{fancy}\n\\fancyhead[l]{Li Yifeng}\n\\fancyhead[c]{Homework \\#7}\n\\fancyhead[r]{\\today}\n\\fancyfoot[c]{\\thepage}\n\\renewcommand{\\headrulewidth}{0.2pt}\n\\setlength{\\headheight}{15pt}\n\n\\newcommand{\\bE}{\\mathbb{E}}\n\\newcommand{\\bP}{\\mathbb{P}}\n\n\\begin{document}\n\n    \\section*{Question 3}\n\n    \\noindent Let $X$ denote the number of heads when tossing two fair coins.\n\n    \\bigskip\n\n    \\begin{enumerate}[start=1,label={\\bfseries Part \\arabic*:},leftmargin=0in]\n        \\bigskip\\item Construct the probability distribution of $X$. Compute the average and the standard deviation of $X$.\n\n        \\subsection*{Solution}\n\n            By applying the principle of symmetry, easy to define the probability space as\n\n            \\[\n                \\begin{aligned}\n                    \\Omega &amp;= \\{\\text{head}, \\text{tail}\\}\\\\\n                    \\mathcal{F} &amp;= \\mathcal{P}(\\Omega)\\\\\n                    \\bP &amp;:\\enspace \\bP(\\{(\\text{head}, \\text{head})\\}) = \\bP(\\{(\\text{head}, \\text{tail})\\}) = \\bP(\\{(\\text{tail}, \\text{head})\\}) = \\bP(\\{(\\text{tail}, \\text{tail})\\}) = \\frac{1}{4}\n                \\end{aligned}\n            \\]\n\n            Then we have the $pdf$ of $X$\n\n            \\[\n                p_X(x) =\n                \\begin{cases}\n                    \\begin{aligned}\n                        \\frac{1}{4},&amp;\\quad x = 0\\\\\n                        \\frac{1}{2},&amp;\\quad x = 1\\\\\n                        \\frac{1}{4},&amp;\\quad x = 2\n                    \\end{aligned}\n                \\end{cases}\n            \\]\n\n            Then we have the average of $X$\n\n            \\[\n                \\begin{aligned}\n                    \\mu_X &amp;= 0p_X(0) + 1p_X(1) + 2p_X(2)\\\\\n                    &amp;= 0 + \\frac{1}{2} + \\frac{1}{2}\\\\\n                    &amp;= 1\n                \\end{aligned}\n            \\]\n\n            As well as the expectation of $X^2$\n\n            \\[\n                \\begin{aligned}\n                    \\bE\\left[X^2\\right] &amp;= 0^2p_X(0) + 1^2p_X(1) + 2^2p_X(2)\\\\\n                    &amp;= 0 + \\frac{1}{2} + 1\\\\\n                    &amp;= \\frac{3}{2}\n                \\end{aligned}\n            \\]\n\n            Then we have the standard deviation of $X$\n\n            \\[\n            \\begin{aligned}\n                \\sigma_X &amp;= \\sqrt{\\bE\\left[X^2\\right] - {\\mu_X}^2}\\\\\n                &amp;= \\sqrt{\\frac{1}{2}}\\\\\n                &amp;\\approx 0.707\n            \\end{aligned}\n            \\]\n\n        \\subsection*{Answer}\n\n            \\[\\boxed{\n                \\begin{aligned}\n                    p_X(x) &amp;=\n                    \\begin{cases}\n                        \\begin{aligned}\n                            \\frac{1}{4},&amp;\\quad x = 0\\\\\n                            \\frac{1}{2},&amp;\\quad x = 1\\\\\n                            \\frac{1}{4},&amp;\\quad x = 2\n                        \\end{aligned}\n                    \\end{cases}\\\\\n                    \\mu_X &amp;= 1\\\\\n                    \\sigma_X &amp;= \\sqrt{\\frac{1}{2}} \\approx 0.707\n                \\end{aligned}\n            }\\]\n\n        \\bigskip\\item Now suppose you toss a fair coin repeatedly until you get a tail. Let $Y$ be the number of heads obtained before the first tail. Construct the probability distribution of $Y$. Compute the average and the standard deviation of $Y$ and compare them with those of $X$.\n\n        \\subsection*{Solution}\n\n            Easy to notice that $Y$ follows a geometric distribution with parameter $\\frac{1}{2}$ (by applying the principle of symmetry), then we have the $pdf$ of $Y$\n\n            \\[\n                p_Y(y) = \\left(\\frac{1}{2}\\right)^y\\left(\\frac{1}{2}\\right) = \\frac{1}{2^{y+1}},\\quad y\\in\\{0,1,\\dots\\}\n            \\]\n\n            Then we have the average of $Y$\n\n            \\[\n                \\begin{aligned}\n                    \\mu_Y &amp;= \\sum_{y = 0}^{\\infty}\\frac{y}{2^{y+1}}\\\\\n                    &amp;= \\frac{1}{2}\\sum_{y=0}^{\\infty}y\\left(\\frac{1}{2}\\right)^y\\\\\n                    &amp;= \\frac{1}{2}\\left(\\frac{\\frac{1}{2}}{\\left(1-\\frac{1}{2}\\right)^2}\\right)\\\\\n                    &amp;= 1\n                \\end{aligned}\n            \\]\n\n            As well as the expectation of $Y^2$\n\n            \\[\n                \\begin{aligned}\n                    \\bE\\left[Y^2\\right] &amp;= \\sum_{y=0}^{\\infty}\\frac{y^2}{2^{y+1}}\\\\\n                    &amp;= \\frac{1}{2}\\sum_{y=0}^{\\infty}y^2\\left(\\frac{1}{2}\\right)^y\\\\\n                    &amp;= \\frac{1}{2}\\left(\\frac{\\frac{1}{2}\\left(\\frac{1}{2}+1\\right)}{\\left(1-\\frac{1}{2}\\right)^3}\\right)\\\\\n                    &amp;= 3\n                \\end{aligned}\n            \\]\n\n            Then we have the standard deviation of $Y$\n\n            \\[\n                \\begin{aligned}\n                    \\sigma_Y &amp;= \\sqrt{\\bE\\left[Y^2\\right] - {\\mu_Y}^2}\\\\\n                    &amp;= \\sqrt{2}\\\\\n                    &amp;\\approx 1.414\n                \\end{aligned}\n            \\]\n\n            Comparison as\n\n            \\[\\mu_X = 1 = \\mu_Y\\]\n\n            \\[\\sigma_X = \\sqrt{\\frac{1}{2}} \\approx 0.707 &lt; 1.414 \\approx \\sqrt{2} = \\sigma_Y\\]\n\n        \\subsection*{Answer}\n\n            \\[\\boxed{\n                \\begin{aligned}\n                    p_Y(y) &amp;= \\frac{1}{2^{y+1}},\\quad y\\in\\{0,1,\\dots\\}\\\\\n                    \\mu_Y &amp;= 1\\\\\n                    \\sigma_Y &amp;= \\sqrt{2} \\approx 1.414\\\\\n                    \\mu_Y &amp;= \\mu_X\\\\\n                    \\sigma_Y &amp;&gt; \\sigma_X\n                \\end{aligned}\n            }\\]\n    \\end{enumerate}\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W7/Q4.pdf/","title":"Q4","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W7/Q4.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    58 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W7\n        \u2514\u2500\u2500 Q4.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W7/Q4.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W7/Q4.tex/","title":"Q4","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W7/Q4.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W7\n        \u2514\u2500\u2500 Q4.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W7/Q4.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[12pt]{article}\n\n\\usepackage{graphicx}\n\\usepackage{amssymb}\n\\usepackage{amsmath}\n\\usepackage[margin=1in]{geometry}\n\\usepackage{fancyhdr}\n\\usepackage{enumerate}\n\\usepackage[shortlabels]{enumitem}\n\n\\pagestyle{fancy}\n\\fancyhead[l]{Li Yifeng}\n\\fancyhead[c]{Homework \\#7}\n\\fancyhead[r]{\\today}\n\\fancyfoot[c]{\\thepage}\n\\renewcommand{\\headrulewidth}{0.2pt}\n\\setlength{\\headheight}{15pt}\n\n\\newcommand{\\bE}{\\mathbb{E}}\n\\newcommand{\\bP}{\\mathbb{P}}\n\n\\begin{document}\n\n    \\section*{Question 4}\n\n    \\noindent An insurance company will sell a $\\$90,000$ one-year term life insurance policy to an individual in a particular risk group for a premium of $\\$478$.\n\n    \\bigskip\n\n    \\noindent Find the expected value to the company of a single policy if a person in this risk group has a $99.62\\%$ chance of surviving one year.\n\n    \\bigskip\n\n    \\begin{enumerate}[label={},leftmargin=0in]\\item\n        \\subsection*{Solution}\n\n            Let $X$ be the random variable of the net gain of the company from a policy, then easy to get the $pdf$ of $X$\n\n            \\[\n                p(x) =\n                \\begin{cases}\n                    \\begin{aligned}\n                        1 - 99.62\\% = 0.38\\%,&amp;\\quad x = 478 - 90\\,000 = -89\\,522\\\\\n                        99.62\\%,&amp;\\quad x = 478\n                    \\end{aligned}\n                \\end{cases}\n            \\]\n\n            Then we have the expectation of $X$\n\n            \\[\n                \\begin{aligned}\n                    \\bE[X] &amp;= -89\\,552p(-89\\,552) + 478p(478)\\\\\n                    &amp;= -89\\,522(0.38\\%) + 478(99.62\\%)\\\\\n                    &amp;= 136\n                \\end{aligned}\n            \\]\n\n        \\subsection*{Answer}\n\n            \\[\\boxed{\\bE[X] = 136}\\]\n    \\end{enumerate}\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W8/","title":"W8","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W8/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 8 items</li> <li>Size:  310 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W8\n</code></pre> Name Type Item Size Q1 pdf / 85 KiB Q1 tex / 2 KiB Q2 pdf / 82 KiB Q2 tex / 1 KiB Q3 pdf / 68 KiB Q3 tex / 2 KiB Q4 pdf / 69 KiB Q4 tex / 2 KiB"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W8/Q1.pdf/","title":"Q1","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W8/Q1.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    85 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W8\n        \u2514\u2500\u2500 Q1.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W8/Q1.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W8/Q1.tex/","title":"Q1","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W8/Q1.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W8\n        \u2514\u2500\u2500 Q1.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W8/Q1.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[12pt]{article}\n\n\\usepackage{graphicx}\n\\usepackage{amssymb}\n\\usepackage{amsmath}\n\\usepackage[margin=1in]{geometry}\n\\usepackage{fancyhdr}\n\\usepackage{enumerate}\n\\usepackage[shortlabels]{enumitem}\n\n\\pagestyle{fancy}\n\\fancyhead[l]{Li Yifeng}\n\\fancyhead[c]{Homework \\#8}\n\\fancyhead[r]{\\today}\n\\fancyfoot[c]{\\thepage}\n\\renewcommand{\\headrulewidth}{0.2pt}\n\\setlength{\\headheight}{15pt}\n\n\\newcommand{\\bE}{\\mathbb{E}}\n\\newcommand{\\bP}{\\mathbb{P}}\n\n\\begin{document}\n\n    \\section*{Question 1}\n\n    \\noindent Most people who are investing their money want to do so at a very limited risk. For this reason many pension funds and mutual funds require that any stock or bond purchased has to be rated to have an extremely low risk of going into default. Standard and Poors (S\\&amp;P) and Moody are two companies who rate the risk of investments, and their triple A ranking is supposed to indicate that the bond has a risk of less than $1$ in $850$ ($0.12\\%$) of going into default.\n\n    \\bigskip\n\n    \\noindent It is rather difficult to find individual investments which are this conservative in their risk. Therefore, it is common practice on Wall Street to bundle together a bunch of riskier investments into what are called Collateralized Debt Obligations (CDOs). The idea is that these bonds pay out as long as not every loan in the bundle fails.\n\n    \\bigskip\n\n    \\begin{enumerate}[start=1,label={\\bfseries Part \\arabic*:},leftmargin=0in]\n        \\bigskip\\item What is the probability of a CDO failing to pay out if it consists of $10$ loans, each with independent failure probability of $0.1$?\n\n        \\subsection*{Solution}\n\n            Since the CDO fails only if \\emph{all} loans default and failures are independent,\n\n            \\[\n                \\bP(\\text{CDO fails}) = (0.1)^{10} = 10^{-10}\n            \\]\n\n        \\subsection*{Answer}\n\n            \\[\\boxed{\\bP(\\text{CDO fails}) = 10^{-10}}\\]\n\n        \\bigskip\\item How many independent subprime loans, each with failure probability $0.5$, are needed to create a triple-A CDO (failure risk $&lt; 0.0012$)?\n\n        \\subsection*{Solution}\n\n            We require\n\n            \\[\n                (0.5)^n &lt; 0.0012\n            \\]\n\n            Taking natural logarithms,\n\n            \\[\n                n\\ln(0.5) &lt; \\ln(0.0012)\n                \\quad\\Longrightarrow\\quad\n                n &gt; \\frac{\\ln(0.0012)}{\\ln(0.5)} \\approx 9.71\n            \\]\n\n            Thus the smallest integer $n$ is $10$.\n\n        \\subsection*{Answer}\n\n            \\[\\boxed{10}\\]\n    \\end{enumerate}\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W8/Q2.pdf/","title":"Q2","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W8/Q2.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    82 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W8\n        \u2514\u2500\u2500 Q2.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W8/Q2.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W8/Q2.tex/","title":"Q2","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W8/Q2.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W8\n        \u2514\u2500\u2500 Q2.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W8/Q2.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[12pt]{article}\n\n\\usepackage{graphicx}\n\\usepackage{amssymb}\n\\usepackage{amsmath}\n\\usepackage[margin=1in]{geometry}\n\\usepackage{fancyhdr}\n\\usepackage{enumerate}\n\\usepackage[shortlabels]{enumitem}\n\n\\pagestyle{fancy}\n\\fancyhead[l]{Li Yifeng}\n\\fancyhead[c]{Homework \\#8}\n\\fancyhead[r]{\\today}\n\\fancyfoot[c]{\\thepage}\n\\renewcommand{\\headrulewidth}{0.2pt}\n\\setlength{\\headheight}{15pt}\n\n\\newcommand{\\bE}{\\mathbb{E}}\n\\newcommand{\\bP}{\\mathbb{P}}\n\n\\begin{document}\n\n    \\section*{Question 2}\n\n    \\noindent During the rifle qualification in the Marine Corps the final ten shots are taken from $500$ yards. You receive one point for a hit and zero for a miss. If each shot is independent and the probability you hit is $p = 0.70$, what is the probability that you hit $7$ or more of your shots?\n\n    \\bigskip\n\n    \\begin{enumerate}[label={},leftmargin=0in]\\item\n        \\subsection*{Solution}\n            Let $X\\sim\\mathrm{Binomial}(n=10,p=0.70)$. We want\n\n            \\[\n                \\bP(X\\ge7)=\\sum_{k=7}^{10}\\binom{10}{k}(0.70)^k(0.30)^{10-k}\\approx0.650\n            \\]\n        \\subsection*{Answer}\n\n            \\[\\boxed{\\bP(X\\ge7)=\\sum_{k=7}^{10}\\binom{10}{k}(0.70)^k(0.30)^{10-k}\\approx0.650}\\]\n    \\end{enumerate}\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W8/Q3.pdf/","title":"Q3","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W8/Q3.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    68 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W8\n        \u2514\u2500\u2500 Q3.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W8/Q3.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W8/Q3.tex/","title":"Q3","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W8/Q3.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W8\n        \u2514\u2500\u2500 Q3.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W8/Q3.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[12pt]{article}\n\n\\usepackage{graphicx}\n\\usepackage{amssymb}\n\\usepackage{amsmath}\n\\usepackage[margin=1in]{geometry}\n\\usepackage{fancyhdr}\n\\usepackage{enumerate}\n\\usepackage[shortlabels]{enumitem}\n\n\\pagestyle{fancy}\n\\fancyhead[l]{Li Yifeng}\n\\fancyhead[c]{Homework \\#8}\n\\fancyhead[r]{\\today}\n\\fancyfoot[c]{\\thepage}\n\\renewcommand{\\headrulewidth}{0.2pt}\n\\setlength{\\headheight}{15pt}\n\n\\newcommand{\\bE}{\\mathbb{E}}\n\\newcommand{\\bP}{\\mathbb{P}}\n\n\\begin{document}\n\n    \\section*{Question 3}\n\n    \\noindent In the NBA $3$-point contest the player shoots $20$ shots: $16$ normal balls ($1$ pt each), and $4$ money balls ($2$ pts each). Assume shot success probability is $0.43$.\n\n    \\bigskip\n\n    \\begin{enumerate}[start=1,label={\\bfseries Part \\arabic*:},leftmargin=0in]\n        \\bigskip\\item What is the expected value of points scored?\n\n        \\subsection*{Solution}\n\n            Let $X_1\\sim\\mathrm{Binomial}(16,0.43)$ be hits on normal balls and $X_2\\sim\\mathrm{Binomial}(4,0.43)$ hits on money balls. Total points $T = X_1 + 2X_2$, so\n\n            \\[\n                \\bE[T] = 16(0.43) + 2\\cdot4(0.43) = 6.88 + 3.44 = 10.32\n            \\]\n\n        \\subsection*{Answer}\n\n            \\[\\boxed{\\bE[T] = 10.32}\\]\n\n        \\bigskip\\item What is the standard deviation of the total points scored?\n\n        \\subsection*{Solution}\n\n            We have\n\n            \\[\n                \\begin{aligned}\n                    \\mathrm{Var}(X_1)&amp;=16\\cdot0.43\\cdot0.57\\\\\n                    \\mathrm{Var}(X_2)&amp;=4\\cdot0.43\\cdot0.57\n                \\end{aligned}\n            \\]\n\n            and since $\\mathrm{Var}(2X_2)=4\\,\\mathrm{Var}(X_2)$ and $X_1, X_2$ independent,\n\n            \\[\n                \\begin{aligned}\n                    \\mathrm{Var}(T)\n                        &amp;= 16\\cdot0.43\\cdot0.57 + 4\\times(4\\cdot0.43\\cdot0.57)\\\\\n                        &amp;= 2\\times16\\cdot0.43\\cdot0.57\\\\\n                        &amp;= 32\\cdot0.43\\cdot0.57\\\\\n                        &amp;\\approx7.843\n                \\end{aligned}\n            \\]\n\n            so\n\n            \\[\n                \\sigma_T = \\sqrt{32\\cdot0.43\\cdot0.57} \\approx 2.80\n            \\]\n\n        \\subsection*{Answer}\n\n            \\[\\boxed{\\sigma_T = \\sqrt{32\\cdot0.43\\cdot0.57}\\approx2.80}\\]\n    \\end{enumerate}\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W8/Q4.pdf/","title":"Q4","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W8/Q4.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    69 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W8\n        \u2514\u2500\u2500 Q4.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W8/Q4.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W8/Q4.tex/","title":"Q4","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W8/Q4.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W8\n        \u2514\u2500\u2500 Q4.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W8/Q4.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[12pt]{article}\n\n\\usepackage{graphicx}\n\\usepackage{amssymb}\n\\usepackage{amsmath}\n\\usepackage[margin=1in]{geometry}\n\\usepackage{fancyhdr}\n\\usepackage{enumerate}\n\\usepackage[shortlabels]{enumitem}\n\n\\pagestyle{fancy}\n\\fancyhead[l]{Li Yifeng}\n\\fancyhead[c]{Homework \\#8}\n\\fancyhead[r]{\\today}\n\\fancyfoot[c]{\\thepage}\n\\renewcommand{\\headrulewidth}{0.2pt}\n\\setlength{\\headheight}{15pt}\n\n\\newcommand{\\bE}{\\mathbb{E}}\n\\newcommand{\\bP}{\\mathbb{P}}\n\n\\begin{document}\n\n    \\section*{Question 4}\n\n    \\noindent Given the joint PMF:\n\n    \\bigskip\n\n    \\[\n    \\begin{tabular}{|c|c|c|c|}\n        \\hline\n        $     $ &amp; $X = -2$ &amp; $X = 0$ &amp; $X = 2$ \\\\ \\hline\n        $Y = 1$ &amp; $0$      &amp; $2a   $ &amp; $a    $ \\\\ \\hline\n        $Y = 2$ &amp; $2a$     &amp; $0    $ &amp; $2a   $ \\\\ \\hline\n        $Y = 4$ &amp; $a$      &amp; $2a   $ &amp; $0    $ \\\\ \\hline\n    \\end{tabular}\n    \\]\n\n    \\bigskip\n\n    \\noindent Let $S = X + Y$, $Z = X - Y$.\n\n    \\bigskip\n\n    \\begin{enumerate}[start=1,label={\\bfseries Part \\arabic*:},leftmargin=0in]\n        \\bigskip\\item Find the value of $a$ and the marginal probability density function of $X$.\n\n        \\subsection*{Solution}\n\n            Summing all entries: $(3a)+(4a)+(3a)=10a=1$, so $a=\\tfrac{1}{10}$. Marginally,\n\n            \\[\n                \\begin{aligned}\n                    P(X=-2)&amp;=3a&amp;=0.3\\\\\n                    P(X=0)&amp;=4a&amp;=0.4\\\\\n                    P(X=2)&amp;=3a&amp;=0.3\n                \\end{aligned}\n            \\]\n\n        \\subsection*{Answer}\n\n            \\[\\boxed{a=0.1,\\quad P_X(-2)=0.3,\\;P_X(0)=0.4,\\;P_X(2)=0.3}\\]\n\n        \\bigskip\\item Are $X$ and $Y$ independent?\n\n        \\subsection*{Solution}\n\n            For example, $P(X=-2,Y=1)=0\\ne P(X=-2)P(Y=1)=0.3\\cdot0.3=0.09$, so not independent.\n\n        \\subsection*{Answer}\n\n            \\[\\boxed{No.}\\]\n\n        \\bigskip\\item Compute the covariance of $S$ and $Z$.\n\n        \\subsection*{Solution}\n\n            Note $S=X+Y$, $Z=X-Y$, so\n\n            \\[\n                \\begin{aligned}\n                    \\mathrm{Cov}(S,Z)&amp;=\\mathrm{Cov}(X+Y,X-Y)\\\\\n                    &amp;=\\mathrm{Var}(X)-\\mathrm{Var}(Y)\n                \\end{aligned}\n            \\]\n\n            We have\n\n            \\[\n                \\begin{aligned}\n                    E[X]&amp;=0\\\\\n                    \\mathrm{Var}(X)&amp;=4(0.3+0.3)=2.4\\\\\n                    E[Y]&amp;=2.3\\\\\n                    \\mathrm{Var}(Y)&amp;=6.7-(2.3)^2=1.41\n                \\end{aligned}\n            \\]\n\n            Thus\n\n            \\[\n                \\mathrm{Cov}(S,Z)=2.4-1.41=0.99\n            \\]\n\n        \\subsection*{Answer}\n\n            \\[\\boxed{\\mathrm{Cov}(S,Z)=0.99}\\]\n\n        \\bigskip\\item Are $S$ and $Z$ independent?\n\n        \\subsection*{Solution}\n\n            Since $\\mathrm{Cov}(S,Z)=0.99\\ne0$, they cannot be independent.\n\n        \\subsection*{Answer}\n\n        \\[\\boxed{No.}\\]\n    \\end{enumerate}\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W9/","title":"W9","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W9/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 8 items</li> <li>Size:  231 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W9\n</code></pre> Name Type Item Size Q1 pdf / 67 KiB Q1 tex / 2 KiB Q2 pdf / 57 KiB Q2 tex / 1 KiB Q3 pdf / 38 KiB Q3 tex / 1 KiB Q4 pdf / 63 KiB Q4 tex / 2 KiB"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W9/Q1.pdf/","title":"Q1","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W9/Q1.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    67 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W9\n        \u2514\u2500\u2500 Q1.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W9/Q1.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W9/Q1.tex/","title":"Q1","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W9/Q1.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W9\n        \u2514\u2500\u2500 Q1.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W9/Q1.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[12pt]{article}\n\n\\usepackage{graphicx}\n\\usepackage{amssymb}\n\\usepackage{amsmath}\n\\usepackage[margin=1in]{geometry}\n\\usepackage{fancyhdr}\n\\usepackage{enumerate}\n\\usepackage[shortlabels]{enumitem}\n\n\\pagestyle{fancy}\n\\fancyhead[l]{Li Yifeng}\n\\fancyhead[c]{Homework \\#9}\n\\fancyhead[r]{\\today}\n\\fancyfoot[c]{\\thepage}\n\\renewcommand{\\headrulewidth}{0.2pt}\n\\setlength{\\headheight}{15pt}\n\n\\newcommand{\\bE}{\\mathbb{E}}\n\\newcommand{\\bP}{\\mathbb{P}}\n\n\\begin{document}\n\n    \\section*{Question 1}\n\n    \\noindent Calculate the entropy in bits for each of the following random variables:\n\n    \\bigskip\n\n    \\begin{enumerate}[start=1,label={\\bfseries Part \\arabic*:},leftmargin=0in]\n        \\bigskip\\item Pixel values in an image whose possible grey values are all the integers from $0$ to $255$ with uniform probability.\n\n        \\subsection*{Solution}\n\n            \\[256 = 255 - 0 + 1\\]\n\n            \\[H(X) = \\bE(I(X)) = -256 \\cdot \\frac{1}{256}\\left(log_2\\left(\\frac{1}{256}\\right)\\right) = 8 \\text{bits}\\]\n\n        \\subsection*{Answer}\n\n        \\[\\boxed{\n            H(X) = 8 \\text{bits}\n        }\\]\n\n        \\bigskip\\item Gender in a tri-sexed insect population whose three genders occur with probabilities $\\frac{1}{4}$, $\\frac{1}{4}$, and $\\frac{1}{2}$.\n\n        \\subsection*{Solution}\n\n            \\[H(X) = \\bE(I(X)) = - \\left(\n                2 \\cdot \\frac{1}{4}\\left(log_2\\left(\\frac{1}{4}\\right)\\right)\n                + \\frac{1}{2}\\left(log_2\\left(\\frac{1}{2}\\right)\\right)\n            \\right) = 1.5 \\text{bits}\\]\n\n        \\subsection*{Answer}\n\n        \\[\\boxed{\n            H(X) = 1.5 \\text{bits}\n        }\\]\n\n        \\bigskip\\item A population of persons classified by whether they are older, or not older, than the population's median age.\n\n        \\subsection*{Solution}\n\n            \\[H(X) = \\bE(I(X)) = - \\left(\n            2 \\cdot \\frac{1}{2}\\left(log_2\\left(\\frac{1}{2}\\right)\\right)\\right) = 1 \\text{bits}\\]\n\n        \\subsection*{Answer}\n\n        \\[\\boxed{H(X) = 1 \\text{bits}}\\]\n    \\end{enumerate}\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W9/Q2.pdf/","title":"Q2","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W9/Q2.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    57 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W9\n        \u2514\u2500\u2500 Q2.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W9/Q2.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W9/Q2.tex/","title":"Q2","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W9/Q2.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W9\n        \u2514\u2500\u2500 Q2.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W9/Q2.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[12pt]{article}\n\n\\usepackage{graphicx}\n\\usepackage{amssymb}\n\\usepackage{amsmath}\n\\usepackage[margin=1in]{geometry}\n\\usepackage{fancyhdr}\n\\usepackage{enumerate}\n\\usepackage[shortlabels]{enumitem}\n\n\\pagestyle{fancy}\n\\fancyhead[l]{Li Yifeng}\n\\fancyhead[c]{Homework \\#9}\n\\fancyhead[r]{\\today}\n\\fancyfoot[c]{\\thepage}\n\\renewcommand{\\headrulewidth}{0.2pt}\n\\setlength{\\headheight}{15pt}\n\n\\newcommand{\\bE}{\\mathbb{E}}\n\\newcommand{\\bP}{\\mathbb{P}}\n\n\\begin{document}\n\n    \\section*{Question 2}\n\n    \\noindent Suppose that women who live beyond the age of $80$ outnumber men in the same age group by three to one. How much information, in bits, is gained by learning that a person who lives beyond $80$ is male?\n\n    \\bigskip\n\n    \\begin{enumerate}[label={},leftmargin=0in]\\item\n        \\subsection*{Solution}\n\n            Let\n\n            \\[\n                \\begin{aligned}\n                    \\bP(W) &amp;:= \\text{probability of being a woman beyond the age of $80$}\\\\\n                    \\bP(M) &amp;:= \\text{probability of being a man beyond the age of $80$}\n                \\end{aligned}\n            \\]\n\n            Then we have\n\n            \\[\n                \\begin{aligned}\n                    \\bP(W) &amp;= \\frac{3}{4}\\\\\n                    \\bP(M) &amp;= \\frac{1}{4}\n                \\end{aligned}\n            \\]\n\n            So that\n\n            \\[\n                I(X) = -log_2(\\bP(M)) = 2 \\text{bits}\n            \\]\n\n        \\subsection*{Answer}\n\n        \\[\\boxed{I(X) = 2 \\text{bits}}\\]\n    \\end{enumerate}\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W9/Q3.pdf/","title":"Q3","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W9/Q3.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    38 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W9\n        \u2514\u2500\u2500 Q3.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W9/Q3.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W9/Q3.tex/","title":"Q3","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W9/Q3.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W9\n        \u2514\u2500\u2500 Q3.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W9/Q3.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[12pt]{article}\n\n\\usepackage{graphicx}\n\\usepackage{amssymb}\n\\usepackage{amsmath}\n\\usepackage[margin=1in]{geometry}\n\\usepackage{fancyhdr}\n\\usepackage{enumerate}\n\\usepackage[shortlabels]{enumitem}\n\n\\pagestyle{fancy}\n\\fancyhead[l]{Li Yifeng}\n\\fancyhead[c]{Homework \\#9}\n\\fancyhead[r]{\\today}\n\\fancyfoot[c]{\\thepage}\n\\renewcommand{\\headrulewidth}{0.2pt}\n\\setlength{\\headheight}{15pt}\n\n\\newcommand{\\bE}{\\mathbb{E}}\n\\newcommand{\\bP}{\\mathbb{P}}\n\n\\begin{document}\n\n    \\section*{Question 3}\n\n    \\noindent Suppose that $X$ is a random variable whose entropy $H(X)$ is $8$ bits. Suppose that $Y(X)$ is a deterministic function that takes on a different value for each value of $X$.\n\n    \\bigskip\n\n    \\begin{enumerate}[start=1,label={\\bfseries Part \\arabic*:},leftmargin=0in]\n        \\bigskip\\item What is the entropy of $Y$?\n\n        \\subsection*{Solution}\n\n            Since the values are unrelated to the info or the entropy, easy to see that\n\n            \\[H(X) = 8\\text{bits} = H(Y)\\]\n\n        \\subsection*{Answer}\n\n        \\[\\boxed{H(Y) = 8 \\text{bits}}\\]\n\n        \\bigskip\\item What is the joint entropy $H(X,Y)$?\n\n        \\subsection*{Solution}\n\n            Similarly, since both entropies are the same, we have\n\n            \\[H(X, Y) = H(X) = H(Y) = 8 \\text{bits}\\]\n\n        \\subsection*{Answer}\n\n        \\[\\boxed{H(X, Y) = 8 \\text{bits}}\\]\n    \\end{enumerate}\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W9/Q4.pdf/","title":"Q4","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W9/Q4.pdf/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    pdf</li> <li>Size:    63 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W9\n        \u2514\u2500\u2500 Q4.pdf\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W9/Q4.pdf/#preview","title":"Preview","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W9/Q4.tex/","title":"Q4","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W9/Q4.tex/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    tex</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 Homework\n    \u2514\u2500\u2500 W9\n        \u2514\u2500\u2500 Q4.tex\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/Homework/W9/Q4.tex/#preview","title":"Preview","text":"<pre><code>\\documentclass[12pt]{article}\n\n\\usepackage{graphicx}\n\\usepackage{amssymb}\n\\usepackage{amsmath}\n\\usepackage[margin=1in]{geometry}\n\\usepackage{fancyhdr}\n\\usepackage{enumerate}\n\\usepackage[shortlabels]{enumitem}\n\n\\pagestyle{fancy}\n\\fancyhead[l]{Li Yifeng}\n\\fancyhead[c]{Homework \\#9}\n\\fancyhead[r]{\\today}\n\\fancyfoot[c]{\\thepage}\n\\renewcommand{\\headrulewidth}{0.2pt}\n\\setlength{\\headheight}{15pt}\n\n\\newcommand{\\bE}{\\mathbb{E}}\n\\newcommand{\\bP}{\\mathbb{P}}\n\n\\begin{document}\n\n    \\section*{Question 4}\n\n    \\noindent An urn contains four balls numbered from $1$ to $4$. If we add a new ball with the number $4$, does the entropy associated with the extraction of a ball from the urn increase or decrease? And would it have happened if the added ball had the number $5$?\n\n    \\bigskip\n\n    \\begin{enumerate}[label={},leftmargin=0in]\\item\n        \\subsection*{Solution}\n\n            Easy to know the initial situation is that\n\n            \\[\n                H_1(I_1(X_1)) = -4 \\cdot \\frac{1}{4} \\left(log_2\\left(\\frac{1}{4}\\right)\\right) = 2 \\text{bits}\n            \\]\n\n            By adding a ball with the number $4$, we then have\n\n            \\[\n                H_2(I_2(X_2)) = - \\left(\n                    3 \\cdot \\frac{1}{5} \\left(log_2\\left(\\frac{1}{5}\\right)\\right) + 2 \\cdot \\frac{1}{5}\\left(log_2\\left(\\frac{2}{5}\\right)\\right)\n                \\right) \\approx 1.92 \\text{bits}\n            \\]\n\n            And we have the situation when we add a ball with number $5$\n\n            \\[\n                H_3(I_3(X_3)) = - 5 \\cdot \\frac{1}{5} \\left(log_2\\left(\\frac{1}{5}\\right)\\right) \\approx 2.32 \\text{bits}\n            \\]\n\n            Finally we have the conclusion\n\n            \\[\n                H_2 &lt; H_1 &lt; H_3\n            \\]\n\n        \\subsection*{Answer}\n\n        \\[\\boxed{H_2 &lt; H_1 &lt; H_3}\\]\n    \\end{enumerate}\n\n\\end{document}\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/README.md/","title":"README","text":"<p>\u2190 Back</p>"},{"location":"courses/146060_40332_BONACCORSI_Probability/README.md/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    md</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Probability\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"courses/146060_40332_BONACCORSI_Probability/README.md/#more-info","title":"More Info","text":""},{"location":"courses/146060_40332_BONACCORSI_Probability/README.md/#moodle-link","title":"Moodle Link","text":"<ul> <li>[146060] Probability - BONACCORSI</li> </ul>"},{"location":"courses/146060_40332_BONACCORSI_Probability/README.md/#textbook","title":"Textbook","text":"<ul> <li>Probability and Information: An Integrated Approach - David Applebaum - Second Edition - University of Sheffield</li> <li>Introduction to Probability and Statistics for Engineers and Scientists - Sheldon M. Ross - Sixth Edition - University of Southern California</li> </ul>"},{"location":"courses/146060_40332_BONACCORSI_Probability/README.md/#about","title":"About","text":"<ul> <li>Libre Office usage<ul> <li>LibreOffice Tutorials</li> </ul> </li> <li>Libre Office Calc usage<ul> <li>Calc Tutorials</li> </ul> </li> <li>Libre Office Math usage<ul> <li>LibreOffice Suite Math - English</li> </ul> </li> <li>Excel usage<ul> <li>Excel - Technology for Teachers and Students</li> <li>Excel Obstacle Course</li> </ul> </li> <li>LaTex usage<ul> <li>LaTeX Tutorials</li> </ul> </li> <li>LaTeX reference<ul> <li>LaTeX Documentation</li> </ul> </li> <li>KeTeX reference<ul> <li>Supported Functions \u00b7 KaTeX</li> </ul> </li> <li>Boxplot<ul> <li>Box plot generator - Desmos</li> </ul> </li> <li>Stemplot<ul> <li>Stem and Leaf Plot Generator</li> </ul> </li> <li>Quartiles<ul> <li>Quartile</li> <li>Sample Quantiles in Statistical Packages</li> </ul> </li> <li>Gini Index<ul> <li>Understanding the Gini Coefficient - A Measure of Income Inequality</li> <li>The Gini Index and Measures of Inequality - Frank A Farris - Santa Clara University</li> </ul> </li> <li>MATLAB usage<ul> <li>MATLAB Tutorials</li> </ul> </li> </ul>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/","title":"Computer Programming 2","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/#basic-info","title":"Basic Info","text":"<ul> <li>Course ID: 146062</li> <li>Professor: Marchese</li> <li> <p>Moodle</p> </li> <li> <p>Download</p> </li> </ul> Name Type Item Size Laboratories / 7 items 41 KiB README md / 1021 B"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/#more-info","title":"More Info","text":""},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/#moodle-link","title":"Moodle Link","text":"<ul> <li>[146062] Computer Programming 2 - MARCHESE</li> </ul>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/#textbook","title":"Textbook","text":"<ul> <li>Thinking in Java - Bruce Eckel - Fourth Edition</li> <li>Core Java: Fundamentals, Volume 1 - Cay Horstmann - Twelfth Edition</li> </ul>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/#about","title":"About","text":"<ul> <li>Coding Conventions<ul> <li>Java Code Conventions</li> </ul> </li> <li>Java Reference<ul> <li>Java Quick Reference</li> <li>Java Language Quick-Reference Guide</li> <li>Summary of Basic Java Syntax</li> <li>OBJECT ORIENTED PROGRAMMING IN JAVA</li> </ul> </li> </ul>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/","title":"Laboratories","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 7 items</li> <li>Size:  41 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n</code></pre> Name Type Item Size 250311 Lab01 IntelliJ and First Java App / 2 items 1 KiB 250314 Lab02 2D Circles in OOP / 3 items 6 KiB 250325 Lab03 Nested Classes / 3 items 5 KiB 250328 Lab04 Class Inheritance and Polimorphysm / 4 items 4 KiB 250408 Lab05 Reading Files and Storing into objects / 2 items 5 KiB 250411 Lab06 Collections in Action / 2 items 7 KiB 250423 Lab07 Storing and using Data Structures / 4 items 13 KiB"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250311_Lab01_IntelliJ_and_First_Java_App/","title":"250311 Lab01 IntelliJ and First Java App","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250311_Lab01_IntelliJ_and_First_Java_App/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 2 items</li> <li>Size:  1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250311 Lab01 IntelliJ and First Java App\n</code></pre> Name Type Item Size HelloWorld java / 307 B People java / 761 B"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250311_Lab01_IntelliJ_and_First_Java_App/HelloWorld.java/","title":"HelloWorld","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250311_Lab01_IntelliJ_and_First_Java_App/HelloWorld.java/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    java</li> <li>Size:    307 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250311 Lab01 IntelliJ and First Java App\n        \u2514\u2500\u2500 HelloWorld.java\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250311_Lab01_IntelliJ_and_First_Java_App/HelloWorld.java/#preview","title":"Preview","text":"<pre><code>public class HelloWorld{\n    public void print(){\n        for(int i=0; i&lt;10; i++){\n            System.out.println(\"The number is \" + i);\n        }\n    }\n    public static void main(String[] args){\n        System.out.println(\"Hello World\");\n        HelloWorld a = new HelloWorld();\n        a.print();\n    }\n}\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250311_Lab01_IntelliJ_and_First_Java_App/People.java/","title":"People","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250311_Lab01_IntelliJ_and_First_Java_App/People.java/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    java</li> <li>Size:    761 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250311 Lab01 IntelliJ and First Java App\n        \u2514\u2500\u2500 People.java\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250311_Lab01_IntelliJ_and_First_Java_App/People.java/#preview","title":"Preview","text":"<pre><code>public class People{\n    int age;\n    String name;\n\n    public People(String n, int a){\n        age = a;\n        name = n;\n    }\n    public void print(){\n        System.out.println(\"This is \" + name + \" it is \" + age + \" years old\");\n    }\n    public int getMonths(){\n        return age*12;\n    }\n    public String toString(){\n        return \"This is \" + name + \" it is \" + age + \" years old\";\n    }\n    public static void main(String[] args){\n        People friend01 = new People(\"Francis\", 34);\n        People friend02 = new People(\"Barack\", 23);\n\n        friend02.print();\n        friend01.print();\n\n        System.out.println(friend01.getMonths());\n\n        System.out.println(friend02.toString() + \" that means \" + friend02.getMonths()+ \" months\");\n    }\n}\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250314_Lab02_2D_Circles_in_OOP/","title":"250314 Lab02 2D Circles in OOP","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250314_Lab02_2D_Circles_in_OOP/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 3 items</li> <li>Size:  6 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250314 Lab02 2D Circles in OOP\n</code></pre> Name Type Item Size Circle java / 3 KiB Employee java / 2 KiB EmployeeTest java / 555 B"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250314_Lab02_2D_Circles_in_OOP/Circle.java/","title":"Circle","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250314_Lab02_2D_Circles_in_OOP/Circle.java/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    java</li> <li>Size:    3 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250314 Lab02 2D Circles in OOP\n        \u2514\u2500\u2500 Circle.java\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250314_Lab02_2D_Circles_in_OOP/Circle.java/#preview","title":"Preview","text":"<pre><code>/** This is a Class to define a Circle in 2D space\n */\npublic class Circle {\n    private String name;\n    private double x;\n    private double y;\n    private double r;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public double getX() {\n        return x;\n    }\n\n    public void setX(double x) {\n        this.x = x;\n    }\n\n    public double getY() {\n        return y;\n    }\n\n    public void setY(double y) {\n        this.y = y;\n    }\n\n    public double getR() {\n        return r;\n    }\n\n    public void setR(double r) {\n        this.r = r;\n    }\n\n    public Circle(String name, double x, double y, double r) {\n        this.x = x;\n        this.y = y;\n        this.r = r;\n        this.name = name;\n        //name.compareToIgnoreCase(str:\"camera\");\n    }\n\n    /** Compute the distance between the current circle and the Circle c2\n     *\n     * @param c2 the other circle\n     * @return the distance between the centers\n     */\n    private double centerDistance(Circle c2){\n        double dist = Math.sqrt(\n                Math.pow((this.x - c2.getX()),2) + Math.pow((this.y - c2.getY()),2)\n        );\n        return dist;\n    }\n\n    /** Checks if the current circle intersects the other\n     *\n     * @param c2 the other circle\n     * @return true/false intersection\n     */\n    public boolean isIntersecting(Circle c2){\n        double dist = this.centerDistance(c2);\n\n        if(dist &lt;= (this.r + c2.getR())){\n            return true;\n        }\n\n        return false;\n    }\n\n    /** Check if current circle is inside c2\n     *\n     * @param c2 the other circle\n     * @return true/false if the current is inside the c2\n     */\n    public boolean isInside(Circle c2){\n        double dist = this.centerDistance(c2);\n\n        if(dist &lt;= (c2.getR() - this.r)){\n            return true;\n        }\n\n        return false;\n    }\n\n    public boolean isTouching(Circle c2){\n        double dist = this.centerDistance(c2);\n\n        if(dist == (c2.getR() + this.r)){\n            return true;\n        }\n\n        return false;\n    }\n\n    public void checkAll(Circle c2){\n        System.out.println(\"intersect between \" + this.getName() + \" and \" + c2.getName() + \" is \" + this.isIntersecting(c2));\n        System.out.println(\"check for inside between \" + this.getName() + \" and \" + c2.getName() + \" is \" + this.isInside(c2));\n        System.out.println(\"check for touching between \" + this.getName() + \" and \" + c2.getName() + \" is \" + this.isTouching(c2));\n    }\n\n    @Override\n    public String toString() {\n        return \"Circle{\" +\n                \"name='\" + name + '\\'' +\n                \", x=\" + x +\n                \", y=\" + y +\n                \", r=\" + r +\n                '}';\n    }\n\n    public static void main(String[] args) {\n        Circle c1 = new Circle(\"Particle01\",0,0,1);\n        Circle c2 = new Circle(\"Particle02\",2,0,1);\n        Circle c3 = new Circle(\"Particle03\",2,2,1.3);\n        Circle c4 = new Circle(\"Particle04\",2,2,2);\n\n        System.out.println(c1);\n        System.out.println(c2);\n        System.out.println(c3);\n        System.out.println(c4);\n\n        c1.checkAll(c2);\n        c1.checkAll(c3);\n        c1.checkAll(c4);\n        c2.checkAll(c3);\n        c2.checkAll(c4);\n        c3.checkAll(c4);\n    }\n}\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250314_Lab02_2D_Circles_in_OOP/Employee.java/","title":"Employee","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250314_Lab02_2D_Circles_in_OOP/Employee.java/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    java</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250314 Lab02 2D Circles in OOP\n        \u2514\u2500\u2500 Employee.java\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250314_Lab02_2D_Circles_in_OOP/Employee.java/#preview","title":"Preview","text":"<pre><code>import java.util.Objects;\n\npublic class Employee {\n    private double salary;\n    private String lastName;\n    private String firstName;\n\n    public Employee(String firstName, String lastName, double salary) {\n        this.setSalary(salary);\n        this.setLastName(lastName);\n        this.setFirstName(firstName);\n    }\n\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public void setFirstName(String firstName) {\n        this.firstName = firstName;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n\n    public double getSalary() {\n        return salary;\n    }\n\n    public void setSalary(double salary) {\n        if(salary &lt; 0){\n            this.salary = 0;\n        }\n        else{\n            this.salary = salary;\n        }\n    }\n\n    @Override\n    public String toString() {\n        return \"Employee{\" +\n                \"salary=\" + salary +\n                \", lastName='\" + lastName + '\\'' +\n                \", firstName='\" + firstName + '\\'' +\n                '}';\n    }\n\n    public void renameLastName(String newName){\n        this.setLastName(newName);\n    }\n\n    public void renameFirstName(String newName){\n        this.setFirstName(newName);\n    }\n\n    public void rename(String newLastName, String newFirstName){\n        this.renameLastName(newLastName);\n        this.renameFirstName(newFirstName);\n    }\n\n    public void increaseSalary(double incrementValue, double incrementPercentage){\n        this.setSalary(((incrementPercentage + 1) * this.getSalary()) + incrementValue);\n    }\n\n    public boolean checkLastName(String newLastName){\n        return (Objects.equals(this.getLastName(), newLastName));\n    }\n\n    public boolean checkFirstName(String newFirstName){\n        return (Objects.equals(this.getFirstName(), newFirstName));\n    }\n\n    public boolean checkName(String newName){\n        return (this.checkLastName(newName) || this.checkFirstName(newName));\n    }\n\n    public boolean checkFullName(String newLastName, String newFirstName){\n        return (this.checkLastName(newLastName) &amp;&amp; this.checkFirstName(newFirstName));\n    }\n}\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250314_Lab02_2D_Circles_in_OOP/EmployeeTest.java/","title":"EmployeeTest","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250314_Lab02_2D_Circles_in_OOP/EmployeeTest.java/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    java</li> <li>Size:    555 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250314 Lab02 2D Circles in OOP\n        \u2514\u2500\u2500 EmployeeTest.java\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250314_Lab02_2D_Circles_in_OOP/EmployeeTest.java/#preview","title":"Preview","text":"<pre><code>public class EmployeeTest {\n    public static void main (String args[]){\n        Employee employee1=new Employee (\"Yifeng\", \"Li\", 8964.00);\n        Employee employee2=new Employee (\"Jinping\", \"Xi\", 2952.00);\n\n        System.out.println(employee1);\n        System.out.println(employee2);\n\n        employee1.increaseSalary(0, 0.1);\n        employee2.increaseSalary(0, 0.1);\n\n        System.out.println(employee1);\n        System.out.println(employee2);\n\n        System.out.println(\"Is Employee1 named Chiara: \" + employee1.checkFirstName(\"Chiara\"));\n    }\n}\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250325_Lab03_Nested_Classes/","title":"250325 Lab03 Nested Classes","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250325_Lab03_Nested_Classes/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 3 items</li> <li>Size:  5 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250325 Lab03 Nested Classes\n</code></pre> Name Type Item Size Career java / 2 KiB Exam java / 2 KiB Student java / 1 KiB"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250325_Lab03_Nested_Classes/Career.java/","title":"Career","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250325_Lab03_Nested_Classes/Career.java/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    java</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250325 Lab03 Nested Classes\n        \u2514\u2500\u2500 Career.java\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250325_Lab03_Nested_Classes/Career.java/#preview","title":"Preview","text":"<pre><code>import java.util.Arrays;\n\n/**\n * This class represent a career of a student\n * contacting a vector of Exam and\n * compute the mean of the marks\n */\npublic class Career {\n    static final int MAX_EXAM = 5;\n\n    private Exam [] listOfExams = new Exam[MAX_EXAM];\n    private int nbOfExams;\n    private float mean;\n\n    public Career() {\n        nbOfExams = 0;\n        mean = 0;\n    }\n\n    public void insertExam(Exam e) {\n        if(nbOfExams &gt;= MAX_EXAM) {\n            System.out.println(\"Hey keep calm, too much exams!!!\");\n        }\n        else {\n            listOfExams[nbOfExams] = e;\n            nbOfExams++;\n\n            /**\n             * Compute the mean mark\n             */\n            mean = 0;\n            for(int i=0; i&lt;nbOfExams; i++) {\n                mean += listOfExams[i].getMark();\n            }\n            mean /= nbOfExams;\n        }\n    }\n\n    @Override\n    public String toString() {\n        String r = \"\";\n        for(int i=0; i&lt;nbOfExams; i++) {\n            r = r + listOfExams[i] + \"\\n\";\n        }\n        return \"Career{\" + r + \"\\n the mean mark is:\" + mean + \"}\";\n    }\n\n    public static void main(String[] args) {\n        Exam e01 = new Exam();\n        Exam e02 = new Exam(\"CP2\",27,\"2025-01-03\");\n        Exam e03 = new Exam(\"CP3\",18,\"2025-02-03\");\n        Exam e04 = new Exam(\"CP4\",23,\"2025-03-03\");\n        Exam e05 = new Exam(\"CP5\",30,\"2025-05-07\");\n\n        Career myCareer = new Career();\n\n        //myCareer.insertExam(e01);\n        myCareer.insertExam(e02);\n        myCareer.insertExam(e03);\n        myCareer.insertExam(e04);\n        myCareer.insertExam(e05);\n        myCareer.insertExam(new Exam(\"CP77\",30,\"2025-02-27\"));\n\n        System.out.println(myCareer);\n    }\n}\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250325_Lab03_Nested_Classes/Exam.java/","title":"Exam","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250325_Lab03_Nested_Classes/Exam.java/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    java</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250325 Lab03 Nested Classes\n        \u2514\u2500\u2500 Exam.java\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250325_Lab03_Nested_Classes/Exam.java/#preview","title":"Preview","text":"<pre><code>import java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\n\npublic class Exam {\n    /**\n     * The mark of an exam\n     */\n    private int mark;\n    /**\n     * Course name\n     */\n    private String course;\n    /**\n     * date of the exam\n     */\n    private LocalDate dataOfExam;\n\n    public int getMark() {\n        return mark;\n    }\n\n    public void setMark(int mark) {\n        this.mark = mark;\n    }\n\n    public String getCourse() {\n        return course;\n    }\n\n    public void setCourse(String course) {\n        this.course = course;\n    }\n\n    public LocalDate getDataOfExam() {\n        return dataOfExam;\n    }\n\n    public void setDataOfExam(LocalDate dataOfExam) {\n        this.dataOfExam = dataOfExam;\n    }\n\n    public Exam() {\n        mark = 0;\n        course = \"NA\";\n        dataOfExam = LocalDate.of(1970,01,01);\n    }\n\n    public Exam(String n, int m, int year, int month, int day) {\n        mark = m;\n        course = n;\n        dataOfExam = LocalDate.of(year,month,day);\n    }\n\n    public Exam(String n, int m, String strDate) {\n        mark = m;\n        course = n;\n        DateTimeFormatter format = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n        dataOfExam = LocalDate.parse(strDate,format);\n    }\n\n    public static void main(String[] args) {\n        Exam esame01 = new Exam();\n        Exam esame02 = new Exam(\"Computer Programming 2\",30,2025,06,18);\n        Exam esame03 = new Exam(\"Service and Design\",29,\"2025-05-12\");\n\n        System.out.println(esame01);\n        System.out.println(esame02);\n        System.out.println(esame03);\n    }\n\n    @Override\n    public String toString() {\n        return \"Exam{\" +\n                \"mark=\" + mark +\n                \", course='\" + course + '\\'' +\n                \", dataOfExam=\" + dataOfExam +\n                '}';\n    }\n}\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250325_Lab03_Nested_Classes/Student.java/","title":"Student","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250325_Lab03_Nested_Classes/Student.java/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    java</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250325 Lab03 Nested Classes\n        \u2514\u2500\u2500 Student.java\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250325_Lab03_Nested_Classes/Student.java/#preview","title":"Preview","text":"<pre><code>public class Student {\n    private String name;\n    private String surname;\n    private int id;\n    private Career myCareer;\n\n    public Student(String n, String s, int id) {\n        name = n;\n        surname = s;\n        this.id = id;\n        myCareer = new Career();\n    }\n\n    public void insertExam(Exam e) {\n        myCareer.insertExam(e);\n    }\n\n    @Override\n    public String toString() {\n        return \"Student{\" +\n                \"name='\" + name + '\\'' +\n                \", surname='\" + surname + '\\'' +\n                \", id=\" + id +\n                \", myCareer=\" + myCareer +\n                '}';\n    }\n\n    public static void main(String[] args) {\n        Exam e01 = new Exam();\n        Exam e02 = new Exam(\"CP2\",27,\"2025-01-03\");\n        Exam e03 = new Exam(\"CP3\",18,\"2025-02-03\");\n        Exam e04 = new Exam(\"CP4\",23,\"2025-03-03\");\n        Exam e05 = new Exam(\"CP5\",30,\"2025-05-07\");\n\n        Student s01 = new Student(\"Gigino\",\"Gigetto\",123456);\n        s01.insertExam(e02);\n        s01.insertExam(e03);\n        s01.insertExam(e05);\n\n        System.out.println(s01);\n    }\n}\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250328_Lab04_Class_Inheritance_and_Polimorphysm/","title":"250328 Lab04 Class Inheritance and Polimorphysm","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250328_Lab04_Class_Inheritance_and_Polimorphysm/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 4 items</li> <li>Size:  4 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250328 Lab04 Class Inheritance and Polimorphysm\n</code></pre> Name Type Item Size Bike java / 2 KiB Ebike java / 724 B Rent java / 1 KiB Test java / 390 B"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250328_Lab04_Class_Inheritance_and_Polimorphysm/Bike.java/","title":"Bike","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250328_Lab04_Class_Inheritance_and_Polimorphysm/Bike.java/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    java</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250328 Lab04 Class Inheritance and Polimorphysm\n        \u2514\u2500\u2500 Bike.java\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250328_Lab04_Class_Inheritance_and_Polimorphysm/Bike.java/#preview","title":"Preview","text":"<pre><code>public class Bike {\n    /**\n     * Bike model\n     */\n    protected String model;\n    /**\n     * bike daily rate\n     */\n    protected float dailyRate;\n\n    /** global type of bike\n     *\n     */\n    public enum bikeType {\n        MTB,\n        CITY,\n        ROAD,\n        RACE\n    }\n\n    /** bike type\n     * to be chosen from the catalog before\n     */\n    protected bikeType type;\n\n    public String getModel() {\n        return model;\n    }\n\n    public void setModel(String model) {\n        this.model = model;\n    }\n\n    public float getDailyRate() {\n        return dailyRate;\n    }\n\n    public void setDailyRate(float dailyRate) {\n        this.dailyRate = dailyRate;\n    }\n\n    public bikeType getType() {\n        return type;\n    }\n\n    public void setType(bikeType type) {\n        this.type = type;\n    }\n\n    /**\n     * default constructor\n     * initialize variables in order\n     * to check if I call it by mistake\n     */\n    public Bike() {\n        dailyRate = -1;\n        model = \"NA\";\n        type = bikeType.CITY;\n    }\n\n    /** Bike constructor\n     *\n     */\n    public Bike(String m, float d, bikeType t) {\n        model = m;\n        dailyRate = d;\n        type = t;\n    }\n\n    @Override\n    public String toString() {\n//        return \"Bike{\" +\n//                \"model='\" + model + '\\'' +\n//                \", dailyRate=\" + dailyRate +\n//                \", type=\" + type +\n//                '}';\n        String r = String.format(\n                \"Bike: %-30s - DailyRate: %5.1f [Euro/day] - Type: %-4s\",\n                model,\n                dailyRate,\n                type\n                );\n        return r;\n    }\n\n    public static void main(String [] args) {\n        Bike b01 = new Bike();\n        Bike b02 = new Bike(\"Pinarello Dogma\",45,bikeType.RACE);\n        Bike b03 = new Bike(\"Graziella\",12,bikeType.CITY);\n\n        System.out.println(b01);\n        System.out.println(b02);\n        System.out.println(b03);\n    }\n}\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250328_Lab04_Class_Inheritance_and_Polimorphysm/Ebike.java/","title":"Ebike","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250328_Lab04_Class_Inheritance_and_Polimorphysm/Ebike.java/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    java</li> <li>Size:    724 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250328 Lab04 Class Inheritance and Polimorphysm\n        \u2514\u2500\u2500 Ebike.java\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250328_Lab04_Class_Inheritance_and_Polimorphysm/Ebike.java/#preview","title":"Preview","text":"<pre><code>public class Ebike extends Bike {\n    /**\n     * Additional parameter from Bike: km per charge\n     */\n    protected float kmPerCharge;\n\n    public Ebike() {\n        super();\n        kmPerCharge = -1;\n    }\n\n    public Ebike(String m, float d, bikeType t, float k){\n        super(m,d,t);\n        kmPerCharge = k;\n    }\n\n    @Override\n    public String toString() {\n        String r = String.format(\" km/Charge: %7.0f\", kmPerCharge);\n\n        return super.toString() + r;\n    }\n\n    public static void main(String[] args) {\n        Ebike eb01 = new Ebike();\n        Ebike eb02 = new Ebike(\"Pinarello Gravel performance\",80.0f,bikeType.ROAD,200.0f);\n\n        System.out.println(eb01);\n        System.out.println(eb02);\n    }\n}\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250328_Lab04_Class_Inheritance_and_Polimorphysm/Rent.java/","title":"Rent","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250328_Lab04_Class_Inheritance_and_Polimorphysm/Rent.java/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    java</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250328 Lab04 Class Inheritance and Polimorphysm\n        \u2514\u2500\u2500 Rent.java\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250328_Lab04_Class_Inheritance_and_Polimorphysm/Rent.java/#preview","title":"Preview","text":"<pre><code>import java.time.LocalDate;\nimport java.time.Period;\n\npublic class Rent {\n    private Bike bike;\n    private LocalDate dateOfRent;\n    private String renter;\n\n    public Rent(String renter, LocalDate d, Bike b) {\n        this.renter = renter;\n        dateOfRent = d;\n        bike = b;\n    }\n\n    @Override\n    public String toString() {\n        return \"Rent{\" +\n                \"bike=\" + bike +\n                \", dateOfRent=\" + dateOfRent +\n                \", renter='\" + renter + '\\'' +\n                '}';\n    }\n\n    public String returnBike(LocalDate d) {\n        /** return\n         * the number of days between d and dateOfRent\n         */\n        int days = Period.between(dateOfRent,d).getDays();\n        float charge = days * bike.getDailyRate();\n        String r = String.format(\" You rent for %d days bike: %s\\n -- You have been charged %f Euros\",days,bike.toString(),charge);\n\n        return r;\n    }\n\n    public static void main(String[] args) {\n        Rent r01 = new Rent(\n                \"George Washington\",\n                LocalDate.of(2025,3,20),\n                new Bike(\n                        \"graziella\",\n                        25,Bike.bikeType.CITY\n                        )\n                );\n\n        System.out.println(r01);\n\n        String r = r01.returnBike(LocalDate.now());\n        System.out.println(r);\n    }\n}\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250328_Lab04_Class_Inheritance_and_Polimorphysm/Test.java/","title":"Test","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250328_Lab04_Class_Inheritance_and_Polimorphysm/Test.java/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    java</li> <li>Size:    390 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250328 Lab04 Class Inheritance and Polimorphysm\n        \u2514\u2500\u2500 Test.java\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250328_Lab04_Class_Inheritance_and_Polimorphysm/Test.java/#preview","title":"Preview","text":"<pre><code>public class Test {\n    public static void main(String[] args) {\n        Bike bk01 = new Bike(\"SCOTT Performance\",60,Bike.bikeType.MTB);\n        Ebike bk02 = new Ebike(\"FOCUS\",80,Bike.bikeType.MTB,250);\n        Bike bk03 = new Ebike(\"SCOTT SuperElect\",76,Bike.bikeType.ROAD,150);\n\n        System.out.println(bk01);\n        System.out.println(bk02);\n        System.out.println(bk03);\n    }\n}\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250408_Lab05_Reading_Files_and_Storing_into_objects/","title":"250408 Lab05 Reading Files and Storing into objects","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250408_Lab05_Reading_Files_and_Storing_into_objects/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 2 items</li> <li>Size:  5 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250408 Lab05 Reading Files and Storing into objects\n</code></pre> Name Type Item Size app / 2 items 4 KiB data / 1 item 994 B"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250408_Lab05_Reading_Files_and_Storing_into_objects/app/","title":"app","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250408_Lab05_Reading_Files_and_Storing_into_objects/app/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 2 items</li> <li>Size:  4 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250408 Lab05 Reading Files and Storing into objects\n        \u2514\u2500\u2500 app\n</code></pre> Name Type Item Size People java / 1 KiB ReadAFile java / 3 KiB"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250408_Lab05_Reading_Files_and_Storing_into_objects/app/People.java/","title":"People","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250408_Lab05_Reading_Files_and_Storing_into_objects/app/People.java/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    java</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250408 Lab05 Reading Files and Storing into objects\n        \u2514\u2500\u2500 app\n            \u2514\u2500\u2500 People.java\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250408_Lab05_Reading_Files_and_Storing_into_objects/app/People.java/#preview","title":"Preview","text":"<pre><code>package app;\n\nimport java.time.LocalDate;\n\npublic class People {\n    private String name;\n    private String surname;\n    private String sex;\n    private String city;\n    private String ssn;\n    private LocalDate dateOfBirth;\n\n    public People(){\n        name = \"Not Available\";\n        dateOfBirth = LocalDate.now();\n    }\n\n    public People(String n, String surname, String sex, String c, String ssn, LocalDate d){\n        this.surname = surname;\n        this.sex = sex;\n        this.ssn = ssn;\n        name = n;\n        city = c;\n        dateOfBirth = d;\n    }\n\n    @Override\n    public String toString() {\n        String r;\n        r = String.format(\"%15s %15s %2s %10s %15s %15s\",\n                name,surname,sex,dateOfBirth,city,ssn);\n        return r;\n    }\n\n    public static void main(String[] args) {\n        People p01 = new People();\n        People p02 = new People(\"Robert\",\"Kennedy\",\"M\",\n                \"Whashington\",\n                \"KNDRBT12354677\",\n                LocalDate.of(1959,12,10)\n                );\n\n        System.out.println(p01);\n        System.out.println(p02);\n    }\n}\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250408_Lab05_Reading_Files_and_Storing_into_objects/app/ReadAFile.java/","title":"ReadAFile","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250408_Lab05_Reading_Files_and_Storing_into_objects/app/ReadAFile.java/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    java</li> <li>Size:    3 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250408 Lab05 Reading Files and Storing into objects\n        \u2514\u2500\u2500 app\n            \u2514\u2500\u2500 ReadAFile.java\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250408_Lab05_Reading_Files_and_Storing_into_objects/app/ReadAFile.java/#preview","title":"Preview","text":"<pre><code>package app;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\nimport java.time.format.DateTimeParseException;\n\npublic class ReadAFile {\n\n    public ReadAFile(String file){\n        String path = new File(file).getAbsolutePath();\n        String line = null;\n        BufferedReader bufferedReader = null;\n\n        try {\n            //Open the file\n            File csvFile = new File(path);\n            FileReader fileReader = new FileReader(csvFile, StandardCharsets.UTF_8);\n            bufferedReader = new BufferedReader(fileReader);\n\n            //read till the end of the file\n            while ((line = bufferedReader.readLine()) != null) {\n\n                // check the line is not empty\n                // break means go ahead with the next while element\n                if(line.length() ==0 ) break;\n\n               //split the line read into tokens with the defined separator\n                // that is one or more saces/tab ...\n               String[] csvLineElements = line.split(\"\\\\s+\");\n\n               //Check if the first char of first token begins with # and skip\n                // if not proceed. You need also to have at least 1 element present\n\n              if(csvLineElements[0].charAt(0) != '#' ) {\n                  //if there are 6 tokens create the object People\n                  if (csvLineElements.length == 6 ) {\n                      //ransform the String of the birthdate into LocalDate\n                      LocalDate myDate = parsedate(csvLineElements[3]);\n                      People pxx = new People(csvLineElements[0], csvLineElements[1],\n                              csvLineElements[2], csvLineElements[4], csvLineElements[5],\n                              myDate);\n\n                      System.out.println(pxx);\n                  } else {\n                      // if the number of tokens is not 6\n                      System.out.println(\" something wrong happened in reading line with :\" + line);\n                  }\n              }\n            }\n        } catch (IOException e) {\n            //if somthing was wrong in reading the file\n            System.out.println(\"Error Occured while parsing csv file.\");\n            e.printStackTrace();\n        }\n\n    }\n\n    /**\n     * Method to convert a String into a LocalDate\n     * @param s the String contaiting the date\n     * @return the LocalDate converted, or now() if an error found\n     */\n    public LocalDate parsedate(String s){\n        LocalDate myDate;\n        DateTimeFormatter format =\n                DateTimeFormatter.ofPattern(\"d/M/yyyy\");\n        try {\n            myDate = LocalDate.parse(s, format);\n        }catch (DateTimeParseException e){\n            myDate = LocalDate.now();\n        }\n           return myDate;\n    }\n\n\n    public static void main(String[] args) {\n        ReadAFile myread = new ReadAFile(\"src/data/nomi.txt\");\n    }\n}\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250408_Lab05_Reading_Files_and_Storing_into_objects/data/","title":"data","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250408_Lab05_Reading_Files_and_Storing_into_objects/data/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 1 item</li> <li>Size:  994 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250408 Lab05 Reading Files and Storing into objects\n        \u2514\u2500\u2500 data\n</code></pre> Name Type Item Size nomi txt / 994 B"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250408_Lab05_Reading_Files_and_Storing_into_objects/data/nomi.txt/","title":"nomi","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250408_Lab05_Reading_Files_and_Storing_into_objects/data/nomi.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    994 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250408 Lab05 Reading Files and Storing into objects\n        \u2514\u2500\u2500 data\n            \u2514\u2500\u2500 nomi.txt\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250408_Lab05_Reading_Files_and_Storing_into_objects/data/nomi.txt/#preview","title":"Preview","text":"<pre><code>ORY MEJIA   M   26/01/1976  ROMA    MJERYO76A26H501W\nMILO    ROBLES  M   2/1/1953    MILANO  RBLMLI53A02F205E\nELOY    KENNEDY M   30/11/1962  NAPOLI  KNNLYE62S30F839Z\nDEVON   CASE    M   4/1/1984    TORINO  CSADVN84A04L219R\nROGER   BRYAN   M   26/08/1958  PALERMO BRYRGR58M26G273P\nSTEVE   LEACH   M   9/8/1998    GENOVA  LCHSTV98M09D969N\nNEAL    MCCALL  M   20/08/1942  BOLOGNA MCCNLE42M20A944I\n#EMILE  REED    M           1/7/1997    FIRENZE RDEMLE97L01D612S\nDOMINIQUE   TORRES  M   18/08/1970  BARI    TRRDNQ70M18A662D\nRODRIGO MAYO    M   16/08/1996  CATANIA MYARRG96M16C351T\nRORY    ACEVEDO M   7/2/1967    VENEZIA CVDRRY67B07L736L\nMILO    HARDY   M   16/01/1965  VERONA  HRDMLI65A16L781I\nELOY    ARROYO  M   20/06/1959  MESSINA RRYLYE59H20F158D\nDEVON   TRAN    M   22/09/1951  PADOVA  TRNDVN51P22G224T\nROGER   HALEY   M   26/05/1995  TRIESTE HLYRGR95E26L424C\nSTEVE   STARK   M   31/07/1974  TARANTO STRSTV74L31L049B\nNEAL    SCHMIDT M   2/1/1966    BRESCIA SCHNLE66A02B157Y\nEMILE   KELLEY  M   19/03/1992  PARMA   KLLMLE92C19G337Q\nDOMINIQUE   JOHNSTON    F   7/2/1947    BRESCIA JHNDNQ47B07B157N\nRODRIGO OWENS   B   9/11/1964   PARMA   WNSRRG64S09G337H\nroberto\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250411_Lab06_Collections_in_Action/","title":"250411 Lab06 Collections in Action","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250411_Lab06_Collections_in_Action/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 2 items</li> <li>Size:  7 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250411 Lab06 Collections in Action\n</code></pre> Name Type Item Size data / 2 items 4 KiB app java / 3 KiB"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250411_Lab06_Collections_in_Action/app.java/","title":"app","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250411_Lab06_Collections_in_Action/app.java/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    java</li> <li>Size:    3 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250411 Lab06 Collections in Action\n        \u2514\u2500\u2500 app.java\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250411_Lab06_Collections_in_Action/app.java/#preview","title":"Preview","text":"<pre><code>import data.Bike;\nimport data.EBike;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.*;\n\n\npublic class app {\n    /** demonstrate Java Collection mechanism\n     *\n     * @param argv\n     */\n    public static void main(String[] argv){\n        //Create an arrayList of Bike\n        List &lt;Bike&gt; catalog = new ArrayList&lt;Bike&gt;();\n\n        catalog.add(new Bike());\n        catalog.add(new Bike( \"Pinarello\",\"scorpiom\",28,4500, Bike.bikeType.ROAD));\n        catalog.add(new Bike(\"Coppi\",\"dragon\",29,6500, Bike.bikeType.MTB));\n        catalog.add(new Bike(\"Campagnolo\",\"Marilu\",26,500, Bike.bikeType.CITYBIKE));\n        catalog.add(new Bike(\"Coppi\",\"dragon\",26,4000, Bike.bikeType.MTB));\n        catalog.add(new EBike(\"FOCUS\",\"wind\",29,5500, Bike.bikeType.EBIKE,600));\n        catalog.add(new EBike(\"GIANT\",\"ECITY\",27,4500, Bike.bikeType.EBIKE,600));\n        catalog.add(new Bike(\"Campagnolo\",\"Aldebaran\",28,500, Bike.bikeType.CITYBIKE));\n        catalog.add(new Bike( \"Pinarello\",\"Dogma2\",28,4500, Bike.bikeType.ROAD));\n        catalog.add(new Bike( \"Pinarello\",\"Dogma\",28,2500, Bike.bikeType.ROAD));\n\n\n        // shuffle the collection randomly \n        Collections.shuffle(catalog);\n        System.out.println(\"Before the sorting\");\n        for(Bike b: catalog){\n            System.out.println(b);\n        }\n\n        Collections.sort(catalog);\n\n\n        System.out.println(\"After the sorting\");\n        for (int i=0; i&lt;catalog.size(); i++){\n            System.out.println(\"Index:\"+i+\" \"+ catalog.get(i));\n        }\n\n\n        Collections.sort(catalog,\n                new Comparator&lt;Bike&gt;() {\n                    public int compare(Bike obj1, Bike obj2) {\n                        return (int) (obj1.getWheelSize()-obj2.getWheelSize());\n                    }\n                });\n\n        System.out.println(\"Sorting by wheel size\");\n        for (int i=0; i&lt;catalog.size(); i++){\n            System.out.println(\"Index:\"+i+\" \"+ catalog.get(i));\n        }\n\n        Collections.sort(catalog,\n                new Comparator&lt;Bike&gt;() {\n                    public int compare(Bike obj1, Bike obj2) {\n                        int c = (int) (obj2.getWheelSize()-obj1.getWheelSize());\n\n                        if(c != 0) return c;\n                        c = (int) (obj1.getCost()- obj2.getCost());\n                        return c;\n                    }\n                });\n\n        System.out.println(\"Sorting by wheel size (descending) and cost\");\n        for (int i=0; i&lt;catalog.size(); i++){\n            System.out.println(\"Index:\"+i+\" \"+ catalog.get(i));\n        }\n\n        Collections.sort(catalog,\n                new Comparator&lt;Bike&gt;() {\n                    public int compare(Bike obj1, Bike obj2) {\n\n                        int c = obj1.getModel().compareToIgnoreCase(obj2.getModel());\n                        if(c != 0) return c;\n                        c = (int) (obj1.getCost()- obj2.getCost());\n                        return c;\n                    }\n                });\n\n        System.out.println(\"Sorting by model and cost\");\n        for (int i=0; i&lt;catalog.size(); i++){\n            System.out.println(\"Index:\"+i+\" \"+ catalog.get(i));\n        }\n\n\n\n\n\n    }\n}\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250411_Lab06_Collections_in_Action/data/","title":"data","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250411_Lab06_Collections_in_Action/data/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 2 items</li> <li>Size:  4 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250411 Lab06 Collections in Action\n        \u2514\u2500\u2500 data\n</code></pre> Name Type Item Size Bike java / 3 KiB EBike java / 1 KiB"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250411_Lab06_Collections_in_Action/data/Bike.java/","title":"Bike","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250411_Lab06_Collections_in_Action/data/Bike.java/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    java</li> <li>Size:    3 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250411 Lab06 Collections in Action\n        \u2514\u2500\u2500 data\n            \u2514\u2500\u2500 Bike.java\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250411_Lab06_Collections_in_Action/data/Bike.java/#preview","title":"Preview","text":"<pre><code>package data;\n\npublic class Bike implements Comparable&lt;Bike&gt;{\n    protected String manufacturer;\n\n    @Override\n    public int compareTo(Bike o) {\n        /**\n         * compare the two manufacturesrs (String)\n         * the current is this.....\n         * the other is o.getMan....\n         */\n        int c = this.getManufacturer().compareTo(o.getManufacturer());\n        return -c;\n\n        //\n        // Pinarello geant\n        // PINARELLO GEANT\n    }\n\n    static public enum bikeType {\n        MTB,\n        ROAD,\n        CITYBIKE,\n        UNKNOWN,\n        EBIKE,\n    }\n    protected bikeType type;\n\n    public String getManufacturer() {\n        return manufacturer;\n    }\n\n    public void setManufacturer(String manufacturer) {\n        this.manufacturer = manufacturer;\n    }\n\n    public bikeType getType() {\n        return type;\n    }\n\n    public void setType(bikeType type) {\n        this.type = type;\n    }\n\n    public double getCost() {\n        return cost;\n    }\n\n    public void setCost(double cost) {\n        this.cost = cost;\n    }\n\n    public double getWheelSize() {\n        return wheelSize;\n    }\n\n    public void setWheelSize(double wheelSize) {\n        this.wheelSize = wheelSize;\n    }\n\n    public String getModel() {\n        return model;\n    }\n\n    public void setModel(String model) {\n        this.model = model;\n    }\n\n    protected double cost;\n    protected double wheelSize;\n    protected String model;\n\n\n    public Bike(){\n        this.cost=-1;\n        this.type= bikeType.UNKNOWN;\n        this.wheelSize=0;\n        this.manufacturer=\"NA\";\n        this.model=\"NA\";\n    }\n    public Bike(String m,String model, double ws, double c, bikeType t){\n        this.cost=c;\n        this.type= t;\n        this.wheelSize=ws;\n        this.manufacturer=m;\n        this.model=model;\n        if(t == bikeType.EBIKE){\n            this.cost=-1;\n            this.type= bikeType.UNKNOWN;\n            this.wheelSize=0;\n            this.manufacturer=\"Shouldnotarrive here\";\n            this.model=\"shoudl not be there\";\n        }\n    }\n    public String toString(){\n        return String.format(\"Bike: %15s Model %10s Type: %10s Cost: %7.2f WheelSize: %4.1f\",\n                this.manufacturer, this.getModel(),this.type.toString(), this.cost,this.wheelSize);\n\n    }\n\n\n    public static void main(String[] argv){\n\n        Bike [] catalog = {\n                new Bike(),\n                new Bike(\"Pinarello\",\"scorpiom\",28,4500,bikeType.ROAD),\n                new Bike(\"Coppi\",\"dragon\",29,6500,bikeType.MTB),\n                new Bike(\"campagnolo\",\"Marilu\",26,500,bikeType.CITYBIKE),\n                new Bike(\"Campagnolo\",\"goldfinger\",26,9500,bikeType.MTB),\n\n\n        };\n\n        System.out.println( catalog[3].compareTo(catalog[4]) );\n\n        for (Bike b:catalog){\n            System.out.println(b);\n        }\n    }\n}\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250411_Lab06_Collections_in_Action/data/EBike.java/","title":"EBike","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250411_Lab06_Collections_in_Action/data/EBike.java/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    java</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250411 Lab06 Collections in Action\n        \u2514\u2500\u2500 data\n            \u2514\u2500\u2500 EBike.java\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250411_Lab06_Collections_in_Action/data/EBike.java/#preview","title":"Preview","text":"<pre><code>package data;\n\n\npublic class EBike extends Bike  {\n    protected double batterySize;\n\n    public double getBatterySize() {\n        return batterySize;\n    }\n\n    public void setBatterySize(double batterySize) {\n        this.batterySize = batterySize;\n    }\n    public EBike(){\n        super();\n        this.batterySize=0;\n    }\n    public EBike(String m,String model, double ws, double c, bikeType t,double b){\n        super(m,model,ws,c,bikeType.UNKNOWN);\n        this.setType(t);\n        this.setBatterySize(b);\n    }\n    public String toString(){\n        return String.format(\"EBike: %15s Model %10s Type: %10s Cost: %7.2f WheelSize: %4.1f Battery: %4.0f\",\n                this.manufacturer, this.getModel(),this.type.toString(), this.cost,this.wheelSize,\n                this.batterySize);\n\n    }\n\n    public static void main(String[] argv){\n\n        Bike [] catalog = {\n                new Bike(),\n                new Bike(\"Pinarello\",\"scorpiom\",28,4500,bikeType.ROAD),\n                new Bike(\"Coppi\",\"dragon\",29,6500,bikeType.MTB),\n                new Bike(\"Campagnolo\",\"Marilu\",26,500,bikeType.CITYBIKE),\n                new Bike(\"Campagnolo\",\"goldfinger\",26,9500,bikeType.EBIKE),\n                new EBike(\"FOCUS\",\"wind\",29,12500,bikeType.EBIKE,600),\n\n\n        };\n\n        for (Bike b:catalog){\n            System.out.println(b);\n        }\n    }\n\n}\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250423_Lab07_Storing_and_using_Data_Structures/","title":"250423 Lab07 Storing and using Data Structures","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250423_Lab07_Storing_and_using_Data_Structures/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 4 items</li> <li>Size:  13 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250423 Lab07 Storing and using Data Structures\n</code></pre> Name Type Item Size consoleApp / 1 item 501 B data / 3 items 6 KiB files / 1 item 631 B model / 1 item 6 KiB"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250423_Lab07_Storing_and_using_Data_Structures/consoleApp/","title":"consoleApp","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250423_Lab07_Storing_and_using_Data_Structures/consoleApp/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 1 item</li> <li>Size:  501 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250423 Lab07 Storing and using Data Structures\n        \u2514\u2500\u2500 consoleApp\n</code></pre> Name Type Item Size StoreConsole java / 501 B"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250423_Lab07_Storing_and_using_Data_Structures/consoleApp/StoreConsole.java/","title":"StoreConsole","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250423_Lab07_Storing_and_using_Data_Structures/consoleApp/StoreConsole.java/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    java</li> <li>Size:    501 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250423 Lab07 Storing and using Data Structures\n        \u2514\u2500\u2500 consoleApp\n            \u2514\u2500\u2500 StoreConsole.java\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250423_Lab07_Storing_and_using_Data_Structures/consoleApp/StoreConsole.java/#preview","title":"Preview","text":"<pre><code>package consoleApp;\n\nimport model.*;\n\npublic class StoreConsole {\n\n    // this object is for reading the ascii file of the proce list\n    // and store in an Arraylist\n    static  ReadFile myStore;\n    // This object is for storing the logging of all the sales done\n    //static Sales logSales;\n\n    public static void main(String[] args) {\n\n        myStore = new ReadFile(\n                \"src/it/unitn/cp2/esebike/files/bike.txt\"\n        );\n        System.out.println(myStore.toString());\n\n\n    }\n\n}\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250423_Lab07_Storing_and_using_Data_Structures/data/","title":"data","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250423_Lab07_Storing_and_using_Data_Structures/data/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 3 items</li> <li>Size:  6 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250423 Lab07 Storing and using Data Structures\n        \u2514\u2500\u2500 data\n</code></pre> Name Type Item Size Bike java / 3 KiB EBike java / 2 KiB Sale java / 780 B"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250423_Lab07_Storing_and_using_Data_Structures/data/Bike.java/","title":"Bike","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250423_Lab07_Storing_and_using_Data_Structures/data/Bike.java/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    java</li> <li>Size:    3 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250423 Lab07 Storing and using Data Structures\n        \u2514\u2500\u2500 data\n            \u2514\u2500\u2500 Bike.java\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250423_Lab07_Storing_and_using_Data_Structures/data/Bike.java/#preview","title":"Preview","text":"<pre><code>package data;\n\npublic class Bike implements Comparable&lt;Bike&gt;{\n    protected String manufacturer;\n\n    public String getManufacturer() {\n        return manufacturer;\n    }\n\n    public void setManufacturer(String manufacturer) {\n        this.manufacturer = manufacturer;\n    }\n\n    public bikeType getType() {\n        return type;\n    }\n\n    public void setType(bikeType type) {\n        this.type = type;\n    }\n\n    public double getCost() {\n        return cost;\n    }\n\n    public void setCost(double cost) {\n        this.cost = cost;\n    }\n\n    public double getWheelSize() {\n        return wheelSize;\n    }\n\n    public void setWheelSize(double wheelSize) {\n        this.wheelSize = wheelSize;\n    }\n\n    public String getModel() {\n        return model;\n    }\n\n    public void setModel(String model) {\n        this.model = model;\n    }\n\n    @Override\n    public int compareTo(Bike o) {\n        return (this.getManufacturer().compareToIgnoreCase(o.getManufacturer()));\n        //  return compare(this.getCost(), o.getCost());\n    }\n\n    public static int compare(int x, int y) {\n        return x &lt; y ? -1 : (x == y ? 0 : 1);\n    }\n    public static int compare(double x, double y) {\n        return x &lt; y ? -1 : (x == y ? 0 : 1);\n    }\n\n\n    static public enum bikeType {\n        MTB,\n        ROAD,\n        CITY,\n        UNKNOWN,\n        EBIKE,\n    }\n    protected bikeType type;\n    protected double cost;\n    protected double wheelSize;\n    protected String model;\n    protected int id;\n\n\n    public Bike(){\n        this.cost=-1;\n        this.type= bikeType.UNKNOWN;\n        this.wheelSize=0;\n        this.manufacturer=\"NA\";\n        this.model=\"NA\";\n        this.id = 0;\n    }\n    public Bike(int id, String m,String model, double ws, double c, bikeType t){\n        this.cost=c;\n        this.id = id;\n        this.type= t;\n        this.wheelSize=ws;\n        this.manufacturer=m;\n        this.model=model;\n        if(t == bikeType.EBIKE){\n            this.cost=-1;\n            this.type= bikeType.UNKNOWN;\n            this.wheelSize=0;\n            this.manufacturer=\"Shouldnotarrive here\";\n            this.model=\"shoudl not be there\";\n        }\n    }\n    public String toString(){\n        return String.format(\" Bike id %4d: %10s Model %20s Type: %6s Cost: %7.2f WheelSize: %4.1f\",\n                this.id,this.manufacturer, this.getModel(),this.type.toString(), this.cost,this.wheelSize);\n\n    }\n\n//    public Bike cloneBike(){\n//        Bike bike = new Bike(  this.getId(), this.getManufacturer(),this.getModel(),\n//                this.getWheelSize(), this.getCost()\n//             , this.getType());\n//        return bike;\n//\n//    }\n\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public static void main(String[] argv){\n\n        Bike b01 = new Bike(110,\"Pinarello\",\"Dogma3\",28,6400,bikeType.ROAD);\n//        Bike b02 = b01.cloneBike();\n\n        Bike [] catalog = {\n                new Bike(),\n                new Bike(101,\"Pinarello\",\"scorpiom\",28,4500,bikeType.ROAD),\n                new Bike(102,\"Coppi\",\"dragon\",29,6500,bikeType.MTB),\n                new Bike(103,\"Campagnolo\",\"Marilu\",26,500,bikeType.CITY),\n                b01,\n//                b02\n                // new Bike(\"Campagnolo\",\"goldfinger\",26,9500,bikeType.EBIKE),\n\n\n        };\n\n\n        for (Bike b:catalog){\n            System.out.println(b);\n        }\n    }\n\n\n}\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250423_Lab07_Storing_and_using_Data_Structures/data/EBike.java/","title":"EBike","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250423_Lab07_Storing_and_using_Data_Structures/data/EBike.java/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    java</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250423 Lab07 Storing and using Data Structures\n        \u2514\u2500\u2500 data\n            \u2514\u2500\u2500 EBike.java\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250423_Lab07_Storing_and_using_Data_Structures/data/EBike.java/#preview","title":"Preview","text":"<pre><code>package data;\n\n\npublic class EBike extends Bike  {\n    protected double batterySize;\n\n    public double getBatterySize() {\n        return batterySize;\n    }\n\n    public void setBatterySize(double batterySize) {\n        this.batterySize = batterySize;\n    }\n    public EBike(){\n        super();\n        this.batterySize=0;\n    }\n    public EBike(int id, String m,String model, double ws, double c, bikeType t,double b){\n        super(id,m,model,ws,c,bikeType.UNKNOWN);\n        this.setType(t);\n        this.setBatterySize(b);\n    }\n    public String toString(){\n        return String.format(\"EBike id %4d: %10s Model %20s Type: %6s Cost: %7.2f WheelSize: %4.1f Battery: %4.0f\",\n                this.id,\n                this.manufacturer, this.getModel(),this.type.toString(), this.cost,this.wheelSize,\n                this.batterySize);\n    }\n//    public EBike cloneBike(){\n//        EBike eb01 = new EBike(this.getId(),this.getManufacturer(),this.getModel(),\n//                this.getWheelSize(),this.getCost(),this.getType(),this.getBatterySize());\n//        System.out.println(\"ClonataEBike\");\n//        return eb01;\n//    }\n\n    public static void main(String[] argv){\n\n        Bike b10 = new Bike(121,\"Campagnolo\",\"goldfinger\",26,9500,bikeType.ROAD);\n        EBike b11 = new EBike(231,\"FOCUS\",\"wind\",29,12500,bikeType.EBIKE,600);\n//        Bike b12 = b10.cloneBike();\n//        EBike b14 = b11.cloneBike();\n\n        Bike [] catalog = {\n                new Bike(),\n                new Bike(101,\"Pinarello\",\"scorpiom\",28,4500,bikeType.ROAD),\n                new Bike(131,\"Coppi\",\"dragon\",29,6500,bikeType.MTB),\n                new Bike(141,\"Campagnolo\",\"Marilu\",26,500,bikeType.CITY),\n                b10,\n                b11,\n\n//                b12,\n//                b14,\n\n\n        };\n\n        for (Bike b:catalog){\n            System.out.println(b);\n        }\n    }\n\n}\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250423_Lab07_Storing_and_using_Data_Structures/data/Sale.java/","title":"Sale","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250423_Lab07_Storing_and_using_Data_Structures/data/Sale.java/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    java</li> <li>Size:    780 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250423 Lab07 Storing and using Data Structures\n        \u2514\u2500\u2500 data\n            \u2514\u2500\u2500 Sale.java\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250423_Lab07_Storing_and_using_Data_Structures/data/Sale.java/#preview","title":"Preview","text":"<pre><code>package data;\n\nimport java.time.LocalDateTime;\n\npublic class Sale {\n    static int id0 = 1; // Initial ID, this is static so it will start from 1 each time I run the application\n    int id; // Sale Id\n    int nb; // Number of items\n    Bike bike;\n    double total; // Total amount\n    LocalDateTime ldt; //Date of sell\n\n    public Sale(int n,Bike b){\n      //provide code\n    }\n\n//    public Bike getBike(){\n//        // provide code\n//    }\n//\n//    public double getTotal() {\n//\n//        // provide code\n//    }\n\n    @Override\n    public String toString() {\n        return \"Sale{\" +\n                \"id=\" + id +\n                \", nb=\" + nb +\n                \", bike=\" + bike +\n                \", total=\" + total +\n                \", ldt=\" + ldt +\n                '}';\n    }\n}\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250423_Lab07_Storing_and_using_Data_Structures/files/","title":"files","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250423_Lab07_Storing_and_using_Data_Structures/files/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 1 item</li> <li>Size:  631 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250423 Lab07 Storing and using Data Structures\n        \u2514\u2500\u2500 files\n</code></pre> Name Type Item Size bike txt / 631 B"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250423_Lab07_Storing_and_using_Data_Structures/files/bike.txt/","title":"bike","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250423_Lab07_Storing_and_using_Data_Structures/files/bike.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    631 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250423 Lab07 Storing and using Data Structures\n        \u2514\u2500\u2500 files\n            \u2514\u2500\u2500 bike.txt\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250423_Lab07_Storing_and_using_Data_Structures/files/bike.txt/#preview","title":"Preview","text":"<pre><code>101,giant,  talon 29, mtb,29, 849\n102,giant, talon, mtb,26,749\n103,giant, fathom 29,mtb, 29,1499\n104,giant,xtc slr 29, mtb,29, 1699\n105,giant, xtc advanced 29, mtb,29,3599\n106,giant, stance 29,mtb,29,2579\n107,giant, pro 29,mtb,29,7999\n108,giant,propel sl disc ltd,road,26,7775\n109,giant,tcr advanced sl disc,road,26,11849\n110,giant, defy advanced pro,road,26,8299\n111,giant,contend sl,road,26,999\n112giant,fastroad advanced,city,26,2159\n113,giant,expressway,city,24,499\n201,giant,explore e+ pro, ebike,26,4199,625\n202,giant,explore e+,ebike,26,3099,500\n203,giant, explore e+,ebike,26,2549,400\n204,giant,reign e+ ,ebike,26,7599,750\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250423_Lab07_Storing_and_using_Data_Structures/model/","title":"model","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250423_Lab07_Storing_and_using_Data_Structures/model/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 1 item</li> <li>Size:  6 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250423 Lab07 Storing and using Data Structures\n        \u2514\u2500\u2500 model\n</code></pre> Name Type Item Size ReadFile java / 6 KiB"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250423_Lab07_Storing_and_using_Data_Structures/model/ReadFile.java/","title":"ReadFile","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250423_Lab07_Storing_and_using_Data_Structures/model/ReadFile.java/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    java</li> <li>Size:    6 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 Laboratories\n    \u2514\u2500\u2500 250423 Lab07 Storing and using Data Structures\n        \u2514\u2500\u2500 model\n            \u2514\u2500\u2500 ReadFile.java\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/Laboratories/250423_Lab07_Storing_and_using_Data_Structures/model/ReadFile.java/#preview","title":"Preview","text":"<pre><code>package model;\n\nimport data.Bike;\nimport data.EBike;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\npublic class ReadFile {\n    List&lt;Bike&gt; catalog;\n\n\n    public ReadFile(String s) {\n        // Initialize the ArrayList\n        catalog = new ArrayList&lt;Bike&gt;();\n        try {\n            //Read the file\n            read(catalog, s);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n    public ReadFile() {\n            catalog = new ArrayList&lt;Bike&gt;();\n    }\n\n    @Override\n    public String toString() {\n        String s=\"\";\n        for ( Bike b: catalog){\n            s += b+\"\\n\";\n        }\n        return s;\n    }\n\n    public Bike getElement(int i){\n\n        return catalog.get(i);\n    }\n\n    // Return the size of the catalog\n    public int getLength(){\n       return catalog.size();\n    }\n\n    /** Find an element in the list by ID\n     *\n     * @param id\n     * @return the Bike object or null\n     */\n    public Bike findElement(int id){\n        Bike b = null;\n        for (Bike i:catalog){\n            if (i.getId() == id){\n                return i;\n            }\n        }\n        return b;\n    }\n\n    public void sortWheelModel(){\n        Collections.sort(catalog, new Comparator&lt;Bike&gt;() {\n            //Sort based on ascending order of dataLimit\n            @Override\n            public int compare(Bike obj1, Bike obj2) {\n\n                int c = (int) (obj1.getWheelSize()-obj2.getWheelSize());\n                if (c != 0) return c;\n                return (int) (obj1.getModel().compareToIgnoreCase(obj2.getModel()));\n\n            }\n        });\n    }\n\n    public static String printFound(Bike a){\n        if( a == null){\n            return \"The element was not found\";\n        } else {\n            return a.toString();\n        }\n    }\n    public static void main(String[] args) throws IOException {\n        //Readfile r = new Readfile();\n\n        ReadFile r = new ReadFile(\n                \"src/it/unitn/cp2/esebike/files/bike.txt\"\n        );\n\n        System.out.println(\"\\nIteration through the list with Efor\");\n        System.out.println(r);\n\n\n        r.sortWheelModel();\n        System.out.println(\"\\nonthefly Sort: by WHEEL and modelCatalog\");\n        System.out.println(r);\n\n        System.out.println(\"For to test getElement\");\n        for(int i=0;i&lt;r.getLength();i++){\n            System.out.println(r.getElement(i));\n        }\n\n        System.out.println(\"Test search\");\n        Bike aa = r.findElement(101);\n        System.out.println(printFound(aa));\n        aa = r.findElement(202);\n        System.out.println(printFound(aa));\n        aa = r.findElement(301);\n        System.out.println(printFound(aa));\n    }\n\n\n\n    private void read(List &lt;Bike&gt; cat, String csvFilePath) throws Exception {\n\n        String line = null;\n        BufferedReader bufferedReader = null;\n\n        try {\n            String path = new File(csvFilePath).getAbsolutePath();\n            File csvFile = new File(path);\n            FileReader fileReader = new FileReader(csvFile);\n\n            bufferedReader = new BufferedReader(fileReader);\n\n            while ((line = bufferedReader.readLine()) != null) {\n\n                        String[] csvLineElements = line.split(\",\");\n//\n//                for (int i = 0; i &lt; csvLineElements.length; i++) {\n//                    System.out.print(csvLineElements[i] + \" , \");\n//                }\n//                System.out.println(\"\");\n\n                //Provide an object for storing data read\n                Bike nb;\n\n                // If the number of fields is 6 then it is a bike\n                if (csvLineElements.length == 6) {\n                    double ws = (double) Double.parseDouble(csvLineElements[4]);\n                    double c = (double) Double.parseDouble(csvLineElements[5]);\n                    int id = (int) Integer.parseInt(csvLineElements[0]);\n                    switch (csvLineElements[3].toLowerCase().trim()) {\n                        case \"road\":\n                            nb = new Bike(id, csvLineElements[1],csvLineElements[2], ws, c, Bike.bikeType.ROAD);\n                            break;\n                        case \"city\":\n                            nb = new Bike(id, csvLineElements[1],csvLineElements[2], ws, c, Bike.bikeType.CITY);\n                            break;\n                        case \"mtb\":\n                            nb = new Bike(id, csvLineElements[1], csvLineElements[2],ws, c, Bike.bikeType.MTB);\n                            break;\n                        default:\n                            nb = new Bike();\n                            break;\n                    }\n                    cat.add(nb);\n\n                }\n                // if the number of fileds is 7 then it is a EBike\n                if (csvLineElements.length == 7) {\n                    double ws = (double) Double.parseDouble(csvLineElements[4]);\n                    double c = (double) Double.parseDouble(csvLineElements[5]);\n                    double batt = (double) Double.parseDouble(csvLineElements[6]);\n                    int id = (int) Integer.parseInt(csvLineElements[0]);\n\n                    switch (csvLineElements[3].toLowerCase().trim()) {\n                        case \"ebike\":\n                            nb = new EBike(id, csvLineElements[1], csvLineElements[2],ws, c, Bike.bikeType.ROAD, batt);\n                            break;\n                        default:\n                            nb = new EBike();\n                            break;\n                    }\n                    cat.add(nb);\n                }\n            }\n        }\n        catch (IOException e) {\n            System.out.println(\"Error Occured while parsing csv file.\");\n            e.printStackTrace();\n        }\n        catch (NumberFormatException e){\n            System.out.println(\"Error Occured while parsing csv file numberformat\");\n            e.printStackTrace();\n        }\n        finally {\n            bufferedReader.close();\n        }\n\n    }\n\n\n\n\n\n}\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/README.md/","title":"README","text":"<p>\u2190 Back</p>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/README.md/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    md</li> <li>Size:    1021 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 2\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/README.md/#more-info","title":"More Info","text":""},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/README.md/#moodle-link","title":"Moodle Link","text":"<ul> <li>[146062] Computer Programming 2 - MARCHESE</li> </ul>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/README.md/#textbook","title":"Textbook","text":"<ul> <li>Thinking in Java - Bruce Eckel - Fourth Edition</li> <li>Core Java: Fundamentals, Volume 1 - Cay Horstmann - Twelfth Edition</li> </ul>"},{"location":"courses/146062_41190_MARCHESE_Computer_Programming_2/README.md/#about","title":"About","text":"<ul> <li>Coding Conventions<ul> <li>Java Code Conventions</li> </ul> </li> <li>Java Reference<ul> <li>Java Quick Reference</li> <li>Java Language Quick-Reference Guide</li> <li>Summary of Basic Java Syntax</li> <li>OBJECT ORIENTED PROGRAMMING IN JAVA</li> </ul> </li> </ul>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/","title":"Computer Programming 1","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/#basic-info","title":"Basic Info","text":"<ul> <li>Course ID: 146140</li> <li>Professor: Marchetto</li> <li> <p>Moodle</p> </li> <li> <p>Download</p> </li> </ul> Name Type Item Size Lecture 03 LAB Basic notions and concepts / 7 items 2 KiB Lecture 06 LAB Binary Representations and Operations with Exercises / 2 items 2 KiB Lecture 07 LAB Instructions Conditionals and if / 4 items 2 KiB Lecture 10 LAB Basic Concepts InputStream / 5 items 1 KiB Lecture 11 LAB Fundamental Data types and Instructions / 24 items 8 KiB Lecture 13 LAB Exercises on Functions / 6 items 3 KiB Lecture 14 LAB Exercises on Pointer and References / 11 items 7 KiB Lecture 18 LAB Exercise on Recursive Functions / 13 items 12 KiB Lecture 19 LAB More Exercises on Arrays / 10 items 9 KiB Lecture 22 LAB Exercises on Command Line / 17 items 52 KiB Lecture 23 LAB Exercises with time constraint / 2 items 2 KiB Lecture 26 LAB Strings and Command line Arguments / 27 items 10 KiB Lecture 27 LAB Contacts Management / 4 items 13 KiB Lecture 29 LAB Linked Lists / 1 item 14 KiB Lecture 30 LAB Linked Lists / 5 items 8 KiB Lecture 33 LAB Exercises on Stack and Linked Lists / 4 items 7 KiB Lecture 34 LAB Argc File Arrays List / 6 items 22 MiB Lecture 37&amp;38 LAB Exercises on Stack Queue and Linked Lists / 23 items 19 KiB Lecture 40 LAB Exercises on ADT and Makefile / 3 items 12 KiB Lecture 41 LAB Simulation / 2 items 4 KiB Lecture 43 LAB Exercises on Graphs and Trees / 15 items 10 KiB Lecture 44 LAB Basic exercises on Object Oriented / 11 items 12 KiB Lecture 45 LAB Exercises on additional Past exams / 25 items 21 KiB README md / 3 KiB"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/#more-info","title":"More Info","text":""},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/#moodle-link","title":"Moodle Link","text":"<ul> <li>[146140] Computer Programming 1 - MARCHETTO</li> </ul>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/#textbook","title":"Textbook","text":"<ul> <li>Schaum's Outline of Programming with C++ - John R. Hubbard - Second Edition</li> <li>Programming: Principle and Practice Using C++ - Bjarne Stroustrup - Second Edition</li> <li>The C++ Programming Language - Bjarne Stroustrup - Fourth Edition</li> <li>C++: The Complete Reference - Herbert Schildt - Fourth Edition</li> </ul>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/#about","title":"About","text":"<ul> <li>The Von Neumann Architecture<ul> <li>Lecture 1_xx \u2013 Computers - Adolfo Villafiorita - Universit\u00e0 di Trento</li> </ul> </li> <li>Why Binary Representations<ul> <li>Introduction to \u201cThe First Draft Report on the EDVAC\u201d - John von Neumann - University of Pennsylvania</li> </ul> </li> <li>Types of error<ul> <li>Error Messages and Debugging in C++</li> </ul> </li> <li>C++ Compact Reference<ul> <li>C++ Compact Reference - C++ Team</li> </ul> </li> <li>C++<ul> <li>C++ Programming Language</li> <li>C++ reference</li> <li>cplusplus</li> </ul> </li> <li>compiler from browser<ul> <li>C++ Shell</li> <li>Replit</li> </ul> </li> <li>Linux Filesystem<ul> <li>An introduction to Linux filesystems</li> <li>Classic SysAdmin: The Linux Filesystem Explained</li> <li>File systems</li> </ul> </li> <li>Linux (basic) commands<ul> <li>Bash Shell Reference</li> <li>An A-Z Index of the Linux command line: bash + utilities.</li> <li>Bash Guide for Beginners</li> </ul> </li> <li>common errors<ul> <li>All of Programming</li> <li>7 Common Errors in C Programming and C++ Programming</li> <li>Error Messages and Debugging in C++</li> </ul> </li> <li>Derived types<ul> <li>Derived Data Types in C++</li> <li>User Defined Data Types in C++</li> </ul> </li> <li>ASCII table<ul> <li>ASCII Table</li> </ul> </li> <li>Recursive function<ul> <li>C++ Recursion</li> </ul> </li> </ul>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_03_LAB_Basic_notions_and_concepts/","title":"Lecture 03 LAB Basic notions and concepts","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_03_LAB_Basic_notions_and_concepts/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 7 items</li> <li>Size:  2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 03 LAB Basic notions and concepts\n</code></pre> Name Type Item Size ex opt 1 cpp / 199 B ex opt 2 cpp / 260 B ex1 cpp / 272 B ex2 cpp / 228 B ex3 cpp / 395 B ex4 cpp / 231 B ex5 cpp / 294 B"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_03_LAB_Basic_notions_and_concepts/ex-opt-1.cpp/","title":"ex opt 1","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_03_LAB_Basic_notions_and_concepts/ex-opt-1.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    199 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 03 LAB Basic notions and concepts\n    \u2514\u2500\u2500 ex opt 1.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_03_LAB_Basic_notions_and_concepts/ex-opt-1.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(){\n    float r, pi = 3.14;\n    cout &lt;&lt; \"Please input radius: \";\n    cin &gt;&gt; r;\n\n    cout &lt;&lt; \"Volume = \" &lt;&lt; 4.0/3.0*pi*r*r*r &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_03_LAB_Basic_notions_and_concepts/ex-opt-2.cpp/","title":"ex opt 2","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_03_LAB_Basic_notions_and_concepts/ex-opt-2.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    260 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 03 LAB Basic notions and concepts\n    \u2514\u2500\u2500 ex opt 2.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_03_LAB_Basic_notions_and_concepts/ex-opt-2.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(){\n    int de, ds;\n    cout &lt;&lt; \"Please input dividend number and divisor number: \";\n    cin &gt;&gt; de &gt;&gt; ds;\n\n    cout &lt;&lt; \"Quotient: \" &lt;&lt; de/ds &lt;&lt; endl;\n    cout &lt;&lt; \"Remainder: \" &lt;&lt; de%ds &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_03_LAB_Basic_notions_and_concepts/ex1.cpp/","title":"ex1","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_03_LAB_Basic_notions_and_concepts/ex1.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    272 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 03 LAB Basic notions and concepts\n    \u2514\u2500\u2500 ex1.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_03_LAB_Basic_notions_and_concepts/ex1.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(){\n    float r, pi = 3.14;\n    cout &lt;&lt; \"Please input radius: \";\n    cin &gt;&gt; r;\n\n    float C = 2*pi*r;\n    float A = pi*r*r;\n\n    cout &lt;&lt; \"Circumference = \" &lt;&lt; C &lt;&lt; endl;\n    cout &lt;&lt; \"Area = \" &lt;&lt; A &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_03_LAB_Basic_notions_and_concepts/ex2.cpp/","title":"ex2","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_03_LAB_Basic_notions_and_concepts/ex2.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    228 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 03 LAB Basic notions and concepts\n    \u2514\u2500\u2500 ex2.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_03_LAB_Basic_notions_and_concepts/ex2.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(){\n    float F;\n    cout &lt;&lt; \"Please input the temperature in Fahrenheit: \";\n    cin &gt;&gt; F;\n\n    cout &lt;&lt; \"temperature in Celsius degrees: \" &lt;&lt; (F-32)/1.8 &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_03_LAB_Basic_notions_and_concepts/ex3.cpp/","title":"ex3","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_03_LAB_Basic_notions_and_concepts/ex3.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    395 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 03 LAB Basic notions and concepts\n    \u2514\u2500\u2500 ex3.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_03_LAB_Basic_notions_and_concepts/ex3.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n\nint main(){\n    string up;\n    cout &lt;&lt; \"Please input chars in uppercase: \";\n    cin &gt;&gt; up;\n\n    char c = up[0];\n    int len = 0;\n    while(c){\n        len++;\n        c = up[len];\n    }\n\n    cout &lt;&lt; \"lowercase: \";\n\n    string low[len];\n    for(int i=0; i &lt; len;i++){cout &lt;&lt; char(up[i] - ('A'-'a'));}\n\n    cout &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_03_LAB_Basic_notions_and_concepts/ex4.cpp/","title":"ex4","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_03_LAB_Basic_notions_and_concepts/ex4.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    231 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 03 LAB Basic notions and concepts\n    \u2514\u2500\u2500 ex4.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_03_LAB_Basic_notions_and_concepts/ex4.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(){\n    int h,m,s;\n    cout &lt;&lt; \"Please input hour, minute and second: \" &lt;&lt; endl;\n    cin &gt;&gt; h &gt;&gt; m &gt;&gt; s;\n\n    cout &lt;&lt; \"Current time: \" &lt;&lt; h*3600 + m*60 + s &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_03_LAB_Basic_notions_and_concepts/ex5.cpp/","title":"ex5","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_03_LAB_Basic_notions_and_concepts/ex5.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    294 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 03 LAB Basic notions and concepts\n    \u2514\u2500\u2500 ex5.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_03_LAB_Basic_notions_and_concepts/ex5.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(){\n    int t;\n    cout &lt;&lt; \"Please input current time: \";\n    cin &gt;&gt; t;\n\n    int s = t%60, m = t%3600/60, h = t/3600;\n\n    cout &lt;&lt; \"Hour: \" &lt;&lt; h &lt;&lt; endl;\n    cout &lt;&lt; \"Minute: \" &lt;&lt; m &lt;&lt; endl;\n    cout &lt;&lt; \"Second: \" &lt;&lt; s &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_06_LAB_Binary_Representations_and_Operations_with_Exercises/","title":"Lecture 06 LAB Binary Representations and Operations with Exercises","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_06_LAB_Binary_Representations_and_Operations_with_Exercises/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 2 items</li> <li>Size:  2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 06 LAB Binary Representations and Operations with Exercises\n</code></pre> Name Type Item Size exAtHome cpp / 229 B exRange cpp / 1 KiB"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_06_LAB_Binary_Representations_and_Operations_with_Exercises/exAtHome.cpp/","title":"exAtHome","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_06_LAB_Binary_Representations_and_Operations_with_Exercises/exAtHome.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    229 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 06 LAB Binary Representations and Operations with Exercises\n    \u2514\u2500\u2500 exAtHome.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_06_LAB_Binary_Representations_and_Operations_with_Exercises/exAtHome.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(){\n    int a = 16;\n    cout &lt;&lt; \"a: \" &lt;&lt; a &lt;&lt; endl;\n\n    int b = a &lt;&lt; 2;\n    cout &lt;&lt; \"a*4: \" &lt;&lt; b &lt;&lt; endl;\n\n    int c = a &gt;&gt; 1;\n    cout &lt;&lt; \"a/2: \" &lt;&lt; c &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_06_LAB_Binary_Representations_and_Operations_with_Exercises/exRange.cpp/","title":"exRange","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_06_LAB_Binary_Representations_and_Operations_with_Exercises/exRange.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 06 LAB Binary Representations and Operations with Exercises\n    \u2514\u2500\u2500 exRange.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_06_LAB_Binary_Representations_and_Operations_with_Exercises/exRange.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(){\n    cout &lt;&lt; \"unsigned int: \" &lt;&lt; sizeof(unsigned int) &lt;&lt; endl;\n    unsigned int a;\n    a = 0b00000000'00000000'00000000'00000000; cout &lt;&lt; \" - Mininum: \" &lt;&lt; a &lt;&lt; endl;\n    a = 0b11111111'11111111'11111111'11111111; cout &lt;&lt; \" - Maxinum: \" &lt;&lt; a &lt;&lt; endl;\n\n    cout &lt;&lt; \"int: \" &lt;&lt; sizeof(int) &lt;&lt; endl;\n    int b;\n    b = 0b10000000'00000000'00000000'00000000; cout &lt;&lt; \" - Mininum: \" &lt;&lt; b &lt;&lt; endl;\n    b = 0b01111111'11111111'11111111'11111111; cout &lt;&lt; \" - Maxinum: \" &lt;&lt; b &lt;&lt; endl;\n\n    cout &lt;&lt; \"unsigned short: \" &lt;&lt; sizeof(unsigned short) &lt;&lt; endl;\n    unsigned short c;\n    c = 0b00000000'00000000; cout &lt;&lt; \" - Mininum: \" &lt;&lt; c &lt;&lt; endl;\n    c = 0b11111111'11111111; cout &lt;&lt; \" - Maxinum: \" &lt;&lt; c &lt;&lt; endl;\n\n    cout &lt;&lt; \"short: \" &lt;&lt; sizeof(short) &lt;&lt; endl;\n    short d;\n    d = 0b10000000'00000000; cout &lt;&lt; \" - Mininum: \" &lt;&lt; d &lt;&lt; endl;\n    d = 0b01111111'11111111; cout &lt;&lt; \" - Maxinum: \" &lt;&lt; d &lt;&lt; endl;\n\n    cout &lt;&lt; \"unsigned long: \" &lt;&lt; sizeof(unsigned long) &lt;&lt; endl;\n    unsigned long e;\n    e = 0b00000000'00000000'00000000'00000000; cout &lt;&lt; \" - Mininum: \" &lt;&lt; e &lt;&lt; endl;\n    e = 0b11111111'11111111'11111111'11111111; cout &lt;&lt; \" - Maxinum: \" &lt;&lt; e &lt;&lt; endl;\n\n    cout &lt;&lt; \"long: \" &lt;&lt; sizeof(long) &lt;&lt; endl;\n    long f;\n    f = 0b10000000'00000000'00000000'00000000; cout &lt;&lt; \" - Mininum: \" &lt;&lt; f &lt;&lt; endl;\n    f = 0b01111111'11111111'11111111'11111111; cout &lt;&lt; \" - Maxinum: \" &lt;&lt; f &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_07_LAB_Instructions_Conditionals_and_if/","title":"Lecture 07 LAB Instructions Conditionals and if","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_07_LAB_Instructions_Conditionals_and_if/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 4 items</li> <li>Size:  2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 07 LAB Instructions Conditionals and if\n</code></pre> Name Type Item Size ex1 cpp / 563 B ex2 cpp / 695 B ex3 cpp / 292 B ex4 cpp / 345 B"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_07_LAB_Instructions_Conditionals_and_if/ex1.cpp/","title":"ex1","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_07_LAB_Instructions_Conditionals_and_if/ex1.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    563 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 07 LAB Instructions Conditionals and if\n    \u2514\u2500\u2500 ex1.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_07_LAB_Instructions_Conditionals_and_if/ex1.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;cmath&gt;\n\nint main(){\n    float a,b,c;\n    cout &lt;&lt; \"Please input a, b and c: \" &lt;&lt; endl;\n    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;\n\n    float delta = b*b - 4*a*c;\n    cout &lt;&lt; \"delta = \" &lt;&lt; delta &lt;&lt; endl;\n\n    if (delta &gt; 0){\n        cout &lt;&lt; \"x1 = \" &lt;&lt; float((-b + sqrt(delta)) / (2*a)) &lt;&lt; endl;\n        cout &lt;&lt; \"x2 = \" &lt;&lt; float((-b - sqrt(delta)) / (2*a)) &lt;&lt; endl;\n    }\n    else if (delta &lt; 0){\n        cout &lt;&lt; \"no solutions\" &lt;&lt; endl;\n    }\n    else{\n        cout &lt;&lt; \"x = \" &lt;&lt; float((-b) / (2*a)) &lt;&lt; endl;\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_07_LAB_Instructions_Conditionals_and_if/ex2.cpp/","title":"ex2","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_07_LAB_Instructions_Conditionals_and_if/ex2.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    695 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 07 LAB Instructions Conditionals and if\n    \u2514\u2500\u2500 ex2.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_07_LAB_Instructions_Conditionals_and_if/ex2.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;cmath&gt;\n\nint main(){\n    float a,b,c;\n    cout &lt;&lt; \"Please input a, b and c: \" &lt;&lt; endl;\n    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;\n\n    float delta = b*b - 4*a*c;\n    cout &lt;&lt; \"delta = \" &lt;&lt; delta &lt;&lt; endl;\n\n    if (delta &gt; 0){\n        cout &lt;&lt; \"x1 = \" &lt;&lt; float((-b + sqrt(delta)) / (2*a)) &lt;&lt; endl;\n        cout &lt;&lt; \"x2 = \" &lt;&lt; float((-b - sqrt(delta)) / (2*a)) &lt;&lt; endl;\n    }\n    else if (delta &lt; 0){\n        cout &lt;&lt; \"x1 = \" &lt;&lt; -b/(2*a) &lt;&lt; \" + \" &lt;&lt; (sqrt(delta) / (2*a)) &lt;&lt; \"i\" &lt;&lt; endl;\n        cout &lt;&lt; \"x2 = \" &lt;&lt; -b/(2*a) &lt;&lt; \" - \" &lt;&lt; (sqrt(delta) / (2*a)) &lt;&lt; \"i\" &lt;&lt; endl;\n    }\n    else{\n        cout &lt;&lt; \"x = \" &lt;&lt; float((-b) / (2*a)) &lt;&lt; endl;\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_07_LAB_Instructions_Conditionals_and_if/ex3.cpp/","title":"ex3","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_07_LAB_Instructions_Conditionals_and_if/ex3.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    292 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 07 LAB Instructions Conditionals and if\n    \u2514\u2500\u2500 ex3.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_07_LAB_Instructions_Conditionals_and_if/ex3.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(){\n    char c;\n    cout &lt;&lt; \"Please input e(English) or j(Japanese): \";\n    cin &gt;&gt; c;\n\n    switch(c){\n        case 'e': cout &lt;&lt; \"Have a nice day\" &lt;&lt; endl; break;\n        case 'j': cout &lt;&lt; \"Yoi 1-nichi o\" &lt;&lt; endl; break;\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_07_LAB_Instructions_Conditionals_and_if/ex4.cpp/","title":"ex4","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_07_LAB_Instructions_Conditionals_and_if/ex4.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    345 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 07 LAB Instructions Conditionals and if\n    \u2514\u2500\u2500 ex4.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_07_LAB_Instructions_Conditionals_and_if/ex4.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(){\n    int n=0;\n    char c;\n    cout &lt;&lt; \"is \" &lt;&lt; n &lt;&lt; \"the number you are thinking of? (0-7)(y/n): \";\n    cin &gt;&gt; c;\n\n    while(c=='n'){\n        n++;\n        cout &lt;&lt; \"is \" &lt;&lt; n &lt;&lt; \"the number you are thinking of? (0-7)(y/n): \";\n        cin &gt;&gt; c;\n    }\n\n    cout &lt;&lt; \"ez\" &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_10_LAB_Basic_Concepts_InputStream/","title":"Lecture 10 LAB Basic Concepts InputStream","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_10_LAB_Basic_Concepts_InputStream/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 5 items</li> <li>Size:  1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 10 LAB Basic Concepts InputStream\n</code></pre> Name Type Item Size ex1 cpp / 279 B ex2 cpp / 228 B ex3 cpp / 500 B ex4 cpp / 231 B ex5 cpp / 294 B"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_10_LAB_Basic_Concepts_InputStream/ex1.cpp/","title":"ex1","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_10_LAB_Basic_Concepts_InputStream/ex1.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    279 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 10 LAB Basic Concepts InputStream\n    \u2514\u2500\u2500 ex1.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_10_LAB_Basic_Concepts_InputStream/ex1.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(){\n    float r, pi = 3.14;\n    cout &lt;&lt; \"Please input radius:\" &lt;&lt; endl;\n    cin &gt;&gt; r;\n\n    float C = 2*pi*r;\n    float A = pi*r*r;\n\n    cout &lt;&lt; \"Circumference = \" &lt;&lt; C &lt;&lt; endl;\n    cout &lt;&lt; \"Area = \" &lt;&lt; A &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_10_LAB_Basic_Concepts_InputStream/ex2.cpp/","title":"ex2","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_10_LAB_Basic_Concepts_InputStream/ex2.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    228 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 10 LAB Basic Concepts InputStream\n    \u2514\u2500\u2500 ex2.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_10_LAB_Basic_Concepts_InputStream/ex2.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(){\n    float F;\n    cout &lt;&lt; \"Please input the temperature in Fahrenheit: \";\n    cin &gt;&gt; F;\n\n    cout &lt;&lt; \"temperature in Celsius degrees: \" &lt;&lt; (F-32)/1.8 &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_10_LAB_Basic_Concepts_InputStream/ex3.cpp/","title":"ex3","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_10_LAB_Basic_Concepts_InputStream/ex3.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    500 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 10 LAB Basic Concepts InputStream\n    \u2514\u2500\u2500 ex3.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_10_LAB_Basic_Concepts_InputStream/ex3.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n\nint main(){\n    string up;\n    cout &lt;&lt; \"Please input chars in uppercase: \";\n    cin &gt;&gt; up;\n\n    if(up == \"*\"){return 0;}\n\n    char c = up[0];\n    int len = 0;\n    while(c){\n        if(up[len]&gt;'Z' || up[len]&lt;'A'){cout &lt;&lt; \"error!\" &lt;&lt; endl;return 0;}\n        len++;\n        c = up[len];\n    }\n\n    cout &lt;&lt; \"lowercase: \";\n\n    string low[len];\n    for(int i=0; i &lt; len;i++){cout &lt;&lt; char(up[i] - ('A'-'a'));}\n\n    cout &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_10_LAB_Basic_Concepts_InputStream/ex4.cpp/","title":"ex4","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_10_LAB_Basic_Concepts_InputStream/ex4.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    231 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 10 LAB Basic Concepts InputStream\n    \u2514\u2500\u2500 ex4.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_10_LAB_Basic_Concepts_InputStream/ex4.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(){\n    int h,m,s;\n    cout &lt;&lt; \"Please input hour, minute and second: \" &lt;&lt; endl;\n    cin &gt;&gt; h &gt;&gt; m &gt;&gt; s;\n\n    cout &lt;&lt; \"Current time: \" &lt;&lt; h*3600 + m*60 + s &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_10_LAB_Basic_Concepts_InputStream/ex5.cpp/","title":"ex5","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_10_LAB_Basic_Concepts_InputStream/ex5.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    294 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 10 LAB Basic Concepts InputStream\n    \u2514\u2500\u2500 ex5.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_10_LAB_Basic_Concepts_InputStream/ex5.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(){\n    int t;\n    cout &lt;&lt; \"Please input current time: \";\n    cin &gt;&gt; t;\n\n    int s = t%60, m = t%3600/60, h = t/3600;\n\n    cout &lt;&lt; \"Hour: \" &lt;&lt; h &lt;&lt; endl;\n    cout &lt;&lt; \"Minute: \" &lt;&lt; m &lt;&lt; endl;\n    cout &lt;&lt; \"Second: \" &lt;&lt; s &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/","title":"Lecture 11 LAB Fundamental Data types and Instructions","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 24 items</li> <li>Size:  8 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 11 LAB Fundamental Data types and Instructions\n</code></pre> Name Type Item Size ex1 1 cpp / 794 B ex1 2 cpp / 474 B ex2 1 cpp / 292 B ex2 2 cpp / 561 B ex2 3a cpp / 238 B ex2 3b cpp / 296 B ex2 4a cpp / 200 B ex2 4b cpp / 215 B ex2 4c cpp / 395 B ex2 4d cpp / 496 B ex2 5a cpp / 237 B ex2 5b cpp / 223 B ex3 1a cpp / 197 B ex3 1b cpp / 197 B ex3 2 cpp / 329 B ex3 3 cpp / 492 B ex4 1 cpp / 481 B ex4 2 cpp / 485 B ex4 3 cpp / 211 B ex4 4 cpp / 216 B ex4 5 cpp / 338 B ex4 6 cpp / 334 B ex4 7 cpp / 251 B ex4 8 cpp / 634 B"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex1-1.cpp/","title":"ex1 1","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex1-1.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    794 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 11 LAB Fundamental Data types and Instructions\n    \u2514\u2500\u2500 ex1 1.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex1-1.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(){\n    bool a,b;\n\n    cout &lt;&lt; \"AND gate: \" &lt;&lt; endl;\n    cout &lt;&lt; \"A B output\" &lt;&lt; endl;\n\n    a=0; b=0;\n    cout &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b &lt;&lt; \" \" &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;\n    a=1; b=0;\n    cout &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b &lt;&lt; \" \" &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;\n    a=0; b=1;\n    cout &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b &lt;&lt; \" \" &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;\n    a=1; b=1;\n    cout &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b &lt;&lt; \" \" &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;\n\n    cout &lt;&lt; endl;\n\n    cout &lt;&lt; \"OR gate: \" &lt;&lt; endl;\n    cout &lt;&lt; \"A B output\" &lt;&lt; endl;\n\n    a=0; b=0;\n    cout &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b &lt;&lt; \" \" &lt;&lt; (a || b) &lt;&lt; endl;\n    a=1; b=0;\n    cout &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b &lt;&lt; \" \" &lt;&lt; (a || b) &lt;&lt; endl;\n    a=0; b=1;\n    cout &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b &lt;&lt; \" \" &lt;&lt; (a || b) &lt;&lt; endl;\n    a=1; b=1;\n    cout &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b &lt;&lt; \" \" &lt;&lt; (a || b) &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex1-2.cpp/","title":"ex1 2","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex1-2.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    474 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 11 LAB Fundamental Data types and Instructions\n    \u2514\u2500\u2500 ex1 2.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex1-2.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(){\n    bool a,b;\n\n    cout &lt;&lt; \"XOR gate: \" &lt;&lt; endl;\n    cout &lt;&lt; \"A B output\" &lt;&lt; endl;\n\n    a=0; b=0;\n    cout &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b &lt;&lt; \" \" &lt;&lt; (!(a&amp;&amp;b) &amp;&amp; (a||b)) &lt;&lt; endl;\n    a=1; b=0;\n    cout &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b &lt;&lt; \" \" &lt;&lt; (!(a&amp;&amp;b) &amp;&amp; (a||b)) &lt;&lt; endl;\n    a=0; b=1;\n    cout &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b &lt;&lt; \" \" &lt;&lt; (!(a&amp;&amp;b) &amp;&amp; (a||b)) &lt;&lt; endl;\n    a=1; b=1;\n    cout &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b &lt;&lt; \" \" &lt;&lt; (!(a&amp;&amp;b) &amp;&amp; (a||b)) &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex2-1.cpp/","title":"ex2 1","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex2-1.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    292 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 11 LAB Fundamental Data types and Instructions\n    \u2514\u2500\u2500 ex2 1.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex2-1.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(){\n    float P,I;\n    cout &lt;&lt; \"Please input the price: \";\n    cin &gt;&gt; P;\n    cout &lt;&lt; \"Please input the vat: \";\n    cin &gt;&gt; I;\n\n    float CP = P + (P*I)/100;\n\n    cout.precision(5);\n    cout &lt;&lt; \"customer price: \" &lt;&lt; CP &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex2-2.cpp/","title":"ex2 2","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex2-2.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    561 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 11 LAB Fundamental Data types and Instructions\n    \u2514\u2500\u2500 ex2 2.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex2-2.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;cmath&gt;\n\nint main(){\n    float a,b,c;\n    cout &lt;&lt; \"Please input a, b and c: \" &lt;&lt; endl;\n    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;\n\n    float delta = b*b - 4*a*c;\n    cout &lt;&lt; \"delta = \" &lt;&lt; delta &lt;&lt; endl;\n\n    if (delta &gt; 0){\n        cout &lt;&lt; \"x1 = \" &lt;&lt; float((-b + sqrt(delta)) / (2*a)) &lt;&lt; endl;\n        cout &lt;&lt; \"x2 = \" &lt;&lt; float((-b - sqrt(delta)) / (2*a)) &lt;&lt; endl;\n    }\n    else if (delta &lt; 0){\n        cout &lt;&lt; \"no solutions\" &lt;&lt; endl;\n    }\n    else{\n        cout &lt;&lt; \"x = \" &lt;&lt; float((-b) / 2*a) &lt;&lt; endl;\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex2-3a.cpp/","title":"ex2 3a","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex2-3a.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    238 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 11 LAB Fundamental Data types and Instructions\n    \u2514\u2500\u2500 ex2 3a.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex2-3a.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(){\n    char ci;\n    cout &lt;&lt; \"Please input a character: \";\n    cin &gt;&gt; ci;\n\n    cout &lt;&lt; \"plus 10: \" &lt;&lt; char(ci+10) &lt;&lt; endl;\n    cout &lt;&lt; \"minus 10: \" &lt;&lt; char(ci-10) &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex2-3b.cpp/","title":"ex2 3b","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex2-3b.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    296 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 11 LAB Fundamental Data types and Instructions\n    \u2514\u2500\u2500 ex2 3b.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex2-3b.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(){\n    char ci;\n    cout &lt;&lt; \"Please input a character: \";\n    cin &gt;&gt; ci;\n\n    int v;\n    cout &lt;&lt; \"Please input a variant: \";\n    cin &gt;&gt; v;\n\n    cout &lt;&lt; \"plus: \" &lt;&lt; char(ci+v) &lt;&lt; endl;\n    cout &lt;&lt; \"minus: \" &lt;&lt; char(ci-v) &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex2-4a.cpp/","title":"ex2 4a","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex2-4a.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    200 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 11 LAB Fundamental Data types and Instructions\n    \u2514\u2500\u2500 ex2 4a.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex2-4a.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(){\n    char ci;\n    cout &lt;&lt; \"Please input a character: \";\n    cin &gt;&gt; ci;\n\n    cout &lt;&lt; \"uppercase: \" &lt;&lt; char(ci + ('A'-'a')) &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex2-4b.cpp/","title":"ex2 4b","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex2-4b.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    215 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 11 LAB Fundamental Data types and Instructions\n    \u2514\u2500\u2500 ex2 4b.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex2-4b.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;cctype&gt;\n\nint main(){\n    char ci;\n    cout &lt;&lt; \"Please input a character: \";\n    cin &gt;&gt; ci;\n\n    cout &lt;&lt; \"uppercase: \" &lt;&lt; char(toupper(ci)) &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex2-4c.cpp/","title":"ex2 4c","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex2-4c.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    395 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 11 LAB Fundamental Data types and Instructions\n    \u2514\u2500\u2500 ex2 4c.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex2-4c.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n\nint main(){\n    string up;\n    cout &lt;&lt; \"Please input chars in lowercase: \";\n    cin &gt;&gt; up;\n\n    char c = up[0];\n    int len = 0;\n    while(c){\n        len++;\n        c = up[len];\n    }\n\n    cout &lt;&lt; \"uppercase: \";\n\n    string low[len];\n    for(int i=0; i &lt; len;i++){cout &lt;&lt; char(up[i] + ('A'-'a'));}\n\n    cout &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex2-4d.cpp/","title":"ex2 4d","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex2-4d.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    496 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 11 LAB Fundamental Data types and Instructions\n    \u2514\u2500\u2500 ex2 4d.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex2-4d.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n\nint main(){\n    string up;\n    cout &lt;&lt; \"Please input chars in lowercase: \";\n    cin &gt;&gt; up;\n\n    char c = up[0];\n    int len = 0;\n    while(c){\n        len++;\n        c = up[len];\n    }\n\n    cout &lt;&lt; \"uppercase: \";\n\n    string low[len];\n    for(int i=0; i &lt; len;i++){\n        if (((up[i] + ('A'-'a')) &lt; 'Z') &amp;&amp; ((up[i] + ('A'-'a')) &gt; 'A')){\n            cout &lt;&lt; char(up[i] + ('A'-'a'));\n        }\n    }\n\n    cout &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex2-5a.cpp/","title":"ex2 5a","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex2-5a.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    237 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 11 LAB Fundamental Data types and Instructions\n    \u2514\u2500\u2500 ex2 5a.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex2-5a.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(){\n    int a,b;\n    cout &lt;&lt; \"Please input two variables: \" &lt;&lt; endl;\n    cin &gt;&gt; a &gt;&gt; b;\n\n    int t = a; a = b; b = t;\n\n    cout &lt;&lt; \"Exchanges: \" &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex2-5b.cpp/","title":"ex2 5b","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex2-5b.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    223 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 11 LAB Fundamental Data types and Instructions\n    \u2514\u2500\u2500 ex2 5b.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex2-5b.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(){\n    int a,b;\n    cout &lt;&lt; \"Please input two variables: \" &lt;&lt; endl;\n    cin &gt;&gt; a &gt;&gt; b;\n\n    swap(a,b);\n\n    cout &lt;&lt; \"Exchanges: \" &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex3-1a.cpp/","title":"ex3 1a","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex3-1a.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    197 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 11 LAB Fundamental Data types and Instructions\n    \u2514\u2500\u2500 ex3 1a.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex3-1a.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(){\n    bool P,Q;\n\n    cout &lt;&lt; \"Please input the bool value of P and Q: \" &lt;&lt; endl;\n    cin &gt;&gt; P &gt;&gt; Q;\n\n    cout &lt;&lt; \"P-&gt;Q: \" &lt;&lt; (!P || Q) &lt;&lt; endl;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex3-1b.cpp/","title":"ex3 1b","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex3-1b.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    197 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 11 LAB Fundamental Data types and Instructions\n    \u2514\u2500\u2500 ex3 1b.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex3-1b.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(){\n    bool P,Q;\n\n    cout &lt;&lt; \"Please input the bool value of P and Q: \" &lt;&lt; endl;\n    cin &gt;&gt; P &gt;&gt; Q;\n\n    cout &lt;&lt; \"P-&gt;Q: \" &lt;&lt; (!P || Q) &lt;&lt; endl;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex3-2.cpp/","title":"ex3 2","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex3-2.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    329 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 11 LAB Fundamental Data types and Instructions\n    \u2514\u2500\u2500 ex3 2.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex3-2.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;cmath&gt;\n\nint main(){\n    float i;\n    cout &lt;&lt; \"Please input a value: \";\n    cin &gt;&gt; i;\n\n    cout &lt;&lt; \"1: \" &lt;&lt; abs(i) &lt;&lt; endl;\n\n    if (i&gt;=0) {cout &lt;&lt; \"2: \" &lt;&lt; i &lt;&lt; endl;}\n    else {cout &lt;&lt; \"2: \" &lt;&lt; -i &lt;&lt; endl;}\n\n    cout &lt;&lt; \"3: \" &lt;&lt; float((i&gt;=0)?i:-i) &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex3-3.cpp/","title":"ex3 3","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex3-3.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    492 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 11 LAB Fundamental Data types and Instructions\n    \u2514\u2500\u2500 ex3 3.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex3-3.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;cmath&gt;\n\nint main(){\n    float a,b;\n    cout &lt;&lt; \"Please input a and b: \" &lt;&lt; endl;\n    cin &gt;&gt; a &gt;&gt; b;\n\n    cout &lt;&lt; \"1) max: \" &lt;&lt; max(a,b) \n        &lt;&lt; \" &amp; min: \" &lt;&lt; min(a,b) &lt;&lt; endl;\n\n    if(a&gt;=b){cout &lt;&lt; \"2) max: \" &lt;&lt; a \n        &lt;&lt; \" &amp; min: \" &lt;&lt; b &lt;&lt; endl;}\n    else{cout &lt;&lt; \"2) max: \" &lt;&lt; b \n        &lt;&lt; \" &amp; min: \" &lt;&lt; a &lt;&lt; endl;}\n\n    cout &lt;&lt; \"3) max: \" &lt;&lt; float((a&gt;=b)?a:b) \n        &lt;&lt; \" &amp; min: \" &lt;&lt; float((a&gt;=b)?b:a) &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex4-1.cpp/","title":"ex4 1","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex4-1.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    481 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 11 LAB Fundamental Data types and Instructions\n    \u2514\u2500\u2500 ex4 1.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex4-1.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(){\n    int n;\n    cout &lt;&lt; \"Please input n: \";\n    cin &gt;&gt; n;\n\n    float F0=0,F1=1;\n\n    if(n&lt;=1){\n        if(n==0){cout &lt;&lt; \"Fn = \" &lt;&lt; F0 &lt;&lt; endl;}\n        else{cout &lt;&lt; \"Fn = \" &lt;&lt; F1 &lt;&lt; endl;}\n    }\n    else{\n        for(int i=1; i&lt;=(n/2); i++){\n            F0 += F1;\n            F1 += F0;\n        }\n        if(n%2==1){cout &lt;&lt; \"Fn = \" &lt;&lt; float(F0+F1) &lt;&lt; endl;}\n        else{cout &lt;&lt; \"Fn = \" &lt;&lt; F1 &lt;&lt; endl;}\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex4-2.cpp/","title":"ex4 2","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex4-2.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    485 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 11 LAB Fundamental Data types and Instructions\n    \u2514\u2500\u2500 ex4 2.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex4-2.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(){\n    int bi;\n    cout &lt;&lt; \"Please input a binary number: \";\n    cin &gt;&gt; bi;\n\n    int len = 0;\n    int judge = 1;\n    while(1){\n        if(judge &lt;= bi &amp;&amp; bi &lt; judge*10){break;}\n        judge *= 10;\n        len++;\n    }\n\n    int de = 0;\n    int power = 1, re = 10;\n    for(int i=0; i&lt;=len; i++){\n        de += (bi-(bi/re)*re)/(re/10)*power;\n        power*=2; re*=10;\n    }\n\n    cout &lt;&lt; \"Decimal number: \" &lt;&lt; de &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex4-3.cpp/","title":"ex4 3","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex4-3.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    211 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 11 LAB Fundamental Data types and Instructions\n    \u2514\u2500\u2500 ex4 3.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex4-3.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(){\n    for(int i='a'; i&lt;='z'; i++){cout &lt;&lt; char(i) &lt;&lt; \": \" &lt;&lt; i &lt;&lt; endl;}\n    for(int i='A'; i&lt;='Z'; i++){cout &lt;&lt; char(i) &lt;&lt; \": \" &lt;&lt; i &lt;&lt; endl;}\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex4-4.cpp/","title":"ex4 4","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex4-4.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    216 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 11 LAB Fundamental Data types and Instructions\n    \u2514\u2500\u2500 ex4 4.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex4-4.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(){\n    int a,b;\n    cout &lt;&lt; \"Please input a and b: \" &lt;&lt; endl;\n    cin &gt;&gt; a &gt;&gt; b;\n\n    for(int i=a; i&lt;=b; i++){cout &lt;&lt; char(i) &lt;&lt; \": \" &lt;&lt; i &lt;&lt; endl;}\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex4-5.cpp/","title":"ex4 5","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex4-5.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    338 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 11 LAB Fundamental Data types and Instructions\n    \u2514\u2500\u2500 ex4 5.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex4-5.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(){\n    int A;\n    cout &lt;&lt; \"Please input A: \";\n    cin &gt;&gt; A;\n\n    for(int i=0; i&lt;A; i++){\n        for(int j=0; j&lt;(A-i-1); j++){cout &lt;&lt; \" \";}\n        for(int j=0; j&lt;(i*2+1); j++){cout &lt;&lt; \"*\";}\n        for(int j=0; j&lt;(A-i-1); j++){cout &lt;&lt; \" \";}\n\n        cout &lt;&lt; endl;\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex4-6.cpp/","title":"ex4 6","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex4-6.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    334 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 11 LAB Fundamental Data types and Instructions\n    \u2514\u2500\u2500 ex4 6.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex4-6.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(){\n    int r = rand()%10+1;\n    int i;\n\n    while(1){\n        cout &lt;&lt; \"Please guess the number (1-10): \";\n        cin &gt;&gt; i;\n\n        if(i==r){cout &lt;&lt; \"Guessd\" &lt;&lt; endl;break;}\n        else if (i&lt;r){cout &lt;&lt; \"Small\" &lt;&lt; endl;}\n        else {cout &lt;&lt; \"Big\" &lt;&lt; endl;}\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex4-7.cpp/","title":"ex4 7","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex4-7.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    251 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 11 LAB Fundamental Data types and Instructions\n    \u2514\u2500\u2500 ex4 7.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex4-7.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(){\n    int N;\n    cout &lt;&lt; \"Please input N: \";\n    cin &gt;&gt; N;\n\n    float result=0;\n    for(int i=1; i&lt;=N; i++){result += float(1.0/float(i));}\n\n    cout &lt;&lt; \"Result: \" &lt;&lt; result &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex4-8.cpp/","title":"ex4 8","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex4-8.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    634 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 11 LAB Fundamental Data types and Instructions\n    \u2514\u2500\u2500 ex4 8.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_11_LAB_Fundamental_Data_types_and_Instructions/ex4-8.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;cmath&gt;\n\nint find(int a){\n    for(int j=2;j&lt;a;j++){\n        for(int k=2;k&lt;a;k++){\n            if(a==j*k){return 0;}\n        }\n    }\n    return 1;\n}\n\nint main(){\n    int i;\n    cout &lt;&lt; \"Please input a number: \";\n    cin &gt;&gt; i;\n\n    bool judge = true;\n    for(int j=2;j&lt;=i;j++){\n        if(find(j)){\n            for(int k=2;k&lt;=i;k++){\n                if(find(k)){\n                    if(i==j+k){cout &lt;&lt; \"Input: \" &lt;&lt; i &lt;&lt; \" =&gt; Output: \" &lt;&lt; j &lt;&lt; \" + \" &lt;&lt; k &lt;&lt; endl;judge=false;}\n                }\n            }\n        }\n    }\n\n    if(judge){cout &lt;&lt; \"None sorry\" &lt;&lt; endl;}\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_13_LAB_Exercises_on_Functions/","title":"Lecture 13 LAB Exercises on Functions","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_13_LAB_Exercises_on_Functions/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 6 items</li> <li>Size:  3 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 13 LAB Exercises on Functions\n</code></pre> Name Type Item Size ex1 cpp / 366 B ex2 cpp / 675 B ex3 cpp / 643 B ex4 cpp / 449 B ex5 cpp / 190 B ex6 cpp / 401 B"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_13_LAB_Exercises_on_Functions/ex1.cpp/","title":"ex1","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_13_LAB_Exercises_on_Functions/ex1.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    366 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 13 LAB Exercises on Functions\n    \u2514\u2500\u2500 ex1.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_13_LAB_Exercises_on_Functions/ex1.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nbool checkLowercase(char);\n\nint main(){\n    char i;\n    cout &lt;&lt; \"Please input a lowercase character: \";\n    cin &gt;&gt; i;\n\n    if (checkLowercase(i)){cout &lt;&lt; \"uppercase: \" &lt;&lt; char(i+('A'-'a')) &lt;&lt; endl;}\n    else {cout &lt;&lt; \"No lowercase detacted\" &lt;&lt; endl;}\n\n    return 0;\n}\n\nbool checkLowercase(char i){return (i&lt;='z' &amp;&amp; i&gt;='a');}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_13_LAB_Exercises_on_Functions/ex2.cpp/","title":"ex2","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_13_LAB_Exercises_on_Functions/ex2.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    675 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 13 LAB Exercises on Functions\n    \u2514\u2500\u2500 ex2.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_13_LAB_Exercises_on_Functions/ex2.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;cctype&gt;\n\nbool checkLowercase1(char);\n\nbool checkLowercase2(char);\n\nint main(){\n    char i;\n    cout &lt;&lt; \"Please input a lowercase character: \";\n    cin &gt;&gt; i;\n\n    cout &lt;&lt; \"1: \";\n    if (checkLowercase1(i)){\n        cout &lt;&lt; \"uppercase: \" &lt;&lt; char(i+('A'-'a')) &lt;&lt; endl;}\n    else {\n        cout &lt;&lt; \"No lowercase detacted\" &lt;&lt; endl;}\n\n    cout &lt;&lt; \"2: \";\n    if (checkLowercase2(i)){\n        cout &lt;&lt; \"uppercase: \" &lt;&lt; char(toupper(i)) &lt;&lt; endl;}\n    else {\n        cout &lt;&lt; \"No lowercase detacted\" &lt;&lt; endl;}\n\n    return 0;\n}\n\nbool checkLowercase1(char i){return (i&lt;='z' &amp;&amp; i&gt;='a');}\n\nbool checkLowercase2(char i){return (islower(i));}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_13_LAB_Exercises_on_Functions/ex3.cpp/","title":"ex3","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_13_LAB_Exercises_on_Functions/ex3.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    643 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 13 LAB Exercises on Functions\n    \u2514\u2500\u2500 ex3.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_13_LAB_Exercises_on_Functions/ex3.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint len(int);\n\nint revert(int,int);\n\nint main(){\n    int num;\n    cout &lt;&lt; \"Please input a number: \";\n    cin &gt;&gt; num;\n\n    cout &lt;&lt; \"Revert: \" &lt;&lt; revert(len(num),num) &lt;&lt; endl;\n\n    return 0;\n}\n\nint len(int num){\n    if(num == 0){return 1;}\n\n    int i=1,len=0;\n    while(true){\n        if(num &lt; i){return len;}\n        else {\n            i*=10;\n            len++;}\n    }\n}\n\nint revert(int len,int num){\n    int d1=1,d2=1;\n    for(int i=1; i&lt;len; i++){d1*=10;}\n\n    int res=0;\n    for(int i=0; i&lt;len; i++){\n        res += ((num%(d1*10)/d1)*d2);\n        d1 /= 10;\n        d2 *= 10;\n    }\n\n    return res;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_13_LAB_Exercises_on_Functions/ex4.cpp/","title":"ex4","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_13_LAB_Exercises_on_Functions/ex4.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    449 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 13 LAB Exercises on Functions\n    \u2514\u2500\u2500 ex4.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_13_LAB_Exercises_on_Functions/ex4.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;cstdlib&gt;\n\nint main(){\n    int dice[10] = {0},num = 0;\n    srand(time(NULL));\n    for(int i=0; i&lt;10; i++){\n        dice[i] = rand() % 6 + 1;\n        if(dice[i]==1){num++;}\n    }\n\n    int guess;\n    cout &lt;&lt; \"Please guess how many 1 are there (0-10):\";\n    cin &gt;&gt; guess;\n\n    if(guess==num){cout &lt;&lt; \"Congrats!\" &lt;&lt; endl;}\n    else{cout &lt;&lt; \"No, the correct answer is: \" &lt;&lt; num &lt;&lt; endl;}\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_13_LAB_Exercises_on_Functions/ex5.cpp/","title":"ex5","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_13_LAB_Exercises_on_Functions/ex5.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    190 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 13 LAB Exercises on Functions\n    \u2514\u2500\u2500 ex5.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_13_LAB_Exercises_on_Functions/ex5.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(){\n    srand(time(NULL));\n    int r = rand()%6+1;\n    cout &lt;&lt; ((r&gt;rand()%6+12)?\"Player 1 wins!\":\"Player 2 wins!\") &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_13_LAB_Exercises_on_Functions/ex6.cpp/","title":"ex6","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_13_LAB_Exercises_on_Functions/ex6.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    401 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 13 LAB Exercises on Functions\n    \u2514\u2500\u2500 ex6.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_13_LAB_Exercises_on_Functions/ex6.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n\nint main(){\n    srand(time(NULL));\n    int r11=rand()%6+1,r12=rand()%6+1,r21=rand()%6+1,r22=rand()%6+1;\n    cout &lt;&lt; (((max(r11,r12)&gt;max(r21,r22))?1:0)?\"Highest: Attacker wins!\":\"Highest: Defender wins!\") &lt;&lt; endl;\n    cout &lt;&lt; (((min(r11,r12)&gt;min(r21,r22))?1:0)?\"Lowest:  Attacker wins!\":\"Lowest:  Defender wins!\") &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_14_LAB_Exercises_on_Pointer_and_References/","title":"Lecture 14 LAB Exercises on Pointer and References","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_14_LAB_Exercises_on_Pointer_and_References/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 11 items</li> <li>Size:  7 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 14 LAB Exercises on Pointer and References\n</code></pre> Name Type Item Size ex01 cpp / 432 B ex02 cpp / 432 B ex03 cpp / 561 B ex04 cpp / 398 B ex05 cpp / 548 B ex06 cpp / 738 B ex07 cpp / 502 B ex08 1 cpp / 845 B ex08 2 cpp / 832 B ex09 cpp / 958 B ex10 cpp / 426 B"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_14_LAB_Exercises_on_Pointer_and_References/ex01.cpp/","title":"ex01","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_14_LAB_Exercises_on_Pointer_and_References/ex01.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    432 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 14 LAB Exercises on Pointer and References\n    \u2514\u2500\u2500 ex01.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_14_LAB_Exercises_on_Pointer_and_References/ex01.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;cmath&gt;\n\nfloat computeSum(int);\n\nfloat computePi(float);\n\nint main(){\n    int N;\n    cout &lt;&lt; \"Please input the precision:\";\n    cin &gt;&gt; N;\n\n    cout &lt;&lt; \"Pi = \" &lt;&lt; computePi(computeSum(N)) &lt;&lt; endl;\n\n    return 0;\n}\n\nfloat computeSum(int N){\n    float res = 0;\n    for(int i=1; i&lt;=N; i++){res += (1.0/float(i*i));}\n\n    return res;\n}\n\nfloat computePi(float sum){return (sqrt(sum*6));}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_14_LAB_Exercises_on_Pointer_and_References/ex02.cpp/","title":"ex02","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_14_LAB_Exercises_on_Pointer_and_References/ex02.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    432 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 14 LAB Exercises on Pointer and References\n    \u2514\u2500\u2500 ex02.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_14_LAB_Exercises_on_Pointer_and_References/ex02.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nbool islower(char);\n\nvoid toupper(char&amp;);\n\nint main(){\n    char c;\n    cout &lt;&lt; \"Please input a character with lowercase: \";\n    cin &gt;&gt; c;\n\n    if(islower(c)){\n        toupper(c);\n        cout &lt;&lt; \"Uppercase: \" &lt;&lt; c &lt;&lt; endl;\n    }\n    else {cout &lt;&lt; \"None\" &lt;&lt; endl;}\n\n    return 0;\n}\n\nbool islower(char c){return ((c &lt;= 'z' &amp;&amp; c &gt;= 'a')? true: false);}\n\nvoid toupper(char&amp; c){c += ('A'-'a');}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_14_LAB_Exercises_on_Pointer_and_References/ex03.cpp/","title":"ex03","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_14_LAB_Exercises_on_Pointer_and_References/ex03.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    561 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 14 LAB Exercises on Pointer and References\n    \u2514\u2500\u2500 ex03.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_14_LAB_Exercises_on_Pointer_and_References/ex03.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nvoid computeNum(int&amp;,int[]);\n\nint main(){\n    int dice[10] = {0};\n    srand(time(NULL));\n    for(int i=0; i&lt;10; i++){dice[i] = rand() % 6 + 1;}\n\n    int guess;\n    cout &lt;&lt; \"Please guess how many 1 are there (0-10):\";\n    cin &gt;&gt; guess;\n\n    int num = 0;\n    computeNum(num,dice);\n\n    if(guess==num){cout &lt;&lt; \"Congrats!\" &lt;&lt; endl;}\n    else{cout &lt;&lt; \"No, the correct answer is: \" &lt;&lt; num &lt;&lt; endl;}\n\n    return 0;\n}\n\nvoid computeNum(int&amp; num, int dice[]){\n    for(int i=0; i&lt;10 ; i++){\n        if(dice[i]==1){num++;}\n    }\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_14_LAB_Exercises_on_Pointer_and_References/ex04.cpp/","title":"ex04","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_14_LAB_Exercises_on_Pointer_and_References/ex04.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    398 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 14 LAB Exercises on Pointer and References\n    \u2514\u2500\u2500 ex04.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_14_LAB_Exercises_on_Pointer_and_References/ex04.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nvoid swapNum(double*,double*);\n\nint main(){\n    double a,b;\n    cout &lt;&lt; \"Please input two number:\" &lt;&lt; endl;\n    cout &lt;&lt; \" A: \"; cin &gt;&gt; a;\n    cout &lt;&lt; \" B: \"; cin &gt;&gt; b;\n\n    swapNum(&amp;a,&amp;b);\n\n    cout &lt;&lt; \"After swap:\" &lt;&lt; endl \n        &lt;&lt; \" A: \" &lt;&lt; a &lt;&lt; endl \n        &lt;&lt; \" B: \" &lt;&lt; b &lt;&lt; endl;\n\n    return 0;\n}\n\nvoid swapNum(double* a, double* b){swap(*a,*b);}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_14_LAB_Exercises_on_Pointer_and_References/ex05.cpp/","title":"ex05","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_14_LAB_Exercises_on_Pointer_and_References/ex05.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    548 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 14 LAB Exercises on Pointer and References\n    \u2514\u2500\u2500 ex05.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_14_LAB_Exercises_on_Pointer_and_References/ex05.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint division(int,int,int&amp;);\n\nint main(){\n    int a,b,rest;\n    cout &lt;&lt; \"Please input two integers:\" &lt;&lt; endl;\n    cout &lt;&lt; \" A: \"; cin &gt;&gt; a;\n    cout &lt;&lt; \" B: \"; cin &gt;&gt; b;\n\n    int quotient = division(a,b,rest);\n\n    cout &lt;&lt; \"Result:\" &lt;&lt; endl \n        &lt;&lt; \" Quotient: \" &lt;&lt; quotient &lt;&lt; endl \n        &lt;&lt; \" Rest: \" &lt;&lt; rest &lt;&lt; endl;\n\n    return 0;\n}\n\nint division(int a, int b, int&amp; rest){\n    int quotient = 0;\n    while(a&gt;=b){\n        a -= b;\n        quotient++;\n    }\n\n    rest = a;\n\n    return quotient;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_14_LAB_Exercises_on_Pointer_and_References/ex06.cpp/","title":"ex06","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_14_LAB_Exercises_on_Pointer_and_References/ex06.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    738 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 14 LAB Exercises on Pointer and References\n    \u2514\u2500\u2500 ex06.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_14_LAB_Exercises_on_Pointer_and_References/ex06.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nvoid excess(int&amp;,int&amp;);\n\nint division(int,int,int&amp;);\n\nint main(){\n    int sec,min,hour;\n    cout &lt;&lt; \"Please input three integers:\" &lt;&lt; endl;\n    cout &lt;&lt; \" sec: \"; cin &gt;&gt; sec;\n    cout &lt;&lt; \" min: \"; cin &gt;&gt; min;\n    cout &lt;&lt; \" hour: \"; cin &gt;&gt; hour;\n\n    excess(sec,min);\n    excess(min,hour);\n\n    cout &lt;&lt; \"Result:\" &lt;&lt; endl \n        &lt;&lt; \" sec: \" &lt;&lt; sec &lt;&lt; endl \n        &lt;&lt; \" min: \" &lt;&lt; min &lt;&lt; endl \n        &lt;&lt; \" hour: \" &lt;&lt; hour &lt;&lt; endl;\n\n    return 0;\n}\n\nvoid excess(int&amp; a,int&amp; b){\n    int rest;\n    b += division(a,60,rest);\n    a = rest;\n}\n\nint division(int a, int b, int&amp; rest){\n    int quotient = 0;\n    while(a&gt;=b){\n        a -= b;\n        quotient++;\n    }\n\n    rest = a;\n\n    return quotient;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_14_LAB_Exercises_on_Pointer_and_References/ex07.cpp/","title":"ex07","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_14_LAB_Exercises_on_Pointer_and_References/ex07.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    502 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 14 LAB Exercises on Pointer and References\n    \u2514\u2500\u2500 ex07.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_14_LAB_Exercises_on_Pointer_and_References/ex07.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint maxNum(int[]);\n\nint main(){\n    int arr[5]={0},temp,m;\n    cout &lt;&lt; \"Please input 1-5 integers (input 0 to exit):\" &lt;&lt; endl;\n    for(int i=0; i&lt;5; i++){\n        cout &lt;&lt; \" \" &lt;&lt; (i+1) &lt;&lt; \": \";\n        cin &gt;&gt; temp;\n\n        if(temp == 0){break;}\n        else{arr[i] = temp;}\n    }\n\n    cout &lt;&lt; \"Maxinum: \" &lt;&lt; maxNum(arr) &lt;&lt; endl;\n\n    return 0;\n}\n\nint maxNum(int arr[]){\n    int m = arr[0];\n    for(int i=1; i&lt;5; i++){m = (arr[i]&gt;m?arr[i]:m);}\n\n    return m;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_14_LAB_Exercises_on_Pointer_and_References/ex08-1.cpp/","title":"ex08 1","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_14_LAB_Exercises_on_Pointer_and_References/ex08-1.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    845 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 14 LAB Exercises on Pointer and References\n    \u2514\u2500\u2500 ex08 1.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_14_LAB_Exercises_on_Pointer_and_References/ex08-1.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nvoid sort(int&amp;,int&amp;,int&amp;);\n\nint main(){\n    int n1,n2,n3;\n    cout &lt;&lt; \"Please input three positive integers:\" &lt;&lt; endl;\n    cout &lt;&lt; \" n1: \"; cin &gt;&gt; n1;\n    cout &lt;&lt; \" n2: \"; cin &gt;&gt; n2;\n    cout &lt;&lt; \" n3: \"; cin &gt;&gt; n3;\n\n    sort(n1,n2,n3);\n\n    cout &lt;&lt; \"Result:\" &lt;&lt; endl \n        &lt;&lt; \" n1: \" &lt;&lt; n1 &lt;&lt; endl \n        &lt;&lt; \" n2: \" &lt;&lt; n2 &lt;&lt; endl \n        &lt;&lt; \" n3: \" &lt;&lt; n3 &lt;&lt; endl;\n\n    return 0;\n}\n\nvoid sort(int&amp; n1,int&amp; n2, int&amp; n3){\n    if(n1&gt;n2){\n        if(n2&gt;n3){swap(n1,n3);}\n        else{\n            if(n1&gt;n3){\n                swap(n1,n2);\n                swap(n2,n3);\n            }\n            else{swap(n1,n2);}\n        }\n    }\n    else{\n        if(n2&gt;n3){\n            if(n1&gt;n3){\n                swap(n1,n3);\n                swap(n2,n3);}\n            else{swap(n2,n3);}\n        }\n        else{}\n    }\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_14_LAB_Exercises_on_Pointer_and_References/ex08-2.cpp/","title":"ex08 2","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_14_LAB_Exercises_on_Pointer_and_References/ex08-2.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    832 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 14 LAB Exercises on Pointer and References\n    \u2514\u2500\u2500 ex08 2.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_14_LAB_Exercises_on_Pointer_and_References/ex08-2.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nvoid sort(int,int*);\n\nint main(){\n    int N;\n    cout &lt;&lt; \"Please input a max integer N: \";\n    cin &gt;&gt; N;\n\n    int arr[N]={0};\n    cout &lt;&lt; \"Please input \" &lt;&lt; N &lt;&lt; \" integers: \" &lt;&lt; endl;\n    for(int i=0; i&lt;N; i++){\n        cout &lt;&lt; \" \" &lt;&lt; (i+1) &lt;&lt; \": \";\n        cin &gt;&gt; arr[i];\n    }\n\n    sort(N,&amp;arr[0]);\n\n    cout &lt;&lt; \"Result: \" &lt;&lt; endl;\n    for(int i=0; i&lt;N; i++){cout &lt;&lt; \" \" &lt;&lt; (i+1) &lt;&lt; \": \" &lt;&lt; arr[i] &lt;&lt; endl;}\n\n    return 0;\n}\n\nvoid sort(int len,int* arr){\n    int size = 4;\n    int *i1,*i2;\n    bool judge = true;\n\n    while(judge){\n        judge = false;\n        i1 = arr;\n        i2 = arr+1;\n\n        for(int i=1; i&lt;len; i++){\n            i1++;\n            i2++;\n\n            if(*i1 &gt; *i2){\n                 judge = true;\n                 swap(*i1,*i2);\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_14_LAB_Exercises_on_Pointer_and_References/ex09.cpp/","title":"ex09","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_14_LAB_Exercises_on_Pointer_and_References/ex09.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    958 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 14 LAB Exercises on Pointer and References\n    \u2514\u2500\u2500 ex09.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_14_LAB_Exercises_on_Pointer_and_References/ex09.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nvoid sort(int&amp;,int&amp;,int&amp;);\n\nint main(){\n    srand(time(NULL));\n    int r11=rand()%6+1,r12=rand()%6+1,r13=rand()%6+1,r21=rand()%6+1,r22=rand()%6+1,r23=rand()%6+1;\n\n    sort(r11,r12,r13);\n    sort(r21,r22,r23);\n\n    cout &lt;&lt; (((r11&gt;r21)?1:0)?\"Lowest:  Attacker wins!\":\"Lowest:  Defender wins!\") &lt;&lt; endl;\n    cout &lt;&lt; (((r12&gt;r22)?1:0)?\"Middle:  Attacker wins!\":\"Middle:  Defender wins!\") &lt;&lt; endl;\n    cout &lt;&lt; (((r13&gt;r23)?1:0)?\"Highest: Attacker wins!\":\"Highest: Defender wins!\") &lt;&lt; endl;\n\n    return 0;\n}\n\nvoid sort(int&amp; n1,int&amp; n2, int&amp; n3){\n    if(n1&gt;n2){\n        if(n2&gt;n3){swap(n1,n3);}\n        else{\n            if(n1&gt;n3){\n                swap(n1,n2);\n                swap(n2,n3);\n            }\n            else{swap(n1,n2);}\n        }\n    }\n    else{\n        if(n2&gt;n3){\n            if(n1&gt;n3){\n                swap(n1,n3);\n                swap(n2,n3);}\n            else{swap(n2,n3);}\n        }\n        else{}\n    }\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_14_LAB_Exercises_on_Pointer_and_References/ex10.cpp/","title":"ex10","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_14_LAB_Exercises_on_Pointer_and_References/ex10.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    426 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 14 LAB Exercises on Pointer and References\n    \u2514\u2500\u2500 ex10.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_14_LAB_Exercises_on_Pointer_and_References/ex10.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nvoid swapV2(short&amp;,short&amp;);\n\nint main(){\n    short a,b;\n    cout &lt;&lt; \"Please input two integers:\" &lt;&lt; endl;\n    cout &lt;&lt; \" A: \"; cin &gt;&gt; a;\n    cout &lt;&lt; \" B: \"; cin &gt;&gt; b;\n\n    swapV2(a,b);\n\n    cout &lt;&lt; \"Result:\" &lt;&lt; endl \n        &lt;&lt; \" A: \" &lt;&lt; a &lt;&lt; endl \n        &lt;&lt; \" B: \" &lt;&lt; b &lt;&lt; endl;\n}\n\nvoid swapV2(short&amp; a,short&amp; b){\n    short ra = a%256, rb = b%256;\n    a = a-ra+rb;\n    b = b-rb+ra;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/","title":"Lecture 18 LAB Exercise on Recursive Functions","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 13 items</li> <li>Size:  12 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 18 LAB Exercise on Recursive Functions\n</code></pre> Name Type Item Size L0 1 cpp / 333 B L0 2 cpp / 331 B L0 3 cpp / 327 B L0 4 cpp / 370 B L0 5 cpp / 359 B L1 1 cpp / 525 B L1 2 cpp / 484 B L1 3 cpp / 663 B L1 4 cpp / 560 B L1 5 cpp / 748 B L1 6 cpp / 1 KiB L2 cpp / 1 KiB TicTacToe cpp / 5 KiB"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/L0-1.cpp/","title":"L0 1","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/L0-1.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    333 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 18 LAB Exercise on Recursive Functions\n    \u2514\u2500\u2500 L0 1.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/L0-1.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint recursive(int);\n\nint main(){\n    int F;\n    cout &lt;&lt; \"Please input an interger (&gt;= 1): \";\n    cin &gt;&gt; F;\n\n    cout &lt;&lt; \"Factorial: \" &lt;&lt; recursive(F) &lt;&lt; endl;\n\n    return 0;\n}\n\nint recursive(int F){\n    if(F == 1){\n        return 1;\n    }\n    else{\n        return (recursive(F-1)*F);\n    }\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/L0-2.cpp/","title":"L0 2","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/L0-2.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    331 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 18 LAB Exercise on Recursive Functions\n    \u2514\u2500\u2500 L0 2.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/L0-2.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint recursive(int);\n\nint main(){\n    int F;\n    cout &lt;&lt; \"Please input an interger (&gt;= 1): \";\n    cin &gt;&gt; F;\n\n    cout &lt;&lt; \"Product: \" &lt;&lt; recursive(F) &lt;&lt; endl;\n\n    return 0;\n}\n\nint recursive(int F){\n    if(F == 1){\n        return 1;\n    }\n    else{\n        return (recursive(F-1)*F);\n    }\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/L0-3.cpp/","title":"L0 3","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/L0-3.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    327 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 18 LAB Exercise on Recursive Functions\n    \u2514\u2500\u2500 L0 3.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/L0-3.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint recursive(int);\n\nint main(){\n    int N;\n    cout &lt;&lt; \"Please input an interger (&gt;= 0): \";\n    cin &gt;&gt; N;\n\n    cout &lt;&lt; \"Sum: \" &lt;&lt; recursive(N) &lt;&lt; endl;\n\n    return 0;\n}\n\nint recursive(int N){\n    if(N == 0){\n        return 0;\n    }\n    else{\n        return (recursive(N-1)+N);\n    }\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/L0-4.cpp/","title":"L0 4","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/L0-4.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    370 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 18 LAB Exercise on Recursive Functions\n    \u2514\u2500\u2500 L0 4.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/L0-4.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint recursive(int,int,int);\n\nint main(){\n    int a,b;\n    cout &lt;&lt; \"Please input two integers: \" &lt;&lt; endl;\n    cin &gt;&gt; a &gt;&gt; b;\n\n    cout &lt;&lt; \"Division: \" &lt;&lt; recursive(a,b,0) &lt;&lt; endl;\n\n    return 0;\n}\n\nint recursive(int a, int b, int d){\n    if(a-b&lt;0){\n        return d;\n    }\n    else{\n        return (recursive(a-b,b,d+1));\n    }\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/L0-5.cpp/","title":"L0 5","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/L0-5.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    359 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 18 LAB Exercise on Recursive Functions\n    \u2514\u2500\u2500 L0 5.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/L0-5.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint recursive(int,int);\n\nint main(){\n    int x,y;\n    cout &lt;&lt; \"Please input two integers (x,y &gt;= 0): \" &lt;&lt; endl;\n    cin &gt;&gt; x &gt;&gt; y;\n\n    cout &lt;&lt; \"Sum: \" &lt;&lt; recursive(x,y) &lt;&lt; endl;\n\n    return 0;\n}\n\nint recursive(int x,int y){\n    if(y == 0){\n        return x;\n    }\n    else{\n        return recursive(x+1,y-1);\n    }\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/L1-1.cpp/","title":"L1 1","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/L1-1.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    525 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 18 LAB Exercise on Recursive Functions\n    \u2514\u2500\u2500 L1 1.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/L1-1.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint recursive(int*,int);\n\nint main(){\n    int N;\n    cout &lt;&lt; \"Please input an integer: \";\n    cin &gt;&gt; N;\n\n    cout &lt;&lt; \"Please input \" &lt;&lt; N &lt;&lt; \" integers: \" &lt;&lt; endl;\n    int V[N] = {0};\n    for (int i = 0; i &lt; N; i++){cin &gt;&gt; V[i];}\n\n    cout &lt;&lt; \"Vector in reverse order: \" &lt;&lt; endl;\n\n    recursive(&amp;V[0],N);\n\n    return 0;\n}\n\nint recursive(int *V, int N){\n    if(N == 0){\n        return *(V-1);\n    }\n    else{\n        cout &lt;&lt; recursive(V+1, N-1) &lt;&lt; endl;\n        return *(V-1);\n    }\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/L1-2.cpp/","title":"L1 2","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/L1-2.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    484 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 18 LAB Exercise on Recursive Functions\n    \u2514\u2500\u2500 L1 2.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/L1-2.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint recursive(int*,int);\n\nint main(){\n    int N;\n    cout &lt;&lt; \"Please input an integer: \";\n    cin &gt;&gt; N;\n\n    cout &lt;&lt; \"Please input \" &lt;&lt; N &lt;&lt; \" integers: \" &lt;&lt; endl;\n    int V[N] = {0};\n    for (int i = 0; i &lt; N; i++){cin &gt;&gt; V[i];}\n\n    cout &lt;&lt; \"Sum of a vector: \" &lt;&lt; recursive(&amp;V[0],N) &lt;&lt; endl;\n\n    return 0;\n}\n\nint recursive(int *V, int N){\n    if(N == 1){\n        return *V;\n    }\n    else{\n        return (*V + recursive(V+1,N-1));\n    }\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/L1-3.cpp/","title":"L1 3","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/L1-3.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    663 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 18 LAB Exercise on Recursive Functions\n    \u2514\u2500\u2500 L1 3.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/L1-3.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint recursive(int*,int*,int);\n\nint main(){\n    int N;\n    cout &lt;&lt; \"Please input an integer: \";\n    cin &gt;&gt; N;\n\n    cout &lt;&lt; \"V - Please input \" &lt;&lt; N &lt;&lt; \" integers: \" &lt;&lt; endl;\n    int V[N] = {0};\n    for (int i = 0; i &lt; N; i++){cin &gt;&gt; V[i];}\n\n    cout &lt;&lt; \"W - Please input \" &lt;&lt; N &lt;&lt; \" integers: \" &lt;&lt; endl;\n    int W[N] = {0};\n    for (int i = 0; i &lt; N; i++){cin &gt;&gt; W[i];}\n\n    cout &lt;&lt; \"Product of a vector: \" &lt;&lt; recursive(&amp;V[0],&amp;W[0],N) &lt;&lt; endl;\n\n    return 0;\n}\n\nint recursive(int *V, int *W, int N){\n    if(N == 1){\n        return ((*V)*(*W));\n    }\n    else{\n        return (((*V)*(*W)) + recursive(V+1,W+1,N-1));\n    }\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/L1-4.cpp/","title":"L1 4","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/L1-4.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    560 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 18 LAB Exercise on Recursive Functions\n    \u2514\u2500\u2500 L1 4.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/L1-4.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nbool recursive(int*,int);\n\nint main(){\n    int N;\n    cout &lt;&lt; \"Please input an integer: \";\n    cin &gt;&gt; N;\n\n    cout &lt;&lt; \"Please input \" &lt;&lt; N &lt;&lt; \" integers: \" &lt;&lt; endl;\n    int V[N] = {0};\n    for (int i = 0; i &lt; N; i++){cin &gt;&gt; V[i];}\n\n    cout &lt;&lt; \"Is palindrome: \" &lt;&lt; recursive(&amp;V[0],N) &lt;&lt; endl;\n\n    return 0;\n}\n\nbool recursive(int *V, int N){\n    if(N/2 &lt; 0){return true;}\n    else{\n        if(*V == *(V+(N-1))){\n            return recursive(V+1,N-2);\n        }\n        else{\n            return false;\n        }\n    }\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/L1-5.cpp/","title":"L1 5","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/L1-5.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    748 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 18 LAB Exercise on Recursive Functions\n    \u2514\u2500\u2500 L1 5.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/L1-5.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint* rM(int*,int,int);\n\nint rA(int*,int);\n\nint main(){\n    int M,N;\n    cout &lt;&lt; \"Please input two integers: \" &lt;&lt; endl;\n    cin &gt;&gt; M &gt;&gt; N;\n\n    cout &lt;&lt; \"Please input \" &lt;&lt; (M*N) &lt;&lt; \" integers: \" &lt;&lt; endl;\n    int V[M][N] = {0};\n    for(int i = 0; i &lt; M; i++){\n        for(int j = 0; j &lt; N; j++){cin &gt;&gt; V[i][j];}\n    }\n\n    cout &lt;&lt; \"Matrix: \" &lt;&lt; endl;\n    rM(&amp;V[M-1][N-1],M,N);\n\n    return 0;\n}\n\nint* rM(int *V, int M, int N){\n    if(M == 0){\n        return (V+N);\n    }\n    else{\n        rA(rM(V-N, M-1, N),N);\n        cout &lt;&lt; endl;\n        return (V+N);\n    }\n}\n\nint rA(int *V, int N){\n    if(N == 0){\n        return *(V+1);\n    }\n    else{\n        cout &lt;&lt; rA(V-1, N-1) &lt;&lt; \" \";\n        return *(V+1);\n    }\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/L1-6.cpp/","title":"L1 6","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/L1-6.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 18 LAB Exercise on Recursive Functions\n    \u2514\u2500\u2500 L1 6.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/L1-6.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint* rM(int*,int*,int*,int,int,int);\n\nint* rA(int*,int*,int*,int,int,int);\n\nint rSUM(int*,int*,int,int);\n\nint main(){\n    int M,N,Q;\n    cout &lt;&lt; \"Please input three integers: \" &lt;&lt; endl;\n    cin &gt;&gt; M &gt;&gt; N &gt;&gt; Q;\n\n    cout &lt;&lt; \"Please input \" &lt;&lt; (M*N) &lt;&lt; \" integers: \" &lt;&lt; endl;\n    int V[M][N] = {0};\n    for(int i = 0; i &lt; M; i++){\n        for(int j = 0; j &lt; N; j++){cin &gt;&gt; V[i][j];}\n    }\n\n    cout &lt;&lt; \"Please input \" &lt;&lt; (Q*N) &lt;&lt; \" integers: \" &lt;&lt; endl;\n    int W[N][Q] = {0};\n    for(int i = 0; i &lt; N; i++){\n        for(int j = 0; j &lt; Q; j++){cin &gt;&gt; W[i][j];}\n    }\n\n    cout &lt;&lt; \"Matricial product: \" &lt;&lt; endl;\n    int Y[M][Q] = {0};\n    rM(&amp;V[0][0],&amp;W[0][0],&amp;Y[M-1][Q-1],M,N,Q);\n\n    for(int i = 0; i &lt; M; i++){\n        for(int j = 0; j &lt; Q; j++){cout &lt;&lt; Y[i][j] &lt;&lt; \" \";}\n        cout &lt;&lt; endl;\n    }\n\n    return 0;\n}\n\nint* rM(int *V, int *W, int *Y, int M, int N, int Q){\n    if(M == 0){\n        return (Y+Q);\n    }\n    else{\n        rA(V,W,rM(V, W, Y-Q, M-1, N, Q),M,N,Q);\n        return (Y+Q);\n    }\n}\n\nint* rA(int *V, int *W, int *Y, int M, int N, int Q){\n    if(Q == 0){\n        return (Y+1);\n    }\n    else{\n        *rA(V, W, Y-1, M, N, Q-1) = rSUM(V+(M-1)*N, W+(Q-1), N, N);\n        return (Y+1);\n    }\n}\n\nint rSUM(int *V, int *W, int N, int i){\n    if(i == 1){\n        return ((*V)*(*W));\n    }\n    else{\n        return (((*V)*(*W)) + rSUM(V+1,W+N,N,i-1));\n    }\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/L2.cpp/","title":"L2","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/L2.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 18 LAB Exercise on Recursive Functions\n    \u2514\u2500\u2500 L2.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/L2.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint free(int[]);\n\nint add_node(int,int,int,int[]);\n\nbool is_allocated(int,int[]);\n\nint get_node_value(int,int[]);\n\nint get_left_child(int,int[]);\n\nint get_right_child(int,int[]);\n\nvoid in_order_visit(int,int[]);\n\nint main(){\n    int memory[4*1000] = {0};\n\n    int leaf1 = add_node(10, 0, 0, memory);\n    int leaf2 = add_node(30, 0, 0, memory);\n    int leaf3 = add_node(30, leaf1, leaf2, memory);\n    int leaf4 = add_node(40, leaf3, 0, memory);\n\n    cout &lt;&lt; \"In order visit: \" &lt;&lt; endl;\n    in_order_visit(16,memory);\n\n    return 0;\n}\n\nint free(int memory[]){\n    int i=4;\n    while(memory[i]){i+=4;}\n\n    return i;\n}\n\nint add_node(int value, int left_child, int right_child, int memory[]){\n    int i = free(memory);\n\n    memory[i] = 1;\n    memory[i+1] = value;\n    memory[i+2] = left_child;\n    memory[i+3] = right_child;\n\n    return i;\n}\n\nbool is_allocated(int index_of_node, int memory[]){return memory[index_of_node];}\n\nint get_node_value(int index_of_node, int memory[]){return memory[index_of_node+1];}\n\nint get_left_child(int index_of_node, int memory[]){return memory[index_of_node+2];}\n\nint get_right_child(int index_of_node, int memory[]){return memory[index_of_node+3];}\n\nvoid in_order_visit(int node, int memory[]){\n    if(is_allocated(node,memory)){\n        in_order_visit(get_left_child(node,memory),memory);\n        cout &lt;&lt; \" - leaf \" &lt;&lt; node/4 &lt;&lt; \" value is: \" &lt;&lt; get_node_value(node,memory) &lt;&lt; endl;\n        in_order_visit(get_right_child(node,memory),memory);\n    }\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/TicTacToe.cpp/","title":"TicTacToe","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/TicTacToe.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    5 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 18 LAB Exercise on Recursive Functions\n    \u2514\u2500\u2500 TicTacToe.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_18_LAB_Exercise_on_Recursive_Functions/TicTacToe.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nconst int BOARD_SIZE = 9;\n\nvoid line();\n\nvoid print_board(const int[BOARD_SIZE][BOARD_SIZE]);\n\nbool move(int[2],int,int[BOARD_SIZE][BOARD_SIZE]);\n\nbool has_won(int[BOARD_SIZE][BOARD_SIZE],int);\n\nvoid free_cells(int[BOARD_SIZE*BOARD_SIZE][2],int&amp;,const int[BOARD_SIZE][BOARD_SIZE]);\n\nvoid computer_move(int[2],const int,const int[BOARD_SIZE*BOARD_SIZE][2]);\n\nvoid user_move(int[2]);\n\nint main(){\n    srand(time(NULL));\n\n    int board[BOARD_SIZE][BOARD_SIZE] = {0};\n    int fCells[BOARD_SIZE*BOARD_SIZE][2] = {0};\n    int found;\n    int M[2] = {0};\n\n    while(true){\n        /*\n        print_board(board);\n        free_cells(fCells,found,board);\n        if(found){\n            do{user_move(M);}\n            while(!move(M,2,board));\n        }\n        else{\n            line();cout &lt;&lt; \" No one wins!\" &lt;&lt; endl;line();\n            break;\n        }\n        if(has_won(board,2)){cout &lt;&lt; \"Player wins!\" &lt;&lt; endl; break;}\n        */\n\n        print_board(board);\n        free_cells(fCells,found,board);\n        if(found){\n            computer_move(M,found,fCells);\n        }\n        else{\n            line();cout &lt;&lt; \" No one wins!\" &lt;&lt; endl;line();\n            break;\n        }\n        move(M,1,board);\n        if(has_won(board,1)){\n            print_board(board);\n            line();cout &lt;&lt; \" Computer 1 wins!\" &lt;&lt; endl;line();\n            break;\n        }\n\n        print_board(board);\n        if(found){\n            computer_move(M,found,fCells);\n        }\n        else{\n            line();cout &lt;&lt; \" No one wins!\" &lt;&lt; endl;line();\n            break;\n        }\n        move(M,2,board);\n        if(has_won(board,2)){\n            print_board(board);\n            line();cout &lt;&lt; \" Computer 2 wins!\" &lt;&lt; endl;line();\n            break;\n        }\n    }\n\n    return 0;\n}\n\nvoid line(){cout &lt;&lt; \"--------------------------------\" &lt;&lt; endl;}\n\nvoid print_board(const int board[BOARD_SIZE][BOARD_SIZE]){\n    line();\n    cout &lt;&lt; \" Board: \" &lt;&lt; endl &lt;&lt; endl;\n\n    for(int i=0; i&lt;BOARD_SIZE; i++){\n        cout &lt;&lt; \"   \";\n        for(int j=0; j&lt;BOARD_SIZE; j++){cout &lt;&lt; \"+---\";}\n        cout &lt;&lt; \"+\" &lt;&lt; endl &lt;&lt; \"  \";\n        for(int j=0; j&lt;BOARD_SIZE; j++){\n            cout &lt;&lt; \" | \";\n            switch(board[i][j]){\n                case 0: cout &lt;&lt; ' '; break;\n                case 1: cout &lt;&lt; 'O'; break;\n                case 2: cout &lt;&lt; 'X'; break;\n            }\n        }\n        cout &lt;&lt; \" | \" &lt;&lt; i &lt;&lt; endl;\n    }\n    cout &lt;&lt; \"   \";\n    for(int j=0; j&lt;BOARD_SIZE; j++){cout &lt;&lt; \"+---\";}\n    cout &lt;&lt; \"+\" &lt;&lt; endl;\n    cout &lt;&lt; \"   \";\n    for(int i=0; i&lt;BOARD_SIZE; i++){cout &lt;&lt; \"  \" &lt;&lt; i &lt;&lt; \" \";}\n    cout &lt;&lt; endl;\n\n    cout &lt;&lt; endl;\n}\n\nbool move(int move[2], int color, int board[BOARD_SIZE][BOARD_SIZE]){\n    if(board[move[0]][move[1]]){\n        return false;\n    }\n    else{\n        board[move[0]][move[1]] = color;\n        return true;\n    }\n}\n\nbool has_won(int board[BOARD_SIZE][BOARD_SIZE], int color){\n    bool e1,e2;\n    for(int i=0; i&lt;BOARD_SIZE; i++){\n        for(int j=0; j&lt;BOARD_SIZE; j++){\n            if(board[i][j]==color){\n                e1 = i&gt;0 &amp;&amp; i&lt;(BOARD_SIZE-1);\n                e2 = j&gt;0 &amp;&amp; j&lt;(BOARD_SIZE-1);\n                if(e1){\n                    if(board[i-1][j]==color &amp;&amp; board[i+1][j]==color){return true;}\n                }\n                if(e2){\n                    if(board[i][j-1]==color &amp;&amp; board[i][j+1]==color){return true;}\n                }\n                if(e1 &amp;&amp; e2){\n                    if(board[i-1][j-1]==color &amp;&amp; board[i+1][j+1]==color){return true;}\n                    if(board[i-1][j+1]==color &amp;&amp; board[i+1][j-1]==color){return true;}\n                }\n            }\n        }\n    }\n    return false;\n}\n\nvoid free_cells(int cells[BOARD_SIZE*BOARD_SIZE][2], int &amp;found, const int board[BOARD_SIZE][BOARD_SIZE]){\n    found = 0;\n    for(int i=0; i&lt;BOARD_SIZE; i++){\n        for(int j=0; j&lt;BOARD_SIZE; j++){\n            cells[i*3+j][0] = 0;\n            cells[i*3+j][1] = 0;\n            if(!board[i][j]){\n                cells[found][0] = i;\n                cells[found][1] = j;\n                found++;\n            }\n        }\n    }\n}\n\nvoid computer_move(int cell[2], const int free_cells_size, const int free_cells[BOARD_SIZE*BOARD_SIZE][2]){\n    int r = rand()%free_cells_size;\n\n    cell[0] = free_cells[r][0];\n    cell[1] = free_cells[r][1];\n\n    line();\n    cout &lt;&lt; \" Computer move: \" &lt;&lt; endl;\n    cout &lt;&lt; endl;\n    cout &lt;&lt; \"   - row: \" &lt;&lt; cell[0] &lt;&lt; endl;\n    cout &lt;&lt; \"   - col: \" &lt;&lt; cell[1] &lt;&lt; endl;\n    cout &lt;&lt; endl;\n}\n\nvoid user_move(int cell[2]){\n    line();\n    cout &lt;&lt; \" User move: \" &lt;&lt; endl;\n    cout &lt;&lt; endl;\n    cout &lt;&lt; \"   - row: \"; cin &gt;&gt; cell[0];\n    cout &lt;&lt; \"   - col: \"; cin &gt;&gt; cell[1];\n    cout &lt;&lt; endl;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_19_LAB_More_Exercises_on_Arrays/","title":"Lecture 19 LAB More Exercises on Arrays","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_19_LAB_More_Exercises_on_Arrays/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 10 items</li> <li>Size:  9 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 19 LAB More Exercises on Arrays\n</code></pre> Name Type Item Size GameOfLife cpp / 2 KiB MasterMind cpp / 3 KiB ex1 1 cpp / 523 B ex1 2 cpp / 596 B ex1 3 cpp / 346 B ex1 4 cpp / 756 B ex2 1 cpp / 362 B ex2 2 cpp / 365 B ex2 3 cpp / 435 B ex2 4 cpp / 746 B"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_19_LAB_More_Exercises_on_Arrays/GameOfLife.cpp/","title":"GameOfLife","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_19_LAB_More_Exercises_on_Arrays/GameOfLife.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 19 LAB More Exercises on Arrays\n    \u2514\u2500\u2500 GameOfLife.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_19_LAB_More_Exercises_on_Arrays/GameOfLife.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(){\n    char input;\n\n    int s1=20, s2=40, c, p1, p2, g=1;\n\n    int m[s1][s2], n[s1][s2];\n\n    for(int i=0; i&lt;s1; i++){\n        for(int j=0; j&lt;s2; j++){m[i][j] = 0;}\n    }\n\n    m[10][20] = 1;\n    m[9][20] = 1;\n    m[11][20] = 1;\n    m[10][19] = 1;\n    m[11][21] = 1;\n\n    while(true){\n        for(int i=0; i&lt;s2+2; i++){cout &lt;&lt; \"+\";} cout &lt;&lt; endl;\n        for(int i=0; i&lt;s1; i++){\n            cout &lt;&lt; \"+\";\n            for(int j=0; j&lt;s2; j++){cout &lt;&lt; ((m[i][j])?'X':' ');}\n            cout &lt;&lt; \"+\" &lt;&lt; endl;\n        }\n        for(int i=0; i&lt;s2+2; i++){cout &lt;&lt; \"+\";} cout &lt;&lt; endl;\n\n        for(int i=0; i&lt;s1; i++){\n            for(int j=0; j&lt;s2; j++){n[i][j] = 0;}\n        }\n\n        for(int i=0; i&lt;s1; i++){\n            for(int j=0; j&lt;s2; j++){\n                c = 0;\n                for(int k=-1; k&lt;2; k++){\n                    for(int l=-1; l&lt;2; l++){\n                        p1 = i+k; p2 = j+l;\n                        if(m[p1][p2] &amp;&amp; p1&gt;-1 &amp;&amp; p1&lt;s1 &amp;&amp; p2&gt;-1 &amp;&amp; p2&lt;s2){c++;}\n                    }\n                }\n\n                if (m[i][j]){\n                    if(c&lt;5 &amp;&amp; c&gt;2){n[i][j] = 1;}\n                }\n                else if(c==3){n[i][j] = 1;}\n            }\n        }\n\n        for(int i=0; i&lt;s1; i++){\n            for(int j=0; j&lt;s2; j++){m[i][j] = n[i][j];}\n        }\n\n        cout &lt;&lt; \"Generation: \" &lt;&lt; g &lt;&lt; endl;\n        g++;\n\n        cout &lt;&lt; \"Continue? (0 to exit): \";\n        cin &gt;&gt; input;\n\n        if(input == '0'){return 0;}\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_19_LAB_More_Exercises_on_Arrays/MasterMind.cpp/","title":"MasterMind","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_19_LAB_More_Exercises_on_Arrays/MasterMind.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    3 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 19 LAB More Exercises on Arrays\n    \u2514\u2500\u2500 MasterMind.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_19_LAB_More_Exercises_on_Arrays/MasterMind.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nconst int BOARD_W = 8;\nconst int BOARD_H = 12;\n\nvoid line();\n\nvoid print_board(const int[BOARD_H][BOARD_W]);\n\nvoid put_result(int[BOARD_H][BOARD_W],int);\n\nint main(){\n    srand(time(NULL));\n\n    int c, C[4]={0}, board[BOARD_H][BOARD_W]={0};\n    bool judge;\n\n    int i=0;\n    while(i&lt;4){\n        c = rand()%6+1;\n        judge = true;\n        for(int j=0; j&lt;4; j++){if(C[j]==c){judge=false;}}\n        if(judge){C[i]=c;i++;}\n    }\n\n    int turn=0;\n    char G[5];\n    while(true){\n        do{\n            judge = false;\n            print_board(board);\n            cout &lt;&lt; \" Guess(A-F)(Q to retype): \" &lt;&lt; endl &lt;&lt; endl;\n            for(int i=0; i&lt;4; i++){\n                cout &lt;&lt; \"   - \" &lt;&lt; i+1 &lt;&lt; \": \";\n                cin &gt;&gt; G[i];\n                if(G[i]=='Q'){\n                    judge=true;\n                    break;\n                }\n            }\n            cout &lt;&lt; endl;\n            G[4] = '\\0';\n        }\n        while(judge);\n\n        for(int i=0; i&lt;4; i++){\n            board[turn][i] = int(G[i]-'A'+1);\n\n            if(board[turn][i] == C[i]){\n                put_result(board,('X'-'A')+1);\n            }\n            else{\n                for(int j=0; j&lt;4; j++){\n                    if(board[turn][i] == C[j]){put_result(board,('O'-'A')+1);}\n                }\n            }\n        }\n\n        judge=true;\n        for(int i=4; i&lt;8; i++){\n            if(board[turn][i]!=('X'-'A'+1)){\n                judge=false;\n                break;\n            }\n        }\n        if(judge){\n            print_board(board);\n            line();cout &lt;&lt; \" Player wins!\" &lt;&lt; endl;line();\n            return 0;\n        }\n\n        turn++;\n\n        if(turn&gt;11){\n            print_board(board);\n            line();cout &lt;&lt; \" Player loses!\" &lt;&lt; endl;line();\n            return 0;\n        }\n    }\n\n    return 0;\n}\n\nvoid line(){cout &lt;&lt; \"--------------------------------\" &lt;&lt; endl;}\n\nvoid print_board(const int board[BOARD_H][BOARD_W]){\n    line();\n    cout &lt;&lt; \" Board: \" &lt;&lt; endl &lt;&lt; endl;\n\n    cout &lt;&lt; \"   - X: color &amp; position\" &lt;&lt; endl;\n    cout &lt;&lt; \"   - O: color &amp; wrong position\" &lt;&lt; endl &lt;&lt; endl;\n\n    cout &lt;&lt; \"       G U E S S          R E S U L T\" &lt;&lt; endl;\n    for(int i=0; i&lt;BOARD_H; i++){\n        cout &lt;&lt; \"   \";\n        for(int j=0; j&lt;(BOARD_W/2); j++){cout &lt;&lt; \"+---\";}\n        cout &lt;&lt; \"+   \";\n        for(int j=0; j&lt;(BOARD_W/2); j++){cout &lt;&lt; \"+---\";}\n        cout &lt;&lt; \"+\" &lt;&lt; endl &lt;&lt; \"  \";\n        for(int j=0; j&lt;(BOARD_W/2); j++){\n            cout &lt;&lt; \" | \";\n            if(board[i][j]){cout &lt;&lt; char('A' + board[i][j]-1);}\n            else{cout &lt;&lt; \" \";}\n        }\n        cout &lt;&lt; \" |  \";\n        for(int j=(BOARD_W/2); j&lt;BOARD_W; j++){\n            cout &lt;&lt; \" | \";\n            if(board[i][j]){cout &lt;&lt; char('A' + board[i][j]-1);}\n            else{cout &lt;&lt; \" \";}\n        }\n        cout &lt;&lt; \" | \" &lt;&lt; i+1 &lt;&lt; endl;\n    }\n    cout &lt;&lt; \"   \";\n    for(int j=0; j&lt;(BOARD_W/2); j++){cout &lt;&lt; \"+---\";}\n    cout &lt;&lt; \"+   \";\n    for(int j=0; j&lt;(BOARD_W/2); j++){cout &lt;&lt; \"+---\";}\n    cout &lt;&lt; \"+\" &lt;&lt; endl &lt;&lt; \"   \";\n    for(int i=0; i&lt;(BOARD_W/2); i++){cout &lt;&lt; \"  \" &lt;&lt; i+1 &lt;&lt; \" \";}\n    cout &lt;&lt; \"    \";\n    for(int i=0; i&lt;(BOARD_W/2); i++){cout &lt;&lt; \"  \" &lt;&lt; i+1 &lt;&lt; \" \";}\n    cout &lt;&lt; endl;\n\n    cout &lt;&lt; endl;\n}\n\nvoid put_result(int board[BOARD_H][BOARD_W], int value){\n    int i=0;\n    while(board[i][0] &amp;&amp; i&lt;BOARD_H){i++;}\n    i--;\n\n    int r;\n    do{r = rand()%4+4;}\n    while(board[i][r]);\n    board[i][r] = value;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_19_LAB_More_Exercises_on_Arrays/ex1-1.cpp/","title":"ex1 1","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_19_LAB_More_Exercises_on_Arrays/ex1-1.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    523 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 19 LAB More Exercises on Arrays\n    \u2514\u2500\u2500 ex1 1.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_19_LAB_More_Exercises_on_Arrays/ex1-1.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(){\n    int N;\n    cout &lt;&lt; \"Please input an integer: \";\n    cin &gt;&gt; N;\n\n    cout &lt;&lt; \"Please input \" &lt;&lt; N &lt;&lt; \" integers: \" &lt;&lt; endl;\n    int A[N+1] = {0};\n    for(int i=0; i&lt;N; i++){cin &gt;&gt; A[i];}\n\n    int M,Q;\n    cout &lt;&lt; \"Please input two integers (index and value): \" &lt;&lt; endl;\n    cin &gt;&gt; M &gt;&gt; Q;\n\n    for(int i=N; i&gt;(N-M); i--){A[i] = A[i-1];}\n    A[M] = Q;\n\n    cout &lt;&lt; \"After insertion: \" &lt;&lt; endl;\n    for(int i=0; i&lt;(N+1); i++){cout &lt;&lt; A[i] &lt;&lt; endl;}\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_19_LAB_More_Exercises_on_Arrays/ex1-2.cpp/","title":"ex1 2","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_19_LAB_More_Exercises_on_Arrays/ex1-2.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    596 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 19 LAB More Exercises on Arrays\n    \u2514\u2500\u2500 ex1 2.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_19_LAB_More_Exercises_on_Arrays/ex1-2.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(){\n    int M,N;\n    cout &lt;&lt; \"Please input two integers: \" &lt;&lt; endl;\n    cin &gt;&gt; M &gt;&gt; N;\n\n    cout &lt;&lt; \"Please input \" &lt;&lt; M &lt;&lt; \" integers: \" &lt;&lt; endl;\n    int A[M] = {0};\n    for(int i=0; i&lt;M; i++){cin &gt;&gt; A[i];}\n\n    cout &lt;&lt; \"Please input \" &lt;&lt; N &lt;&lt; \" integers: \" &lt;&lt; endl;\n    int B[N] = {0};\n    for(int i=0; i&lt;N; i++){cin &gt;&gt; B[i];}\n\n    int C[M+N] = {0};\n    for(int i=0; i&lt;M; i++){C[i] = A[i];}\n    for(int i=0; i&lt;N; i++){C[i+M] = B[i];}\n\n    cout &lt;&lt; \"Concatenation: \" &lt;&lt; endl;\n    for(int i=0; i&lt;(M+N); i++){cout &lt;&lt; C[i] &lt;&lt; endl;}\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_19_LAB_More_Exercises_on_Arrays/ex1-3.cpp/","title":"ex1 3","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_19_LAB_More_Exercises_on_Arrays/ex1-3.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    346 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 19 LAB More Exercises on Arrays\n    \u2514\u2500\u2500 ex1 3.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_19_LAB_More_Exercises_on_Arrays/ex1-3.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nint main(){\n    int N=0,len;\n    string A,S;\n\n    while(1){\n        cout &lt;&lt; \"Please input a string (input exit to exit): \";\n        cin &gt;&gt; S;\n\n        if(S == \"exit\"){\n            cout &lt;&lt; \"Result: \" &lt;&lt; A &lt;&lt; endl;\n            break;\n        }\n        else{A += S;}\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_19_LAB_More_Exercises_on_Arrays/ex1-4.cpp/","title":"ex1 4","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_19_LAB_More_Exercises_on_Arrays/ex1-4.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    756 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 19 LAB More Exercises on Arrays\n    \u2514\u2500\u2500 ex1 4.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_19_LAB_More_Exercises_on_Arrays/ex1-4.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(){\n    int M,N;\n    cout &lt;&lt; \"Please input two integers: \" &lt;&lt; endl;\n    cin &gt;&gt; M &gt;&gt; N;\n\n    cout &lt;&lt; \"Please input \" &lt;&lt; M &lt;&lt; \" integers: \" &lt;&lt; endl;\n    int A[M] = {0};\n    for(int i=0; i&lt;M; i++){cin &gt;&gt; A[i];}\n\n    cout &lt;&lt; \"Please input \" &lt;&lt; N &lt;&lt; \" integers: \" &lt;&lt; endl;\n    int B[N] = {0};\n    for(int i=0; i&lt;N; i++){cin &gt;&gt; B[i];}\n\n    if(M==N){\n        int i=0;\n        while(A[i]==B[i] &amp;&amp; i&lt;M){i++;}\n\n        if(i==M){cout &lt;&lt; \"A = B\" &lt;&lt; endl;}\n        else{\n            if(A[i]&gt;B[i]){cout &lt;&lt; \"A is larger\" &lt;&lt; endl;}\n            else{cout &lt;&lt; \"B is larger\" &lt;&lt; endl;}\n        }\n    }\n    else{\n        if(M&gt;N){cout &lt;&lt; \"A is larger\" &lt;&lt; endl;}\n        else{cout &lt;&lt; \"B is larger\" &lt;&lt; endl;}\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_19_LAB_More_Exercises_on_Arrays/ex2-1.cpp/","title":"ex2 1","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_19_LAB_More_Exercises_on_Arrays/ex2-1.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    362 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 19 LAB More Exercises on Arrays\n    \u2514\u2500\u2500 ex2 1.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_19_LAB_More_Exercises_on_Arrays/ex2-1.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nint main(){\n    string I;\n    cout &lt;&lt; \"Please input a string: \";\n    cin &gt;&gt; I;\n\n    int len = 0;\n    while(I[len]){len++;}\n\n    int A[len] = {0};\n    for(int i=0; i&lt;len; i++){A[i]=I[i]-int('0');}\n\n    cout &lt;&lt; \"Array: \";\n    for(int i=0; i&lt;len; i++){cout &lt;&lt; A[i];}\n    cout &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_19_LAB_More_Exercises_on_Arrays/ex2-2.cpp/","title":"ex2 2","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_19_LAB_More_Exercises_on_Arrays/ex2-2.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    365 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 19 LAB More Exercises on Arrays\n    \u2514\u2500\u2500 ex2 2.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_19_LAB_More_Exercises_on_Arrays/ex2-2.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nint main(){\n    string I;\n    cout &lt;&lt; \"Please input a string: \";\n    cin &gt;&gt; I;\n\n    int len = 0;\n    while(I[len]){len++;}\n\n    int A[len+1] = {0};\n    for(int i=0; i&lt;len; i++){A[i]=I[i]-int('0');}\n\n    cout &lt;&lt; \"Array: \";\n    for(int i=0; i&lt;=len; i++){cout &lt;&lt; A[i];}\n    cout &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_19_LAB_More_Exercises_on_Arrays/ex2-3.cpp/","title":"ex2 3","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_19_LAB_More_Exercises_on_Arrays/ex2-3.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    435 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 19 LAB More Exercises on Arrays\n    \u2514\u2500\u2500 ex2 3.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_19_LAB_More_Exercises_on_Arrays/ex2-3.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nint main(){\n    string I;\n    cout &lt;&lt; \"Please input a string: \";\n    cin &gt;&gt; I;\n\n    int N;\n    cout &lt;&lt; \"Please input an integer: \";\n    cin &gt;&gt; N;\n\n    int len = 0;\n    while(I[len]){len++;}\n\n    int A[len+N] = {0};\n    for(int i=0; i&lt;len; i++){A[i]=I[i]-int('0');}\n\n    cout &lt;&lt; \"Array: \";\n    for(int i=0; i&lt;(len+N); i++){cout &lt;&lt; A[i];}\n    cout &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_19_LAB_More_Exercises_on_Arrays/ex2-4.cpp/","title":"ex2 4","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_19_LAB_More_Exercises_on_Arrays/ex2-4.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    746 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 19 LAB More Exercises on Arrays\n    \u2514\u2500\u2500 ex2 4.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_19_LAB_More_Exercises_on_Arrays/ex2-4.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nint main(){\n    string I1,I2;\n    cout &lt;&lt; \"Please input two strings: \" &lt;&lt; endl;\n    cin &gt;&gt; I1 &gt;&gt; I2;\n\n    int len1 = 0; while(I1[len1]){len1++;}\n    int len2 = 0; while(I2[len2]){len2++;}\n\n    int len = ((len1&gt;len2)?len1:len2) + 1;\n\n    int A[len] = {0}; for(int i=0; i&lt;len1; i++){A[i]=I1[len1-i-1]-int('0');}\n    int B[len] = {0}; for(int i=0; i&lt;len2; i++){B[i]=I2[len2-i-1]-int('0');}\n\n    int add, r=0;\n    int C[len] = {0};\n    for(int i=0; i&lt;(len-1); i++){\n        add = A[i]+B[i]+r;\n        C[i] = add % 10;\n        r = (add &gt; 9);\n    }\n\n    if(r){C[len-1]=1; len++;}\n\n    cout &lt;&lt; \"Sum: \";\n    for(int i=0; i&lt;len-1; i++){cout &lt;&lt; C[len-i-2];}\n    cout &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/","title":"Lecture 22 LAB Exercises on Command Line","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 17 items</li> <li>Size:  52 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 22 LAB Exercises on Command Line\n</code></pre> Name Type Item Size ex1a cpp / 198 B ex1b cpp / 219 B ex1c cpp / 787 B ex1d cpp / 660 B ex1e input txt / 14 B ex1e cpp / 287 B ex2 cpp / 666 B ex3 input txt / 41 B ex3 cpp / 654 B ex4 input txt / 41 B ex4 cpp / 654 B ex5 V1 cpp / 2 KiB ex5 V2 cpp / 2 KiB ex5 V3 cpp / 3 KiB ex5 V4 cpp / 3 KiB ex5 cpp / 2 KiB us cities csv / 36 KiB"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex1a.cpp/","title":"ex1a","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex1a.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    198 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 22 LAB Exercises on Command Line\n    \u2514\u2500\u2500 ex1a.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex1a.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(int argc, char *argv[]){\n    int res=1;\n    for(int i=1; i&lt;argc; i++){res*=stoi(argv[i]);}\n    cout &lt;&lt; \"Product: \" &lt;&lt; res &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex1b.cpp/","title":"ex1b","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex1b.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    219 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 22 LAB Exercises on Command Line\n    \u2514\u2500\u2500 ex1b.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex1b.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(int argc, char *argv[]){\n    int m=stoi(argv[2]);\n    for(int i=3; i&lt;argc; i++){m=(m&gt;stoi(argv[i]))?m:stoi(argv[i]);}\n    cout &lt;&lt; \"Max: \" &lt;&lt; m &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex1c.cpp/","title":"ex1c","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex1c.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    787 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 22 LAB Exercises on Command Line\n    \u2514\u2500\u2500 ex1c.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex1c.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nint main(int argc, char *argv[]){\n    if(string(argv[1])==\"--max\"){\n        int m=stoi(argv[2]);\n        for(int i=3; i&lt;argc; i++){m=(m&gt;stoi(argv[i]))?m:stoi(argv[i]);}\n        cout &lt;&lt; \"Max: \" &lt;&lt; m &lt;&lt; endl;\n    }\n    else if(string(argv[1])==\"--sum\"){\n        int res=0;\n        for(int i=1; i&lt;argc; i++){res+=stoi(argv[i]);}\n        cout &lt;&lt; \"Sum: \" &lt;&lt; res &lt;&lt; endl;\n    }\n    else if(string(argv[1])==\"--Product\"){\n        int res=1;\n        for(int i=1; i&lt;argc; i++){res+=stoi(argv[i]);}\n        cout &lt;&lt; \"Product: \" &lt;&lt; res &lt;&lt; endl;\n    }\n    else if(string(argv[1])==\"--Average\"){\n        int res=0;\n        for(int i=1; i&lt;argc; i++){res+=stoi(argv[i]);}\n        cout &lt;&lt; \"Average: \" &lt;&lt; res/argc &lt;&lt; endl;\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex1d.cpp/","title":"ex1d","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex1d.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    660 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 22 LAB Exercises on Command Line\n    \u2514\u2500\u2500 ex1d.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex1d.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nint main(int argc, char *argv[]){\n    if(string(argv[1])==\"--max\"){\n        string u;\n        cout &lt;&lt; \"Please input ints (input -1 to exit): \" &lt;&lt; endl;\n        cin &gt;&gt; u;\n        try{if(stoi(u)==-1){return 0;}}\n        catch(invalid_argument){cout &lt;&lt; \"Invalid argument raised for \"&lt;&lt; u &lt;&lt; endl;}\n        int m = stoi(u);\n        while(true){\n            cin &gt;&gt; u;\n            try{if(stoi(u)==-1){break;}}\n            catch(invalid_argument){cout &lt;&lt; \"Invalid argument raised for \"&lt;&lt; u &lt;&lt; endl;}\n            m=(m&gt;stoi(u))?m:stoi(u);\n        }\n        cout &lt;&lt; \"Max: \" &lt;&lt; m &lt;&lt; endl;\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex1e-input.txt/","title":"ex1e input","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex1e-input.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    14 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 22 LAB Exercises on Command Line\n    \u2514\u2500\u2500 ex1e input.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex1e-input.txt/#preview","title":"Preview","text":"<pre><code>max 10 30 40 5\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex1e.cpp/","title":"ex1e","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex1e.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    287 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 22 LAB Exercises on Command Line\n    \u2514\u2500\u2500 ex1e.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex1e.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nint main(int argc, char *argv[]){\n    if(string(argv[1])==\"max\"){\n        int m=stoi(argv[2]);\n        for(int i=3; i&lt;argc; i++){m=(m&gt;stoi(argv[i]))?m:stoi(argv[i]);}\n        cout &lt;&lt; \"Max: \" &lt;&lt; m &lt;&lt; endl;\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex2.cpp/","title":"ex2","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex2.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    666 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 22 LAB Exercises on Command Line\n    \u2514\u2500\u2500 ex2.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex2.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nint i=0;\nint A[100] = {0};\n\nvoid push(int);\n\nvoid pop();\n\nint main(){\n    string a;\n    int n;\n    while(true){\n        cout &lt;&lt; \"Please input operations (push/pop/-1 to exit): \" &lt;&lt; endl;\n        cin &gt;&gt; a;\n\n        if(a==\"-1\"){break;}\n\n        if(a==\"push\"){\n            cout &lt;&lt; \"Please input ints (-1 to exit): \" &lt;&lt; endl;\n            while(true){\n                cin &gt;&gt; n;\n                if(n==-1){break;}\n                push(n);\n            }\n        }\n        else if(a==\"pop\"){pop();}\n    }\n\n    return 0;\n}\n\nvoid push(int n){\n    A[i] = n;\n    i++;\n}\n\nvoid pop(){\n    i--;\n    cout &lt;&lt; A[i] &lt;&lt; endl;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex3-input.txt/","title":"ex3 input","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex3-input.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    41 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 22 LAB Exercises on Command Line\n    \u2514\u2500\u2500 ex3 input.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex3-input.txt/#preview","title":"Preview","text":"<pre><code>2 3 + 5 +\n10 10 10 + +\n2 3 + 5 #\n10 + 10\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex3.cpp/","title":"ex3","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex3.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    654 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 22 LAB Exercises on Command Line\n    \u2514\u2500\u2500 ex3.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex3.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nint ind=0;\nint A[100] = {0};\n\nvoid push(int);\n\nint pop();\n\nint main(int argc, char *argv[]){\n    if(string(argv[1])==\"rpn\"){\n        for(int i=2; i&lt;argc; i++){\n            try{push(stoi(argv[i]));}\n            catch(invalid_argument){\n                if(string(argv[i])==\"+\"){push(pop()+pop());}\n                else if(string(argv[i])==\"#\"){push(pop()*pop());}\n            }\n        }\n        cout &lt;&lt; \"Result: \" &lt;&lt; pop() &lt;&lt; endl;\n    }\n\n    return 0;\n}\n\nvoid push(int n){\n    A[ind] = n;\n    ind++;\n}\n\nint pop(){\n    if(ind &lt; 1){cout &lt;&lt; \"ERROR\" &lt;&lt; endl;}\n    else{ind--;}\n\n    return A[ind];\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex4-input.txt/","title":"ex4 input","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex4-input.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    41 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 22 LAB Exercises on Command Line\n    \u2514\u2500\u2500 ex4 input.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex4-input.txt/#preview","title":"Preview","text":"<pre><code>2 3 + 5 +\n10 10 10 + +\n2 3 + 5 #\n10 + 10\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex4.cpp/","title":"ex4","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex4.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    654 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 22 LAB Exercises on Command Line\n    \u2514\u2500\u2500 ex4.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex4.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nint ind=0;\nint A[100] = {0};\n\nvoid push(int);\n\nint pop();\n\nint main(int argc, char *argv[]){\n    if(string(argv[1])==\"rpn\"){\n        for(int i=2; i&lt;argc; i++){\n            try{push(stoi(argv[i]));}\n            catch(invalid_argument){\n                if(string(argv[i])==\"+\"){push(pop()+pop());}\n                else if(string(argv[i])==\"#\"){push(pop()*pop());}\n            }\n        }\n        cout &lt;&lt; \"Result: \" &lt;&lt; pop() &lt;&lt; endl;\n    }\n\n    return 0;\n}\n\nvoid push(int n){\n    A[ind] = n;\n    ind++;\n}\n\nint pop(){\n    if(ind &lt; 1){cout &lt;&lt; \"ERROR\" &lt;&lt; endl;}\n    else{ind--;}\n\n    return A[ind];\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex5-V1.cpp/","title":"ex5 V1","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex5-V1.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 22 LAB Exercises on Command Line\n    \u2514\u2500\u2500 ex5 V1.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex5-V1.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;fstream&gt;\n\nconst int H = 307;\n\nsize_t find_seperator(string,string,int);\n\nstring get_word(string,size_t,size_t);\n\nint cut_head(string);\n\nint main(int argc, char *argv[]){\n    string fName = string(argv[1]);\n\n    fstream fIn;\n    fIn.open(fName, ios::in);\n    if(!(fIn.is_open())){cout &lt;&lt; \"Missing file name!\" &lt;&lt; endl; return 0;}\n\n    string fLine,fWord;\n    getline(fIn,fLine);\n\n    int sum1=0, sum2=0, km=0;\n    for(int i=0; i&lt;H; i++){\n        getline(fIn,fLine);\n\n        sum1 += stoi(get_word(fLine,find_seperator(fLine,\",\",4),find_seperator(fLine,\",\",5)));\n        sum2 += stoi(get_word(fLine,find_seperator(fLine,\",\",5),find_seperator(fLine,\",\",6)));\n\n        fWord = get_word(fLine,find_seperator(fLine,\",\",8),find_seperator(fLine,\" km\",2));\n\n        try{km += stoi(fWord);}\n        catch(invalid_argument){\n            km += cut_head(fWord);\n        }\n    }\n\n    fIn.close();\n\n    cout &lt;&lt; endl &lt;&lt; \"sum of the population in 2016: \" &lt;&lt; sum1 &lt;&lt; endl;\n    cout &lt;&lt; endl &lt;&lt; \"sum of the population in 2010: \" &lt;&lt; sum2 &lt;&lt; endl;\n    cout &lt;&lt; endl &lt;&lt; \"growth percentage: \" &lt;&lt; (float(sum1)/float(sum2)-1)*100 &lt;&lt; \"%\" &lt;&lt; endl;\n    cout &lt;&lt; endl &lt;&lt; \"sum of the size in km2: \" &lt;&lt; km &lt;&lt; endl;\n    cout &lt;&lt; endl &lt;&lt; \"density (inhabitants per km2): \" &lt;&lt; float(sum1)/float(km) &lt;&lt; endl;\n\n    fstream fOut1,fOut2,fOut3;\n    fOut1.open(\"ex5-V1-output-1.txt\", ios :: out | ios :: app);\n    fOut2.open(\"ex5-V1-output-2.txt\", ios :: out | ios :: app);\n    fOut3.open(\"ex5-V1-output-3.txt\", ios :: out | ios :: app);\n\n    fOut1 &lt;&lt; sum1 &lt;&lt; endl;\n    fOut2 &lt;&lt; (float(sum1)/float(sum2)-1)*100 &lt;&lt; \"%\" &lt;&lt; endl;\n    fOut3 &lt;&lt; float(sum1)/float(km) &lt;&lt; endl;\n\n    fOut1.close();\n    fOut2.close();\n    fOut3.close();\n\n    return 0;\n}\n\nsize_t find_seperator(string fLine, string key, int p){\n    size_t s;\n\n    for(int i=0; i&lt;p; i++){s = fLine.find(key,s+1);}\n\n    return s;\n}\n\nstring get_word(string fLine, size_t s1, size_t s2){\n    char fWord[s2-s1];\n    for(int i=0; i&lt;(s2-s1-1); i++){fWord[i] = fLine[s1+i+1];}\n    fWord[s2-s1-1] = '\\0';\n    return fWord;\n}\n\nint cut_head(string fWord){\n    int len=0;\n    while(fWord[len]!='\\0'){len++;}\n\n    char fNum[len];\n    for(int i=0; i&lt;(len-1); i++){fNum[i] = fWord[i+1];}\n    fNum[len-1] = '\\0';\n\n    return stoi(fNum);\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex5-V2.cpp/","title":"ex5 V2","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex5-V2.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 22 LAB Exercises on Command Line\n    \u2514\u2500\u2500 ex5 V2.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex5-V2.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;fstream&gt;\n\nconst int H = 307;\n\nsize_t find_seperator(string,string,int);\n\nstring get_word(string,size_t,size_t);\n\nint cut_head(string);\n\nint main(int argc, char *argv[]){\n    string fName = string(argv[1]);\n\n    fstream fIn;\n    fIn.open(fName, ios::in);\n    if(!(fIn.is_open())){cout &lt;&lt; \"Missing file name!\" &lt;&lt; endl; return 0;}\n\n    string fLine,fWord;\n    getline(fIn,fLine);\n\n    int sum1=0, sum2=0, km=0;\n    for(int i=0; i&lt;H; i++){\n        getline(fIn,fLine);\n\n        sum1 += stoi(get_word(fLine,find_seperator(fLine,\",\",4),find_seperator(fLine,\",\",5)));\n        sum2 += stoi(get_word(fLine,find_seperator(fLine,\",\",5),find_seperator(fLine,\",\",6)));\n\n        fWord = get_word(fLine,find_seperator(fLine,\",\",8),find_seperator(fLine,\" km\",2));\n\n        try{km += stoi(fWord);}\n        catch(invalid_argument){\n            km += cut_head(fWord);\n        }\n    }\n\n    fIn.close();\n\n    cout &lt;&lt; endl &lt;&lt; \"sum of the population in 2016: \" &lt;&lt; sum1 &lt;&lt; endl;\n    cout &lt;&lt; endl &lt;&lt; \"sum of the population in 2010: \" &lt;&lt; sum2 &lt;&lt; endl;\n    cout &lt;&lt; endl &lt;&lt; \"growth percentage: \" &lt;&lt; (float(sum1)/float(sum2)-1)*100 &lt;&lt; \"%\" &lt;&lt; endl;\n    cout &lt;&lt; endl &lt;&lt; \"sum of the size in km2: \" &lt;&lt; km &lt;&lt; endl;\n    cout &lt;&lt; endl &lt;&lt; \"density (inhabitants per km2): \" &lt;&lt; float(sum1)/float(km) &lt;&lt; endl;\n\n    fstream fOut;\n    fOut.open(\"ex5-V2-output.txt\", ios :: out | ios :: app);\n\n    fOut &lt;&lt; sum1 &lt;&lt; endl;\n    fOut &lt;&lt; (float(sum1)/float(sum2)-1)*100 &lt;&lt; \"%\" &lt;&lt; endl;\n    fOut &lt;&lt; float(sum1)/float(km) &lt;&lt; endl;\n\n    fOut.close();\n\n    return 0;\n}\n\nsize_t find_seperator(string fLine, string key, int p){\n    size_t s;\n\n    for(int i=0; i&lt;p; i++){s = fLine.find(key,s+1);}\n\n    return s;\n}\n\nstring get_word(string fLine, size_t s1, size_t s2){\n    char fWord[s2-s1];\n    for(int i=0; i&lt;(s2-s1-1); i++){fWord[i] = fLine[s1+i+1];}\n    fWord[s2-s1-1] = '\\0';\n    return fWord;\n}\n\nint cut_head(string fWord){\n    int len=0;\n    while(fWord[len]!='\\0'){len++;}\n\n    char fNum[len];\n    for(int i=0; i&lt;(len-1); i++){fNum[i] = fWord[i+1];}\n    fNum[len-1] = '\\0';\n\n    return stoi(fNum);\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex5-V3.cpp/","title":"ex5 V3","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex5-V3.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    3 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 22 LAB Exercises on Command Line\n    \u2514\u2500\u2500 ex5 V3.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex5-V3.cpp/#preview","title":"Preview","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n#include &lt;cstring&gt;\n\nusing namespace std;\n\nvoid split(string fields[], string line, char delimiter);\n\n// debug global, so that we do not need to pass it to functions as an extra\n// argument\nbool debug = false;\n\nint main(int argc, char *argv[]) {\n  char delimiter = ',';\n  int field = 1;\n\n  // parse command options\n  for (int i = 0; i &lt; argc; i++) {\n    // look for a substring and get the argument\n    if (strstr(argv[i], \"-d\")) {\n      int string_size = strlen(argv[i]);\n      delimiter = argv[i][string_size - 1];\n    }\n\n    if (strstr(argv[i], \"-f\")) {\n      int string_size = strlen(argv[i]);\n\n      // Smart:\n      // field = atoi(argv[i] + 2);\n\n      // More readable:\n      string str = argv[i];\n      field = stoi(str.substr(2));\n    }\n\n    // strcmp returns 0 if strings equal (no differences)\n    if (!strcmp(argv[i], \"--debug\")) {\n      debug = true;\n    }\n  }\n\n  if (debug) {\n    cout &lt;&lt; \"Arguments: \" &lt;&lt; endl;\n    cout &lt;&lt; delimiter &lt;&lt; endl;\n    cout &lt;&lt; field &lt;&lt; endl;\n  }\n\n  string line;\n  string fields[100];\n\n  // getline returns NULL (?) when no further lines to process\n  // we use stdin so that we can use redirection\n  while (getline(cin, line)) {\n    split(fields, line, delimiter);\n\n    if (debug) {\n      cout &lt;&lt; \"LINE IS: \" &lt;&lt; line &lt;&lt; endl;\n      cout &lt;&lt; \"FIELDS ARE: \" &lt;&lt; endl;\n      int index = 0;\n      while (fields[index] != \"\") {\n        cout &lt;&lt; fields[index++] &lt;&lt; endl;\n      }\n      cout &lt;&lt; \"END FIELDS\" &lt;&lt; endl;\n    }\n\n    cout &lt;&lt; fields[field - 1] &lt;&lt; endl;\n  }\n}\n\n// where we store fields (allocated externally)\n// the line we parse\n// the delimiter we are looking for\nvoid split(string fields[], string line, char delimiter) {\n  // reset\n  for (int i = 0; i &lt; 100; i++) {\n    fields[i] = \"\";\n  }\n\n  // fill\n\n  // we iterate over the string using two cursors:\n  //\n  // - current_pos, where we start from\n  // - found_pos, where we found the next field delimiter\n  // \n  // in a single step:\n  //\n  // (colon processed at the previous step)\n  // v\n  // :systemd-journal:\n  //  ^              ^\n  //  current_pos    found\n  //  &lt;------ len ---&gt;\n  //\n  // then we move current_pos after found and continue\n\n  // where we have looked so far\n  int current_pos = 0;\n  // where we find the next :\n  int found_pos = 0;\n  // the field we are currently storing\n  int index = 0;\n\n  // super-though: read, assign, compare, and use the return value for while\n  while ((found_pos = line.find(delimiter, current_pos)) != string::npos) {\n\n    if (debug) {\n      cout &lt;&lt; line &lt;&lt; endl;\n      cout &lt;&lt; \"CURRENT POS: \" &lt;&lt; current_pos &lt;&lt; endl;\n      cout &lt;&lt; \"FOUND POS: \" &lt;&lt; found_pos &lt;&lt; endl;\n    }\n\n    string record = line.substr(current_pos, found_pos - current_pos);\n\n    if (debug) {\n      cout &lt;&lt; \"SUBSTR: \" &lt;&lt; record &lt;&lt; endl &lt;&lt; endl;\n    }\n\n    fields[index++] = record;\n    current_pos = found_pos + 1;\n  }\n\n  // what if we don't do this?\n  if (current_pos &lt; line.length()) {\n    fields[index] = line.substr(current_pos, string::npos);\n  }\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex5-V4.cpp/","title":"ex5 V4","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex5-V4.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    3 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 22 LAB Exercises on Command Line\n    \u2514\u2500\u2500 ex5 V4.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex5-V4.cpp/#preview","title":"Preview","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n#include &lt;cstring&gt;\n\nusing namespace std;\n\nvoid split(string fields[], string line, char delimiter);\n\n// debug global, so that we do not need to pass it to functions as an extra\n// argument\nbool debug = false;\n\nint main(int argc, char *argv[]) {\n  char delimiter = ',';\n  int field = 1;\n\n  // parse command options\n  for (int i = 0; i &lt; argc; i++) {\n    // look for a substring and get the argument\n    if (strstr(argv[i], \"-d\")) {\n      int string_size = strlen(argv[i]);\n      delimiter = argv[i][string_size - 1];\n    }\n\n    if (strstr(argv[i], \"-f\")) {\n      int string_size = strlen(argv[i]);\n\n      // Smart:\n      // field = atoi(argv[i] + 2);\n\n      // More readable:\n      string str = argv[i];\n      field = stoi(str.substr(2));\n    }\n\n    // strcmp returns 0 if strings equal (no differences)\n    if (!strcmp(argv[i], \"--debug\")) {\n      debug = true;\n    }\n  }\n\n  if (debug) {\n    cout &lt;&lt; \"Arguments: \" &lt;&lt; endl;\n    cout &lt;&lt; delimiter &lt;&lt; endl;\n    cout &lt;&lt; field &lt;&lt; endl;\n  }\n\n  string line;\n  string fields[100];\n\n  // getline returns NULL (?) when no further lines to process\n  // we use stdin so that we can use redirection\n  while (getline(cin, line)) {\n    split(fields, line, delimiter);\n\n    if (debug) {\n      cout &lt;&lt; \"LINE IS: \" &lt;&lt; line &lt;&lt; endl;\n      cout &lt;&lt; \"FIELDS ARE: \" &lt;&lt; endl;\n      int index = 0;\n      while (fields[index] != \"\") {\n        cout &lt;&lt; fields[index++] &lt;&lt; endl;\n      }\n      cout &lt;&lt; \"END FIELDS\" &lt;&lt; endl;\n    }\n\n    cout &lt;&lt; fields[field - 1] &lt;&lt; endl;\n  }\n}\n\n// where we store fields (allocated externally)\n// the line we parse\n// the delimiter we are looking for\nvoid split(string fields[], string line, char delimiter) {\n  // reset\n  for (int i = 0; i &lt; 100; i++) {\n    fields[i] = \"\";\n  }\n\n  // fill\n\n  // we iterate over the string using two cursors:\n  //\n  // - current_pos, where we start from\n  // - found_pos, where we found the next field delimiter\n  // \n  // in a single step:\n  //\n  // (colon processed at the previous step)\n  // v\n  // :systemd-journal:\n  //  ^              ^\n  //  current_pos    found\n  //  &lt;------ len ---&gt;\n  //\n  // then we move current_pos after found and continue\n\n  // where we have looked so far\n  int current_pos = 0;\n  // where we find the next :\n  int found_pos = 0;\n  // the field we are currently storing\n  int index = 0;\n\n  // super-though: read, assign, compare, and use the return value for while\n  while ((found_pos = line.find(delimiter, current_pos)) != string::npos) {\n\n    if (debug) {\n      cout &lt;&lt; line &lt;&lt; endl;\n      cout &lt;&lt; \"CURRENT POS: \" &lt;&lt; current_pos &lt;&lt; endl;\n      cout &lt;&lt; \"FOUND POS: \" &lt;&lt; found_pos &lt;&lt; endl;\n    }\n\n    string record = line.substr(current_pos, found_pos - current_pos);\n\n    if (debug) {\n      cout &lt;&lt; \"SUBSTR: \" &lt;&lt; record &lt;&lt; endl &lt;&lt; endl;\n    }\n\n    fields[index++] = record;\n    current_pos = found_pos + 1;\n  }\n\n  // what if we don't do this?\n  if (current_pos &lt; line.length()) {\n    fields[index] = line.substr(current_pos, string::npos);\n  }\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex5.cpp/","title":"ex5","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex5.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 22 LAB Exercises on Command Line\n    \u2514\u2500\u2500 ex5.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/ex5.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;fstream&gt;\n\nconst int H = 307;\n\nsize_t find_seperator(string,string,int);\n\nstring get_word(string,size_t,size_t);\n\nint cut_head(string);\n\nint main(int argc, char *argv[]){\n    string fName = string(argv[1]);\n\n    fstream fIn;\n    fIn.open(fName, ios::in);\n    if(!(fIn.is_open())){cout &lt;&lt; \"Missing file name!\" &lt;&lt; endl; return 0;}\n\n    string fLine,fWord;\n    getline(fIn,fLine);\n\n    int sum1=0, sum2=0, km=0;\n    for(int i=0; i&lt;H; i++){\n        getline(fIn,fLine);\n\n        sum1 += stoi(get_word(fLine,find_seperator(fLine,\",\",4),find_seperator(fLine,\",\",5)));\n        sum2 += stoi(get_word(fLine,find_seperator(fLine,\",\",5),find_seperator(fLine,\",\",6)));\n\n        fWord = get_word(fLine,find_seperator(fLine,\",\",8),find_seperator(fLine,\" km\",2));\n\n        try{km += stoi(fWord);}\n        catch(invalid_argument){\n            km += cut_head(fWord);\n        }\n    }\n\n    fIn.close();\n\n    cout &lt;&lt; endl &lt;&lt; \"sum of the population in 2016: \" &lt;&lt; sum1 &lt;&lt; endl;\n    cout &lt;&lt; endl &lt;&lt; \"sum of the population in 2010: \" &lt;&lt; sum2 &lt;&lt; endl;\n    cout &lt;&lt; endl &lt;&lt; \"growth percentage: \" &lt;&lt; (float(sum1)/float(sum2)-1)*100 &lt;&lt; \"%\" &lt;&lt; endl;\n    cout &lt;&lt; endl &lt;&lt; \"sum of the size in km2: \" &lt;&lt; km &lt;&lt; endl;\n    cout &lt;&lt; endl &lt;&lt; \"density (inhabitants per km2): \" &lt;&lt; float(sum1)/float(km) &lt;&lt; endl;\n\n    return 0;\n}\n\nsize_t find_seperator(string fLine, string key, int p){\n    size_t s;\n\n    for(int i=0; i&lt;p; i++){s = fLine.find(key,s+1);}\n\n    return s;\n}\n\nstring get_word(string fLine, size_t s1, size_t s2){\n    char fWord[s2-s1];\n    for(int i=0; i&lt;(s2-s1-1); i++){fWord[i] = fLine[s1+i+1];}\n    fWord[s2-s1-1] = '\\0';\n    return fWord;\n}\n\nint cut_head(string fWord){\n    int len=0;\n    while(fWord[len]!='\\0'){len++;}\n\n    char fNum[len];\n    for(int i=0; i&lt;(len-1); i++){fNum[i] = fWord[i+1];}\n    fNum[len-1] = '\\0';\n\n    return stoi(fNum);\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/us_cities.csv/","title":"us cities","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/us_cities.csv/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    csv</li> <li>Size:    36 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 22 LAB Exercises on Command Line\n    \u2514\u2500\u2500 us cities.csv\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_22_LAB_Exercises_on_Command_Line/us_cities.csv/#preview","title":"Preview","text":"<p>Please imagine there is a CSV table</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_23_LAB_Exercises_with_time_constraint/","title":"Lecture 23 LAB Exercises with time constraint","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_23_LAB_Exercises_with_time_constraint/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 2 items</li> <li>Size:  2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 23 LAB Exercises with time constraint\n</code></pre> Name Type Item Size ex1 cpp / 314 B ex2 cpp / 1 KiB"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_23_LAB_Exercises_with_time_constraint/ex1.cpp/","title":"ex1","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_23_LAB_Exercises_with_time_constraint/ex1.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    314 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 23 LAB Exercises with time constraint\n    \u2514\u2500\u2500 ex1.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_23_LAB_Exercises_with_time_constraint/ex1.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nfloat recursive(float);\n\nint main(){\n    int N;\n    cout &lt;&lt; \"Please input an interger (&gt;= 0): \";\n    cin &gt;&gt; N;\n\n    cout &lt;&lt; \"Sum: \" &lt;&lt; recursive(N) &lt;&lt; endl;\n\n    return 0;\n}\n\nfloat recursive(float N){\n    if (N == 0) {return 0;}\n    else {return (recursive(N-1) + 1/N);}\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_23_LAB_Exercises_with_time_constraint/ex2.cpp/","title":"ex2","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_23_LAB_Exercises_with_time_constraint/ex2.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 23 LAB Exercises with time constraint\n    \u2514\u2500\u2500 ex2.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_23_LAB_Exercises_with_time_constraint/ex2.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nvoid rM(int*,int,int);\n\nfloat rAVERAGE(int*,int);\n\nint rMIN(int*,int);\n\nint rMAX(int*,int);\n\nint main(){\n    int M=4,N=5;\n\n    cout &lt;&lt; \"Please input \" &lt;&lt; (M*N) &lt;&lt; \" integers: \" &lt;&lt; endl;\n    int V[M][N] = {0};\n    for (int i = 0; i &lt; M; i++){\n        for (int j = 0; j &lt; N; j++){cin &gt;&gt; V[i][j];}}\n\n    cout &lt;&lt; endl &lt;&lt; \"Student: \" &lt;&lt; endl;\n    rM(&amp;V[0][0],M,N);\n\n    int W[N][M] = {0};\n    for (int i = 0; i &lt; N; i++){\n        for (int j = 0; j &lt; M; j++){W[i][j]=V[j][i];}}\n\n    cout &lt;&lt; endl &lt;&lt; \"Class: \" &lt;&lt; endl;\n    rM(&amp;W[0][0],N,M);\n\n    return 0;\n}\n\nvoid rM(int *V, int M, int N){\n    for(int i=0; i&lt;M; i++){\n        cout &lt;&lt; \" \" &lt;&lt; i &lt;&lt; \"): \" &lt;&lt; endl;\n        cout &lt;&lt; \"  Average: \" &lt;&lt; rAVERAGE(V+i*N,N) &lt;&lt; endl;\n        cout &lt;&lt; \"  Min:     \" &lt;&lt; rMIN(V+i*N,N) &lt;&lt; endl;\n        cout &lt;&lt; \"  Max:     \" &lt;&lt; rMAX(V+i*N,N) &lt;&lt; endl;\n    }  \n}\n\nfloat rAVERAGE(int *V, int l){\n    float res=0;\n    for(int i=0; i&lt;l; i++){res += *(V+i);}\n    return (res/l);\n}\n\nint rMIN(int *V,int l){\n    float res=*V;\n    for(int i=1; i&lt;l; i++){res = (res&lt;*(V+i))?res:*(V+i);}\n    return (res);\n}\n\nint rMAX(int *V,int l){\n    float res=*V;\n    for(int i=1; i&lt;l; i++){res = (res&gt;*(V+i))?res:*(V+i);}\n    return (res);\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/","title":"Lecture 26 LAB Strings and Command line Arguments","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 27 items</li> <li>Size:  10 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 26 LAB Strings and Command line Arguments\n</code></pre> Name Type Item Size ex1 cpp / 343 B ex2 cpp / 976 B ex3 B txt / 5 B ex3a cpp / 495 B ex3b B txt / 5 B ex3b cpp / 495 B ex3c A txt / 5 B ex3c B txt / 5 B ex3c cpp / 620 B ex4 A txt / 7 B ex4 B txt / 7 B ex4 cpp / 888 B ex5a input txt / 23 B ex5a cpp / 618 B ex5b input txt / 23 B ex5b cpp / 718 B ex6 A txt / 7 B ex6 B txt / 14 B ex6 cpp / 638 B ex7a input txt / 22 B ex7a cpp / 741 B ex7b input txt / 22 B ex7b cpp / 741 B ex8 cpp / 1 KiB ex9a cpp / 611 B ex9b input txt / 55 B ex9b cpp / 1 KiB"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex1.cpp/","title":"ex1","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex1.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    343 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 26 LAB Strings and Command line Arguments\n    \u2514\u2500\u2500 ex1.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex1.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n\nint main(){\n    char S[100];\n    cout &lt;&lt; \"Please input a string (max length 100): \" &lt;&lt; endl;\n    cin.getline(S,100);\n\n    int len=strlen(S), count=1; cout &lt;&lt; len &lt;&lt; endl;\n    for(int i=0; i&lt;len; i++){if(S[i]==' '){count++;}}\n\n    cout &lt;&lt; \"Words: \" &lt;&lt; count &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex2.cpp/","title":"ex2","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex2.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    976 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 26 LAB Strings and Command line Arguments\n    \u2514\u2500\u2500 ex2.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex2.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n\nint factorio(int);\n\nvoid pmt(char*,char*,int,int);\n\nint main(){\n    char S[100], P[100];\n    cout &lt;&lt; \"Please input a string (max length 100): \" &lt;&lt; endl;\n    cin.getline(S,100);\n\n    int len = strlen(S);\n    int fac = factorio(len);\n\n    cout &lt;&lt; \"n=\" &lt;&lt; len &lt;&lt; \" -&gt; nr.Permutations: \" &lt;&lt; len &lt;&lt; \"!=\" &lt;&lt; fac &lt;&lt; endl;\n\n    pmt(&amp;P[0],&amp;S[0],0,len);\n\n    return 0;\n}\n\nint factorio(int N){\n    if (N == 0) {return 1;}\n    else {return (factorio(N-1) * N);}\n}\n\nvoid pmt(char *S1, char *S2, int len1, int len2){\n    if(len2 == 1){cout &lt;&lt; \" \" &lt;&lt; S1 &lt;&lt; S2 &lt;&lt; endl;}\n    else{\n        char P1[len1];\n        strncpy(P1,S1,len1);\n\n        char P2[len2-1];\n        for(int i=0; i&lt;len2; i++){\n            P1[len1] = S2[i];\n            P1[len1+1] = '\\0';\n\n            for(int j=0; j&lt;i; j++){P2[j] = S2[j];}\n            for(int j=i; j&lt;len2; j++){P2[i+j] = S2[i+j+1];}\n\n            pmt(&amp;P1[0],&amp;P2[0],len1+1,len2-1);\n        }\n    }\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex3-B.txt/","title":"ex3 B","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex3-B.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    5 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 26 LAB Strings and Command line Arguments\n    \u2514\u2500\u2500 ex3 B.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex3-B.txt/#preview","title":"Preview","text":"<pre><code>abcd\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex3a.cpp/","title":"ex3a","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex3a.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    495 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 26 LAB Strings and Command line Arguments\n    \u2514\u2500\u2500 ex3a.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex3a.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;fstream&gt;\n\nint main(int argc, char *argv[]){\n    if(argc!=3) {cout &lt;&lt; \"Incorrect input words number!\" &lt;&lt; endl; return 0;}\n\n    string fA = argv[1], fB = argv[2];\n\n    fstream inA, inB;\n    inA.open(fA, ios :: out | ios :: app);\n    inB.open(fB, ios::in);\n\n    if(!(inA.is_open())) {cout &lt;&lt; \"Missing file name!\" &lt;&lt; endl; return 0;}\n\n    string f;\n\n    inB &gt;&gt; f;\n    inA &lt;&lt; f;\n\n    inA.close();\n    inB.close();\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex3b-B.txt/","title":"ex3b B","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex3b-B.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    5 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 26 LAB Strings and Command line Arguments\n    \u2514\u2500\u2500 ex3b B.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex3b-B.txt/#preview","title":"Preview","text":"<pre><code>abcd\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex3b.cpp/","title":"ex3b","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex3b.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    495 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 26 LAB Strings and Command line Arguments\n    \u2514\u2500\u2500 ex3b.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex3b.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;fstream&gt;\n\nint main(int argc, char *argv[]){\n    if(argc!=3) {cout &lt;&lt; \"Incorrect input words number!\" &lt;&lt; endl; return 0;}\n\n    string fA = argv[1], fB = argv[2];\n\n    fstream inA, inB;\n    inA.open(fA, ios :: out | ios :: app);\n    inB.open(fB, ios::in);\n\n    if(!(inA.is_open())) {cout &lt;&lt; \"Missing file name!\" &lt;&lt; endl; return 0;}\n\n    string f;\n\n    inB &gt;&gt; f;\n    inA &lt;&lt; f;\n\n    inA.close();\n    inB.close();\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex3c-A.txt/","title":"ex3c A","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex3c-A.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    5 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 26 LAB Strings and Command line Arguments\n    \u2514\u2500\u2500 ex3c A.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex3c-A.txt/#preview","title":"Preview","text":"<pre><code>eghj\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex3c-B.txt/","title":"ex3c B","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex3c-B.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    5 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 26 LAB Strings and Command line Arguments\n    \u2514\u2500\u2500 ex3c B.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex3c-B.txt/#preview","title":"Preview","text":"<pre><code>abcd\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex3c.cpp/","title":"ex3c","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex3c.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    620 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 26 LAB Strings and Command line Arguments\n    \u2514\u2500\u2500 ex3c.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex3c.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;fstream&gt;\n\nint main(int argc, char *argv[]){\n    if(argc!=4) {cout &lt;&lt; \"Incorrect input words number!\" &lt;&lt; endl; return 0;}\n\n    string fA = argv[1], fB = argv[2], fC = argv[3];\n\n    fstream inA, inB, outC;\n    inA.open(fA, ios::in);\n    inB.open(fB, ios::in);\n    outC.open(fC, ios :: out | ios :: app);\n\n    if(!(inA.is_open()) || !(inB.is_open())) {cout &lt;&lt; \"Missing file name!\" &lt;&lt; endl; return 0;}\n\n    string f1,f2;\n\n    inA &gt;&gt; f1;\n    inB &gt;&gt; f2;\n\n    outC &lt;&lt; f1;\n    outC &lt;&lt; f2;\n\n    inA.close();\n    inB.close();\n    outC.close();\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex4-A.txt/","title":"ex4 A","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex4-A.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    7 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 26 LAB Strings and Command line Arguments\n    \u2514\u2500\u2500 ex4 A.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex4-A.txt/#preview","title":"Preview","text":"<pre><code>12\n5\n3\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex4-B.txt/","title":"ex4 B","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex4-B.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    7 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 26 LAB Strings and Command line Arguments\n    \u2514\u2500\u2500 ex4 B.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex4-B.txt/#preview","title":"Preview","text":"<pre><code>12 5 3\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex4.cpp/","title":"ex4","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex4.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    888 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 26 LAB Strings and Command line Arguments\n    \u2514\u2500\u2500 ex4.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex4.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;fstream&gt;\n\nint main(int argc, char *argv[]){\n    if(argc!=4) {cout &lt;&lt; \"Incorrect input words number!\" &lt;&lt; endl; return 0;}\n\n    string fA = argv[1], fB = argv[2], fC = argv[3];\n\n    fstream inA, inB, outC;\n    inA.open(fA, ios::in);\n    inB.open(fB, ios::in);\n    outC.open(fC, ios :: out | ios :: app);\n\n    if(!(inA.is_open()) || !(inB.is_open())) {cout &lt;&lt; \"Missing file name!\" &lt;&lt; endl; return 0;}\n\n    string f;\n    int A[100] = {0}, B[100] = {0}, n1=0, n2=0;\n    while(inA &gt;&gt; f) {n1++; A[n1-1]=stoi(f);}\n    while(inB &gt;&gt; f) {n2++; B[n2-1]=stoi(f);}\n\n    int a1 = 0, a2 = 0;\n    for(int i=0; i&lt;n1; i++){a1 += A[i];}\n    for(int i=0; i&lt;n2; i++){a2 += B[i];}\n\n    outC &lt;&lt; (float(a1)/float(n1)) &lt;&lt; endl;\n    outC &lt;&lt; (float(a2)/float(n2)) &lt;&lt; endl;\n\n    inA.close();\n    inB.close();\n    outC.close();\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex5a-input.txt/","title":"ex5a input","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex5a-input.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    23 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 26 LAB Strings and Command line Arguments\n    \u2514\u2500\u2500 ex5a input.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex5a-input.txt/#preview","title":"Preview","text":"<pre><code>What a magnificent day\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex5a.cpp/","title":"ex5a","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex5a.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    618 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 26 LAB Strings and Command line Arguments\n    \u2514\u2500\u2500 ex5a.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex5a.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;fstream&gt;\n\nint main(int argc, char *argv[]){\n    if(argc!=3) {cout &lt;&lt; \"Incorrect input words number!\" &lt;&lt; endl; return 0;}\n\n    string fName = argv[1];\n\n    fstream fIn;\n    fIn.open(fName, ios::in);\n\n    if(!(fIn.is_open())) {cout &lt;&lt; \"Missing file name!\" &lt;&lt; endl; return 0;}\n\n    char f[100]; int len;\n    while(fIn &gt;&gt; f) {\n        len = strlen(f);\n        for(int i=0; i&lt;len; i++){\n            if(f[i]==*argv[2]){cout &lt;&lt; '?';}\n            else{cout &lt;&lt; f[i];}\n        }\n        cout &lt;&lt; ' ';\n    }\n    cout &lt;&lt; endl;\n\n    fIn.close();\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex5b-input.txt/","title":"ex5b input","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex5b-input.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    23 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 26 LAB Strings and Command line Arguments\n    \u2514\u2500\u2500 ex5b input.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex5b-input.txt/#preview","title":"Preview","text":"<pre><code>What a magnificent day\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex5b.cpp/","title":"ex5b","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex5b.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    718 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 26 LAB Strings and Command line Arguments\n    \u2514\u2500\u2500 ex5b.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex5b.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;fstream&gt;\n\nint main(int argc, char *argv[]){\n    if(argc!=5) {cout &lt;&lt; \"Incorrect input words number!\" &lt;&lt; endl; return 0;}\n\n    string fName = argv[1];\n\n    fstream fIn;\n    fIn.open(fName, ios::in);\n\n    if(!(fIn.is_open())) {cout &lt;&lt; \"Missing file name!\" &lt;&lt; endl; return 0;}\n\n    char f[100]; int len;\n    while(fIn &gt;&gt; f) {\n        len = strlen(f);\n        for(int i=0; i&lt;len; i++){\n            if(f[i]==*argv[2]){cout &lt;&lt; '?';}\n            else if(f[i]==*argv[3]){cout &lt;&lt; '!';}\n            else if(f[i]==*argv[4]){cout &lt;&lt; '#';}\n            else{cout &lt;&lt; f[i];}\n        }\n        cout &lt;&lt; ' ';\n    }\n    cout &lt;&lt; endl;\n\n    fIn.close();\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex6-A.txt/","title":"ex6 A","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex6-A.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    7 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 26 LAB Strings and Command line Arguments\n    \u2514\u2500\u2500 ex6 A.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex6-A.txt/#preview","title":"Preview","text":"<pre><code>12\n5\n3\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex6-B.txt/","title":"ex6 B","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex6-B.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    14 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 26 LAB Strings and Command line Arguments\n    \u2514\u2500\u2500 ex6 B.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex6-B.txt/#preview","title":"Preview","text":"<pre><code>hello2\nworld2\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex6.cpp/","title":"ex6","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex6.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    638 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 26 LAB Strings and Command line Arguments\n    \u2514\u2500\u2500 ex6.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex6.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;fstream&gt;\n\nint main(int argc, char *argv[]){\n    if(argc!=4) {cout &lt;&lt; \"Incorrect input words number!\" &lt;&lt; endl; return 0;}\n\n    string fA = argv[1], fB = argv[2], fC = argv[3];\n\n    fstream inA, inB, outC;\n    inA.open(fA, ios::in);\n    inB.open(fB, ios::in);\n    outC.open(fC, ios :: out | ios :: app);\n\n    if(!(inA.is_open()) || !(inB.is_open())) {cout &lt;&lt; \"Missing file name!\" &lt;&lt; endl; return 0;}\n\n    string f;\n    while(inA &gt;&gt; f) {outC &lt;&lt; f &lt;&lt; endl;}\n    while(inB &gt;&gt; f) {outC &lt;&lt; f &lt;&lt; endl;}\n\n    inA.close();\n    inB.close();\n    outC.close();\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex7a-input.txt/","title":"ex7a input","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex7a-input.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    22 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 26 LAB Strings and Command line Arguments\n    \u2514\u2500\u2500 ex7a input.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex7a-input.txt/#preview","title":"Preview","text":"<pre><code>3 3\n1 2 3\n4 5 6\n7 8 9\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex7a.cpp/","title":"ex7a","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex7a.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    741 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 26 LAB Strings and Command line Arguments\n    \u2514\u2500\u2500 ex7a.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex7a.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;fstream&gt;\n\nint main(int argc, char *argv[]){\n    if(argc!=2) {cout &lt;&lt; \"Incorrect input words number!\" &lt;&lt; endl; return 0;}\n\n    string fName = argv[1];\n\n    fstream fIn;\n    fIn.open(fName, ios::in);\n\n    if(!(fIn.is_open())) {cout &lt;&lt; \"Missing file name!\" &lt;&lt; endl; return 0;}\n\n    int m; fIn &gt;&gt; m;\n    int n; fIn &gt;&gt; n;\n\n    int A[m][n] = {0};\n    for(int i=0; i&lt;m; i++){\n        for(int j=0; j&lt;n; j++){fIn &gt;&gt; A[i][j];}\n    }\n\n    int B[n][m] = {0};\n    for(int i=0; i&lt;n; i++){\n        for(int j=0; j&lt;m; j++){B[i][j] = A[j][i];}\n    }\n\n    for(int i=0; i&lt;n; i++){\n        for(int j=0; j&lt;m; j++){cout &lt;&lt; B[i][j] &lt;&lt; \" \";} cout &lt;&lt; endl;\n    }\n\n    fIn.close();\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex7b-input.txt/","title":"ex7b input","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex7b-input.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    22 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 26 LAB Strings and Command line Arguments\n    \u2514\u2500\u2500 ex7b input.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex7b-input.txt/#preview","title":"Preview","text":"<pre><code>3 3\n1 2 3\n4 5 6\n7 8 9\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex7b.cpp/","title":"ex7b","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex7b.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    741 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 26 LAB Strings and Command line Arguments\n    \u2514\u2500\u2500 ex7b.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex7b.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;fstream&gt;\n\nint main(int argc, char *argv[]){\n    if(argc!=2) {cout &lt;&lt; \"Incorrect input words number!\" &lt;&lt; endl; return 0;}\n\n    string fName = argv[1];\n\n    fstream fIn;\n    fIn.open(fName, ios::in);\n\n    if(!(fIn.is_open())) {cout &lt;&lt; \"Missing file name!\" &lt;&lt; endl; return 0;}\n\n    int m; fIn &gt;&gt; m;\n    int n; fIn &gt;&gt; n;\n\n    int A[m][n] = {0};\n    for(int i=0; i&lt;m; i++){\n        for(int j=0; j&lt;n; j++){fIn &gt;&gt; A[i][j];}\n    }\n\n    int B[n][m] = {0};\n    for(int i=0; i&lt;n; i++){\n        for(int j=0; j&lt;m; j++){B[i][j] = A[j][i];}\n    }\n\n    for(int i=0; i&lt;n; i++){\n        for(int j=0; j&lt;m; j++){cout &lt;&lt; B[i][j] &lt;&lt; \" \";} cout &lt;&lt; endl;\n    }\n\n    fIn.close();\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex8.cpp/","title":"ex8","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex8.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 26 LAB Strings and Command line Arguments\n    \u2514\u2500\u2500 ex8.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex8.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint* rM(int*,int*,int*,int,int,int);\n\nint* rA(int*,int*,int*,int,int,int);\n\nint rSUM(int*,int*,int,int);\n\nint main(){\n    int M,N,Q;\n    cout &lt;&lt; \"Please input three integers: \" &lt;&lt; endl;\n    cin &gt;&gt; M &gt;&gt; N &gt;&gt; Q;\n\n    cout &lt;&lt; \"Please input \" &lt;&lt; (M*N) &lt;&lt; \" integers: \" &lt;&lt; endl;\n    int V[M][N] = {0};\n    for (int i = 0; i &lt; M; i++){\n        for (int j = 0; j &lt; N; j++){cin &gt;&gt; V[i][j];}}\n\n    cout &lt;&lt; \"Please input \" &lt;&lt; (Q*N) &lt;&lt; \" integers: \" &lt;&lt; endl;\n    int W[N][Q] = {0};\n    for (int i = 0; i &lt; N; i++){\n        for (int j = 0; j &lt; Q; j++){cin &gt;&gt; W[i][j];}}\n\n    cout &lt;&lt; \"Matricial product: \" &lt;&lt; endl;\n    int Y[M][Q] = {0};\n    rM(&amp;V[0][0],&amp;W[0][0],&amp;Y[M-1][Q-1],M,N,Q);\n\n    for (int i = 0; i &lt; M; i++){\n        for (int j = 0; j &lt; Q; j++){cout &lt;&lt; Y[i][j] &lt;&lt; \" \";}\n        cout &lt;&lt; endl;\n    }\n\n    return 0;\n}\n\nint* rM(int *V, int *W, int *Y, int M, int N, int Q){\n    if (M == 0) {return (Y+Q);}\n    else {\n        rA(V,W,rM(V, W, Y-Q, M-1, N, Q),M,N,Q);\n        return (Y+Q);\n    }\n}\n\nint* rA(int *V, int *W, int *Y, int M, int N, int Q){\n    if (Q == 0) {return (Y+1);}\n    else {\n        *rA(V, W, Y-1, M, N, Q-1) = rSUM(V+(M-1)*N, W+(Q-1), N, N);\n        return (Y+1);\n    }\n}\n\nint rSUM(int *V, int *W, int N, int i){\n    if (i == 1) {return ((*V)*(*W));}\n    else {return (((*V)*(*W)) + rSUM(V+1,W+N,N,i-1));}\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex9a.cpp/","title":"ex9a","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex9a.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    611 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 26 LAB Strings and Command line Arguments\n    \u2514\u2500\u2500 ex9a.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex9a.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint main(int argc, char *argv[]){\n    int input;\n    cout &lt;&lt; \"Please input a number:\";\n    cin &gt;&gt; input;\n\n    int num=input, A[100] = {0};\n    int re=num, i=0;\n    while(re&gt;10){\n        num = re;\n        re /= 10;\n        A[i] = num%re;\n        i++;\n    }\n    A[i] = re;\n    i++;\n\n    int product, res=0;\n    for(int j=0; j&lt;i; j++){\n        product = 1;\n        for(int k=0; k&lt;i; k++){product *= A[j];}\n        res += product;\n    }\n\n    if(res==input){cout &lt;&lt; \"Armostrong number\" &lt;&lt; endl;}\n    else{cout &lt;&lt; \"not an Armostrong number\" &lt;&lt; endl;}\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex9b-input.txt/","title":"ex9b input","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex9b-input.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    55 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 26 LAB Strings and Command line Arguments\n    \u2514\u2500\u2500 ex9b input.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex9b-input.txt/#preview","title":"Preview","text":"<pre><code>407 85 8964 2952 1453 1024 1109 2005 20051109 89642952\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex9b.cpp/","title":"ex9b","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex9b.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 26 LAB Strings and Command line Arguments\n    \u2514\u2500\u2500 ex9b.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_26_LAB_Strings_and_Command_line_Arguments/ex9b.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;fstream&gt;\n\nbool amtNum(int);\n\nint main(int argc, char *argv[]){\n    if(argc!=2) {cout &lt;&lt; \"Incorrect input words number!\" &lt;&lt; endl; return 0;}\n\n    string fName = argv[1];\n\n    fstream fIn;\n    fIn.open(fName, ios::in);\n\n    if(!(fIn.is_open())) {cout &lt;&lt; \"Missing file name!\" &lt;&lt; endl; return 0;}\n\n    int A[10];\n    for(int i=0; i&lt;10; i++){fIn &gt;&gt; A[i];}\n\n    for(int i=0; i&lt;10; i++){\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \"Number: \" &lt;&lt; A[i] &lt;&lt; endl;\n        cout &lt;&lt; \" - \";\n\n        if(amtNum(A[i])){cout &lt;&lt; \"Armostrong number\" &lt;&lt; endl;}\n        else{cout &lt;&lt; \"not an Armostrong number\" &lt;&lt; endl;}\n    }\n\n    fIn.close();\n\n    return 0;\n}\n\nbool amtNum(int input){\n    int num=input, A[100] = {0};\n    int re=num, i=0;\n    while(re&gt;10){\n        num = re;\n        re /= 10;\n        A[i] = num%re;\n        i++;\n    }\n    A[i] = re;\n    i++;\n\n    int product, res=0;\n    for(int j=0; j&lt;i; j++){\n        product = 1;\n        for(int k=0; k&lt;i; k++){product *= A[j];}\n        res += product;\n    }\n\n    return (res==input);\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_27_LAB_Contacts_Management/","title":"Lecture 27 LAB Contacts Management","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_27_LAB_Contacts_Management/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 4 items</li> <li>Size:  13 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 27 LAB Contacts Management\n</code></pre> Name Type Item Size ContactManagement input txt / 110 B ContactManagement cpp / 10 KiB Geometry Polygons cpp / 1 KiB Geometry Triangles cpp / 1 KiB"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_27_LAB_Contacts_Management/ContactManagement-input.txt/","title":"ContactManagement input","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_27_LAB_Contacts_Management/ContactManagement-input.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    110 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 27 LAB Contacts Management\n    \u2514\u2500\u2500 ContactManagement input.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_27_LAB_Contacts_Management/ContactManagement-input.txt/#preview","title":"Preview","text":"<pre><code>Yifeng Li 39299522 yifeng.li@studenti.unitn.it\nAnto Lee 89642952 leeantoyf@gmail.com\nhello world 20242025 com\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_27_LAB_Contacts_Management/ContactManagement.cpp/","title":"ContactManagement","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_27_LAB_Contacts_Management/ContactManagement.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    10 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 27 LAB Contacts Management\n    \u2514\u2500\u2500 ContactManagement.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_27_LAB_Contacts_Management/ContactManagement.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;fstream&gt;\n\nconst int MAXLEN = 64;\n\nstruct contact{\n    char name[MAXLEN] = \"Yifeng\";\n    char surname[MAXLEN] = \"Li\";\n    int phone = 3929952282;\n    char email[MAXLEN] = \"yifeng.li@unitn.it\";\n    contact *next;\n};\n\nint N=0;\ncontact C;\n\nvoid line();\n\nvoid printAllRecords();\n\nvoid newRecords();\n\nvoid copyRecord();\n\nvoid editRecord();\n\nvoid readDataFromFile();\n\nvoid saveDataToFile();\n\nvoid sortByName();\n\nvoid printVCARD();\n\nvoid searchByName();\n\nint main(){\n    int choice;\n    while(true){\n        line();\n        cout &lt;&lt; \"Please choose:\" &lt;&lt; endl;\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \" 0 - quit\" &lt;&lt; endl;\n        cout &lt;&lt; \" 1 - print all records\" &lt;&lt; endl;\n        cout &lt;&lt; \" 2 - new records\" &lt;&lt; endl;\n        cout &lt;&lt; \" 3 - copy a record\" &lt;&lt; endl;\n        cout &lt;&lt; \" 4 - edit a record\" &lt;&lt; endl;\n        cout &lt;&lt; \" 5 - read data from file\" &lt;&lt; endl;\n        cout &lt;&lt; \" 6 - save data to file\" &lt;&lt; endl;\n        cout &lt;&lt; \" 7 - sort by name\" &lt;&lt; endl;\n        cout &lt;&lt; \" 8 - print a record to the VCARD format\" &lt;&lt; endl;\n        cout &lt;&lt; \" 9 - search by name (exact match)\" &lt;&lt; endl;\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \"Please input your choice: \";\n        cin &gt;&gt; choice;\n        line();\n\n        switch(choice){\n            case 0: return 0; break;\n            case 1: printAllRecords(); break;\n            case 2: newRecords(); break;\n            case 3: copyRecord(); break;\n            case 4: editRecord(); break;\n            case 5: readDataFromFile(); break;\n            case 6: saveDataToFile(); break;\n            case 7: sortByName(); break;\n            case 8: printVCARD(); break;\n            case 9: searchByName(); break;\n\n            default: cout &lt;&lt; \"Invalid input!\" &lt;&lt; endl;\n        }\n    }\n}\n\nvoid line(){cout &lt;&lt; \"--------------------------------\" &lt;&lt; endl;}\n\nvoid printAllRecords(){\n    contact *p = &amp;C;\n    cout &lt;&lt; N &lt;&lt; \" Records in Total\" &lt;&lt; endl;\n    for(int i=0; i&lt;N; i++){\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \" - ID:        \" &lt;&lt; i &lt;&lt; endl;\n        cout &lt;&lt; \"   - name:    \" &lt;&lt; p-&gt;name &lt;&lt; endl;\n        cout &lt;&lt; \"   - surname: \" &lt;&lt; p-&gt;surname &lt;&lt; endl;\n        cout &lt;&lt; \"   - phone:   \" &lt;&lt; p-&gt;phone &lt;&lt; endl;\n        cout &lt;&lt; \"   - email:   \" &lt;&lt; p-&gt;email &lt;&lt; endl;\n        p = p-&gt;next;\n    }\n    cout &lt;&lt; endl;\n    cout &lt;&lt; \"Successfully printed!\" &lt;&lt; endl;\n}\n\nvoid newRecords(){\n    char input[MAXLEN];\n    bool judge = true;\n    contact *p;\n    while(judge){\n        p = &amp;C;\n        for(int i=0; i&lt;(N-1); i++){p = p-&gt;next;}\n        if(N&gt;0){\n            p-&gt;next = new contact();\n            p = p-&gt;next;\n        }\n\n        cout &lt;&lt; \"Please input:\" &lt;&lt; endl;\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \" - name:    \"; cin &gt;&gt; p-&gt;name;\n        cout &lt;&lt; \" - surname: \"; cin &gt;&gt; p-&gt;surname;\n        cout &lt;&lt; \" - phone:   \"; cin &gt;&gt; p-&gt;phone;\n        cout &lt;&lt; \" - email:   \"; cin &gt;&gt; p-&gt;email;\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \"Successfully recorded!\" &lt;&lt; endl;\n\n        N++;\n\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \"More records? (0 to exit): \";\n        cin &gt;&gt; input;\n        if(input[0]=='0'){judge=false;}\n        else{cout &lt;&lt; endl;}\n    }\n}\n\nvoid copyRecord(){\n    int i1,i2;\n    cout &lt;&lt; \"Copy to (ID):   \";\n    cin &gt;&gt; i1;\n    cout &lt;&lt; \"Copy from (ID): \";\n    cin &gt;&gt; i2;\n\n    if(i1&gt;=N || i2&gt;=N){\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \"Invalid input!\" &lt;&lt; endl;\n    }\n    else{\n        contact *p1=&amp;C, *p2=&amp;C;\n        for(int i=0; i&lt;i1; i++){p1 = p1-&gt;next;}\n        for(int i=0; i&lt;i2; i++){p2 = p2-&gt;next;}\n\n        strncpy(p1-&gt;name,p2-&gt;name,MAXLEN);\n        strncpy(p1-&gt;surname,p2-&gt;surname,MAXLEN);\n        p1-&gt;phone = p2-&gt;phone;\n        strncpy(p1-&gt;email,p2-&gt;email,MAXLEN);\n\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \" - name:    \" &lt;&lt; p1-&gt;name &lt;&lt; endl;\n        cout &lt;&lt; \" - surname: \" &lt;&lt; p1-&gt;surname &lt;&lt; endl;\n        cout &lt;&lt; \" - phone:   \" &lt;&lt; p1-&gt;phone &lt;&lt; endl;\n        cout &lt;&lt; \" - email:   \" &lt;&lt; p1-&gt;email &lt;&lt; endl;\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \"Successfully copied!\" &lt;&lt; endl;\n    }\n}\n\nvoid editRecord(){\n    int index;\n    cout &lt;&lt; \"Please input the ID: \";\n    cin &gt;&gt; index;\n\n    contact *p=&amp;C; for(int i=0; i&lt;index; i++){p = p-&gt;next;}\n\n    bool judge = true;\n    while(judge){\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \" 1 - name:    \" &lt;&lt; p-&gt;name &lt;&lt; endl;\n        cout &lt;&lt; \" 2 - surname: \" &lt;&lt; p-&gt;surname &lt;&lt; endl;\n        cout &lt;&lt; \" 3 - phone:   \" &lt;&lt; p-&gt;phone &lt;&lt; endl;\n        cout &lt;&lt; \" 4 - email:   \" &lt;&lt; p-&gt;email &lt;&lt; endl;\n\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \"Index of the value (0 to exit): \";\n        cin &gt;&gt; index;\n\n        switch(index){\n            case 0: judge = false; break;\n\n            case 1: cout &lt;&lt; endl &lt;&lt; \"new name: \"; cin &gt;&gt; p-&gt;name; break;\n            case 2: cout &lt;&lt; endl &lt;&lt; \"new surname: \"; cin &gt;&gt; p-&gt;surname; break;\n            case 3: cout &lt;&lt; endl &lt;&lt; \"new phone: \"; cin &gt;&gt; p-&gt;phone; break;\n            case 4: cout &lt;&lt; endl &lt;&lt; \"new email: \"; cin &gt;&gt; p-&gt;email; break;\n\n            default: cout &lt;&lt; \"Invalid input! \";\n        }\n    }\n}\n\nvoid readDataFromFile(){\n    string fName;\n    cout &lt;&lt; \"Please input the filename: \";\n    cin &gt;&gt; fName;\n\n    fstream fIn;\n    fIn.open(fName, ios::in);\n\n    if(!(fIn.is_open())) {cout &lt;&lt; endl &lt;&lt; \"Missing file name!\" &lt;&lt; endl;}\n    else{\n        contact *p = &amp;C;\n        for(int i=0; i&lt;(N-1); i++){p = p-&gt;next;}\n        if(N&gt;0){\n            p-&gt;next = new contact();\n            p = p-&gt;next;\n        }\n\n        string line;\n        char c;\n        int len, count, n=0;\n\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \"Read from File: \" &lt;&lt; endl;\n\n        while(!fIn.eof()){\n            getline(fIn,line);\n\n            cout &lt;&lt; endl;\n            cout &lt;&lt; \" - line ID: \" &lt;&lt; n &lt;&lt; endl;\n\n            c = line[0];\n            len = 0;\n            while(c){\n                len++;\n                c = line[len];\n            }\n\n            c = 0;\n            count = 0;\n            char *word = new char[MAXLEN];\n            for(int i=0; i&lt;len; i++){\n                if(line[i]==' '){\n                    word[c] = '\\0';\n                    switch(count){\n                        case 0:\n                            strcpy(p-&gt;name,word);\n                            cout &lt;&lt; \"     - name:    \" &lt;&lt; word &lt;&lt; endl; break;\n                        case 1:\n                            strcpy(p-&gt;surname,word);\n                            cout &lt;&lt; \"     - surname: \" &lt;&lt; word &lt;&lt; endl; break;\n                        case 2:\n                            p-&gt;phone = stoi(word);\n                            cout &lt;&lt; \"     - phone:   \" &lt;&lt; word &lt;&lt; endl; break;\n                    }\n                    c = 0;\n                    count++;\n                    delete[] word;\n                    char *word = new char[MAXLEN];\n                }\n                else{\n                    word[c]=line[i];\n                    c++;\n                }\n            }\n            word[c] = '\\0';\n            strcpy(p-&gt;email,word);\n            cout &lt;&lt; \"     - email:   \" &lt;&lt; word &lt;&lt; endl;\n            delete[] word;\n\n            N++;\n\n            if(!fIn.eof()){\n                p-&gt;next = new contact();\n                p = p-&gt;next;\n            }\n\n            n++;\n        }\n\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \"Successfully read!\" &lt;&lt; endl;\n    }\n\n    fIn.close();\n}\n\nvoid saveDataToFile(){\n    string fName;\n    cout &lt;&lt; \"Please input the filename: \";\n    cin &gt;&gt; fName;\n\n    fstream fOut;\n    fOut.open(fName, ios::out | ios::app);\n\n    cout &lt;&lt; endl;\n    cout &lt;&lt; \"Save to File: \" &lt;&lt; endl;\n\n    contact *p = &amp;C;\n    for(int i=0; i&lt;N; i++){\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \" - ID: \" &lt;&lt; i &lt;&lt; endl;\n\n        cout &lt;&lt; \"   - name:    \" &lt;&lt; p-&gt;name &lt;&lt; endl;\n        fOut &lt;&lt; p-&gt;name &lt;&lt; ' ';\n\n        cout &lt;&lt; \"   - surname: \" &lt;&lt; p-&gt;surname &lt;&lt; endl;\n        fOut &lt;&lt; p-&gt;surname &lt;&lt; ' ';\n\n        cout &lt;&lt; \"   - phone:   \" &lt;&lt; p-&gt;phone &lt;&lt; endl;\n        fOut &lt;&lt; p-&gt;phone &lt;&lt; ' ';\n\n        cout &lt;&lt; \"   - email:   \" &lt;&lt; p-&gt;email &lt;&lt; endl;\n        fOut &lt;&lt; p-&gt;email &lt;&lt; endl;\n\n        p = p-&gt;next;\n    }\n\n    cout &lt;&lt; endl;\n    cout &lt;&lt; \"Successfully saved!\" &lt;&lt; endl;\n}\n\nvoid sortByName(){\n    if(N&lt;=1){cout &lt;&lt; \"Successfully sorted!\" &lt;&lt; endl;}\n    else{\n        contact *p1,*p2;\n        bool judge = true;\n        while(judge){\n            judge = false;\n            p1 = &amp;C; p2 = p1-&gt;next;\n            while(p2-&gt;next!=NULL){\n                if(strcmp(p1-&gt;name,p2-&gt;name)&gt;0){\n                    judge = true;\n\n                    contact *p3 = new contact();\n\n                    strcpy(p3-&gt;name,p2-&gt;name);\n                    strcpy(p3-&gt;surname,p2-&gt;surname);\n                    p3-&gt;phone = p2-&gt;phone;\n                    strcpy(p3-&gt;email,p2-&gt;email);\n\n                    strcpy(p2-&gt;name,p1-&gt;name);\n                    strcpy(p2-&gt;surname,p1-&gt;surname);\n                    p2-&gt;phone = p1-&gt;phone;\n                    strcpy(p2-&gt;email,p1-&gt;email);\n\n                    strcpy(p1-&gt;name,p3-&gt;name);\n                    strcpy(p1-&gt;surname,p3-&gt;surname);\n                    p1-&gt;phone = p3-&gt;phone;\n                    strcpy(p1-&gt;email,p3-&gt;email);\n\n                    delete p3;\n                }\n                p1 = p1-&gt;next;\n                p2 = p2-&gt;next;\n            }\n        }\n        cout &lt;&lt; \"Successfully sorted!\" &lt;&lt; endl;\n    }\n}\n\nvoid printVCARD(){\n    int index;\n    string input;\n    contact *p;\n    bool judge = true;\n    while(judge){\n        cout &lt;&lt; \"Please input the ID: \";\n        cin &gt;&gt; index;\n\n        p=&amp;C; for(int i=0; i&lt;index; i++){p = p-&gt;next;}\n\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \"BEGIN:VCARD\" &lt;&lt; endl;\n        cout &lt;&lt; \" VERSION:4.0\" &lt;&lt; endl;\n        cout &lt;&lt; \" FN:\" &lt;&lt; p-&gt;name &lt;&lt; \" \" &lt;&lt; p-&gt;surname &lt;&lt; endl;\n        cout &lt;&lt; \" N:\" &lt;&lt; p-&gt;surname &lt;&lt; \";\" &lt;&lt; p-&gt;name &lt;&lt; \";;;\" &lt;&lt; endl;\n        cout &lt;&lt; \" EMAIL:\" &lt;&lt; p-&gt;email &lt;&lt; endl;\n        cout &lt;&lt; \" TEL:\" &lt;&lt; p-&gt;phone &lt;&lt; endl;\n        cout &lt;&lt; \"END:VCARD\" &lt;&lt; endl;\n\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \"More prints? (0 to exit): \";\n        cin &gt;&gt; input;\n        if(input[0]=='0'){judge=false;}\n        else{cout &lt;&lt; endl;}\n    }\n}\n\nvoid searchByName(){\n    char input[MAXLEN];\n    cout &lt;&lt; \"Please input the name: \";\n    cin &gt;&gt; input;\n\n    int index=0;\n    bool find=false;\n    contact *p = &amp;C;\n    while((p-&gt;next!=NULL)&amp;&amp;(!find)){\n        if(strcmp(p-&gt;name,input)==0){find = true;}\n        else{p = p-&gt;next;index++;}\n    }\n\n    if(find){\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \" - ID: \" &lt;&lt; index &lt;&lt; endl;\n        cout &lt;&lt; \"   - name:    \" &lt;&lt; p-&gt;name &lt;&lt; endl;\n        cout &lt;&lt; \"   - surname: \" &lt;&lt; p-&gt;surname &lt;&lt; endl;\n        cout &lt;&lt; \"   - phone:   \" &lt;&lt; p-&gt;phone &lt;&lt; endl;\n        cout &lt;&lt; \"   - email:   \" &lt;&lt; p-&gt;email &lt;&lt; endl;\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \"Successfully found!\" &lt;&lt; endl;\n    }\n    else{\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \"Not found!\" &lt;&lt; endl;\n    }\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_27_LAB_Contacts_Management/Geometry-Polygons.cpp/","title":"Geometry Polygons","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_27_LAB_Contacts_Management/Geometry-Polygons.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 27 LAB Contacts Management\n    \u2514\u2500\u2500 Geometry Polygons.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_27_LAB_Contacts_Management/Geometry-Polygons.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;cmath&gt;\n\nstruct vertex{\n    float pos[2];\n\n    vertex *next = NULL;\n};\n\nvertex *polygon_ini();\n\nfloat polygon_p(vertex*);\n\nfloat point_distance(vertex*,vertex*);\n\nint main(int argc, char *argv[]){\n    vertex *P = polygon_ini();\n\n    cout &lt;&lt; \"Perimeter: \" &lt;&lt; polygon_p(P) &lt;&lt; endl;\n\n    return 0;\n}\n\nvertex *polygon_ini(){\n    vertex *P = new vertex();\n\n    cout &lt;&lt; \"Please input the values of a polygon:\" &lt;&lt; endl;\n    vertex *p = P;\n    for(int i=0; i&lt;5; i++){\n        cout &lt;&lt; \" - Vertex \" &lt;&lt; i &lt;&lt; \": \" &lt;&lt; endl;\n        cout &lt;&lt; \"   - X: \";\n        cin &gt;&gt; p-&gt;pos[0];\n        cout &lt;&lt; \"   - Y: \";\n        cin &gt;&gt; p-&gt;pos[1];\n        p-&gt;next = new vertex();\n        p = p-&gt;next;\n    }\n    delete p;\n\n    return P;\n}\n\nfloat polygon_p(vertex *P){\n    int res = 0;\n\n    vertex *p = P;\n    for(int i=0; i&lt;4; i++){\n        res += point_distance(p,p-&gt;next);\n        p = p-&gt;next;\n    }\n    res += point_distance(p,P);\n\n    return res;\n}\n\nfloat point_distance(vertex *p1, vertex *p2){\n    return sqrt(\n         (p1-&gt;pos[0]-p2-&gt;pos[0])*(p1-&gt;pos[0]-p2-&gt;pos[0])\n        +(p1-&gt;pos[1]-p2-&gt;pos[1])*(p1-&gt;pos[1]-p2-&gt;pos[1])\n    );\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_27_LAB_Contacts_Management/Geometry-Triangles.cpp/","title":"Geometry Triangles","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_27_LAB_Contacts_Management/Geometry-Triangles.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 27 LAB Contacts Management\n    \u2514\u2500\u2500 Geometry Triangles.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_27_LAB_Contacts_Management/Geometry-Triangles.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;cmath&gt;\n\nstruct point{float pos[3];};\n\nfloat point_distance(point,point);\n\nfloat tri_p(point,point,point);\n\nint main(){\n    point p1,p2,p3;\n    p1.pos[0]=0; p1.pos[1]=0; p1.pos[2]=0;\n    p2.pos[0]=1; p2.pos[1]=2; p2.pos[2]=3;\n    p3.pos[0]=3; p3.pos[1]=6; p3.pos[2]=9;\n\n    cout &lt;&lt; \"P1: 0,0,0\" &lt;&lt; endl;\n    cout &lt;&lt; \"P2: 1,2,3\" &lt;&lt; endl;\n    cout &lt;&lt; \"P3: 3,6,9\" &lt;&lt; endl;\n\n    cout &lt;&lt; endl;\n\n    cout &lt;&lt; \"D P1-P2: \" &lt;&lt; point_distance(p1,p2) &lt;&lt; endl;\n    cout &lt;&lt; \"D P1-P3: \" &lt;&lt; point_distance(p1,p3) &lt;&lt; endl;\n    cout &lt;&lt; \"D P2-P3: \" &lt;&lt; point_distance(p2,p3) &lt;&lt; endl;\n\n    cout &lt;&lt; endl;\n\n    cout &lt;&lt; \"P tri P1,P2,P3: \" &lt;&lt; tri_p(p1,p2,p3) &lt;&lt; endl;\n}\n\nfloat point_distance(point p1, point p2){\n    return sqrt(\n         (p1.pos[0]-p2.pos[0])*(p1.pos[0]-p2.pos[0])\n        +(p1.pos[1]-p2.pos[1])*(p1.pos[1]-p2.pos[1])\n        +(p1.pos[2]-p2.pos[2])*(p1.pos[2]-p2.pos[2])\n    );\n}\n\nfloat tri_p(point p1, point p2, point p3){\n    return(\n         point_distance(p1,p2)\n        +point_distance(p1,p3)\n        +point_distance(p2,p3)\n    );\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_29_LAB_Linked_Lists/","title":"Lecture 29 LAB Linked Lists","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_29_LAB_Linked_Lists/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 1 item</li> <li>Size:  14 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 29 LAB Linked Lists\n</code></pre> Name Type Item Size ex cpp / 14 KiB"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_29_LAB_Linked_Lists/ex.cpp/","title":"ex","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_29_LAB_Linked_Lists/ex.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    14 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 29 LAB Linked Lists\n    \u2514\u2500\u2500 ex.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_29_LAB_Linked_Lists/ex.cpp/#preview","title":"Preview","text":"<pre><code>//most shit code ever\n//but too lazy to modify\n\nusing namespace std;\n#include &lt;iostream&gt;\n\nstruct LL{\n    int value = 0;\n    LL *next;\n};\n\nint N=0;\nLL A;\n\nvoid line();\n\nvoid print_all_nodes();\n\nvoid insert_node();\n\nvoid insert_first();\n\nvoid insert_last();\n\nvoid delete_node();\n\nvoid same_node();\n\nvoid delete_first();\n\nvoid delete_specific_node();\n\nvoid sorted_insertion();\n\nvoid closest();\n\nvoid reversal();\n\nvoid rReversal(LL*,LL*);\n\nint main(){\n    int choice;\n    while(true){\n        line();\n        cout &lt;&lt; \"Please choose:\" &lt;&lt; endl;\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \"  0 - quit\" &lt;&lt; endl;\n        cout &lt;&lt; \" 99 - print all nodes\" &lt;&lt; endl;\n        cout &lt;&lt; \"  1 - insert node\" &lt;&lt; endl;\n        cout &lt;&lt; \"  2 - insert first\" &lt;&lt; endl;\n        cout &lt;&lt; \"  3 - insert last\" &lt;&lt; endl;\n        cout &lt;&lt; \"  4 - delete node\" &lt;&lt; endl;\n        cout &lt;&lt; \"  5 - same node\" &lt;&lt; endl;\n        cout &lt;&lt; \"  6 - delete first\" &lt;&lt; endl;\n        cout &lt;&lt; \"  7 - delete specific node\" &lt;&lt; endl;\n        cout &lt;&lt; \"  8 - sorted insertion\" &lt;&lt; endl;\n        cout &lt;&lt; \"  9 - search closest\" &lt;&lt; endl;\n        cout &lt;&lt; \" 10 - reversal\" &lt;&lt; endl;\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \"Please input your choice: \";\n        cin &gt;&gt; choice;\n        line();\n\n        switch(choice){\n            case 0: return 0;\n            case 99: print_all_nodes(); break;\n            case 1: insert_node(); break;\n            case 2: insert_first(); break;\n            case 3: insert_last(); break;\n            case 4: delete_node(); break;\n            case 5: same_node(); break;\n            case 6: delete_first(); break;\n            case 7: delete_specific_node(); break;\n            case 8: sorted_insertion(); break;\n            case 9: closest(); break;\n            case 10: reversal(); break;\n\n            default: cout &lt;&lt; \"Invalid input!\" &lt;&lt; endl;\n        }\n    }\n\n    return 0;\n}\n\nvoid line(){cout &lt;&lt; \"--------------------------------\" &lt;&lt; endl;}\n\nvoid print_all_nodes(){\n    LL *p = &amp;A;\n    cout &lt;&lt; N &lt;&lt; \" Nodes in Total\" &lt;&lt; endl;\n    for(int i=0; i&lt;N; i++){\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \" - index: \" &lt;&lt; i &lt;&lt; endl;\n        cout &lt;&lt; \"   - value: \" &lt;&lt; p-&gt;value &lt;&lt; endl;\n        p = p-&gt;next;\n    }\n    cout &lt;&lt; endl;\n    cout &lt;&lt; \"Successfully printed!\" &lt;&lt; endl;\n}\n\nvoid insert_node(){\n    char input;\n    bool judge = true;\n    LL *p1,*p2,*p3;\n    int index;\n\n    while(judge){\n        cout &lt;&lt; \"Current length: \" &lt;&lt; N &lt;&lt; endl;\n        cout &lt;&lt; \"Please input the index: \";\n        cin &gt;&gt; index;\n\n        if(index&gt;N){\n            cout &lt;&lt; endl;\n            cout &lt;&lt; \"Invalid input!\" &lt;&lt; endl;\n\n            judge=false;\n        }\n        else{\n            p1 = &amp;A;\n\n            if(index&gt;0){for(int i=0; i&lt;index; i++){p1 = p1-&gt;next;}}\n\n            p2 = new LL();\n            p3 = p1-&gt;next;\n\n            p1-&gt;next = p2;\n            p2-&gt;next = p3;\n            p2-&gt;value = p1-&gt;value;\n\n            cout &lt;&lt; \"Please input the value: \";\n            cin &gt;&gt; p1-&gt;value;\n            cout &lt;&lt; endl;\n            cout &lt;&lt; \"Successfully inserted!\" &lt;&lt; endl;\n\n            N++;\n\n            cout &lt;&lt; endl;\n            cout &lt;&lt; \"More insertions? (0 to exit): \";\n            cin &gt;&gt; input;\n            if(input=='0'){judge=false;}\n            else{line();}\n        }\n    }\n}\n\nvoid insert_first(){\n    char input;\n    bool judge = true;\n    LL *p1,*p2,*p3;\n\n    while(judge){\n        p1 = &amp;A;\n\n        if(N&gt;0){\n            p2 = new LL();\n            p3 = A.next;\n\n            p1-&gt;next = p2;\n            p2-&gt;next = p3;\n            p2-&gt;value = p1-&gt;value;\n        }\n\n        cout &lt;&lt; \"Current length: \" &lt;&lt; N &lt;&lt; endl;\n        cout &lt;&lt; \"Please input the value: \";\n        cin &gt;&gt; p1-&gt;value;\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \"Successfully inserted to the first!\" &lt;&lt; endl;\n\n        N++;\n\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \"More insertions? (0 to exit): \";\n        cin &gt;&gt; input;\n        if(input=='0'){judge=false;}\n        else{line();}\n    }\n}\n\nvoid insert_last(){\n    char input;\n    bool judge = true;\n    LL *p;\n\n    while(judge){\n        p = &amp;A;\n        for(int i=0; i&lt;(N-1); i++){p = p-&gt;next;}\n        if(N&gt;0){p-&gt;next = new LL();p = p-&gt;next;}\n\n        cout &lt;&lt; \"Current length: \" &lt;&lt; N &lt;&lt; endl;\n        cout &lt;&lt; \"Please input the value: \";\n        cin &gt;&gt; p-&gt;value;\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \"Successfully inserted to the last!\" &lt;&lt; endl;\n\n        N++;\n\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \"More insertions? (0 to exit): \";\n        cin &gt;&gt; input;\n        if(input=='0'){judge=false;}\n        else{line();}\n    }\n}\n\nvoid delete_node(){\n    char input;\n    int index,value;\n    bool judge=true, find;\n    LL *p1,*p2,*p3;\n\n    while(judge){\n        if(N==0){cout &lt;&lt; \"Invalid deleting!\" &lt;&lt; endl;judge=false;}\n        else if(N==1){\n            N--;\n\n            cout &lt;&lt; endl;\n            cout &lt;&lt; \"Info about deleted node:\" &lt;&lt; endl;\n            cout &lt;&lt; endl;\n            cout &lt;&lt; \" - index: 0\" &lt;&lt; endl;\n            cout &lt;&lt; \"   - value: \" &lt;&lt; A.value &lt;&lt; endl;\n            cout &lt;&lt; endl;\n            cout &lt;&lt; \"Successfully deleted!\" &lt;&lt; endl;\n\n            judge = false;\n        }\n        else{\n            cout &lt;&lt; \"Current length: \" &lt;&lt; N &lt;&lt; endl;\n            cout &lt;&lt; \"Please input the value: \";\n            cin &gt;&gt; value;\n\n            find = false;\n            p1 = &amp;A;\n            if(p1-&gt;value == value){\n                cout &lt;&lt; endl;\n                cout &lt;&lt; \"Info about deleted node:\" &lt;&lt; endl;\n                cout &lt;&lt; endl;\n                cout &lt;&lt; \" - index: 0\" &lt;&lt; endl;\n                cout &lt;&lt; \"   - value: \" &lt;&lt; p1-&gt;value &lt;&lt; endl;\n\n                N--;\n\n                if(N&gt;0){\n                    p1 = p1-&gt;next;\n\n                    A.value = p1-&gt;value;\n                    A.next = p1-&gt;next;\n\n                    delete p1;\n                }\n\n                cout &lt;&lt; endl;\n                cout &lt;&lt; \"Successfully deleted!\" &lt;&lt; endl;\n            }\n            else{\n                p2 = p1-&gt;next;\n                for(index=1; index&lt;N; index++){\n                    if(p2-&gt;value == value){find=true;break;}\n                    else{\n                        p1 = p1-&gt;next;\n                        p2 = p2-&gt;next;\n                    }\n                }\n\n                if(find){\n                    p3 = p2-&gt;next;\n\n                    cout &lt;&lt; endl;\n                    cout &lt;&lt; \"Info about deleted node:\" &lt;&lt; endl;\n                    cout &lt;&lt; endl;\n                    cout &lt;&lt; \" - index: \" &lt;&lt; index &lt;&lt; endl;\n                    cout &lt;&lt; \"   - value: \" &lt;&lt; p2-&gt;value &lt;&lt; endl;\n                    cout &lt;&lt; endl;\n                    cout &lt;&lt; \"Successfully deleted!\" &lt;&lt; endl;\n\n                    N--;\n                    p1-&gt;next = p3;\n                    delete p2;\n                }\n                else{\n                    cout &lt;&lt; endl;\n                    cout &lt;&lt; \"Invalid input!\" &lt;&lt; endl;\n\n                    judge = false;\n                }\n            }\n\n            cout &lt;&lt; endl;\n            cout &lt;&lt; \"More deletion? (0 to exit): \";\n            cin &gt;&gt; input;\n            if(input=='0'){judge=false;}\n            else{line();}\n        }\n    }\n}\n\nvoid same_node(){\n    int i1, i2;\n    cout &lt;&lt; \"Please input index 1: \"; cin &gt;&gt; i1;\n    cout &lt;&lt; \"Please input index 2: \"; cin &gt;&gt; i2;\n\n    if(i1&gt;=N || i2&gt;=N){\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \"Invalid input!\" &lt;&lt; endl;\n    }\n    else{\n        LL *p1=&amp;A, *p2=&amp;A;\n        for(int i=0; i&lt;i1; i++){p1 = p1-&gt;next;}\n        for(int i=0; i&lt;i2; i++){p2 = p2-&gt;next;}\n\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \"Info about node 1:\" &lt;&lt; endl;\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \" - index: \" &lt;&lt; i1 &lt;&lt; endl;\n        cout &lt;&lt; \"   - value: \" &lt;&lt; p1-&gt;value &lt;&lt; endl;\n\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \"Info about node 2:\" &lt;&lt; endl;\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \" - index: \" &lt;&lt; i2 &lt;&lt; endl;\n        cout &lt;&lt; \"   - value: \" &lt;&lt; p2-&gt;value &lt;&lt; endl;\n\n        if(p1 == p2){\n            cout &lt;&lt; endl;\n            cout &lt;&lt; \"They are the same nodes!\" &lt;&lt; endl;\n        }\n        else{\n            cout &lt;&lt; endl;\n            cout &lt;&lt; \"They are not the same nodes!\" &lt;&lt; endl;\n        }\n    }\n}\n\nvoid delete_first(){\n    if(N==0){cout &lt;&lt; \"Invalid deleting!\" &lt;&lt; endl;}\n    else{\n        cout &lt;&lt; N &lt;&lt; \" Nodes in Total\" &lt;&lt; endl;\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \"Info about deleted node:\" &lt;&lt; endl;\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \" - index: 0\" &lt;&lt; endl;\n        cout &lt;&lt; \"   - value: \" &lt;&lt; A.value &lt;&lt; endl;\n\n        N--;\n\n        if(N&gt;0){\n            LL *p = &amp;A;\n            p = p-&gt;next;\n\n            A.value = p-&gt;value;\n            A.next = p-&gt;next;\n\n            delete p;\n        }\n\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \"Successfully deleted the first!\" &lt;&lt; endl;\n    }\n}\n\nvoid delete_specific_node(){\n    char input;\n    bool judge = true;\n    LL *p1,*p2,*p3;\n    int index;\n\n    while(judge){\n        if(N==0){cout &lt;&lt; \"Invalid deleting!\" &lt;&lt; endl;judge=false;}\n        else if(N==1){\n            N--;\n\n            cout &lt;&lt; endl;\n            cout &lt;&lt; \"Info about deleted node:\" &lt;&lt; endl;\n            cout &lt;&lt; endl;\n            cout &lt;&lt; \" - index: 0\" &lt;&lt; endl;\n            cout &lt;&lt; \"   - value: \" &lt;&lt; A.value &lt;&lt; endl;\n            cout &lt;&lt; endl;\n            cout &lt;&lt; \"Successfully deleted!\" &lt;&lt; endl;\n\n            judge = false;\n        }\n        else{\n            cout &lt;&lt; \"Current length: \" &lt;&lt; N &lt;&lt; endl;\n            cout &lt;&lt; \"Please input the index: \";\n            cin &gt;&gt; index;\n\n            if(index&gt;=N){\n                cout &lt;&lt; endl;\n                cout &lt;&lt; \"Invalid input!\" &lt;&lt; endl;\n\n                judge=false;\n            }\n            else{\n                N--;\n\n                if(N==0){\n                    cout &lt;&lt; endl;\n                    cout &lt;&lt; \"Info about deleted node:\" &lt;&lt; endl;\n                    cout &lt;&lt; endl;\n                    cout &lt;&lt; \" - index: 0\" &lt;&lt; endl;\n                    cout &lt;&lt; \"   - value: \" &lt;&lt; A.value &lt;&lt; endl;\n                    cout &lt;&lt; endl;\n                    cout &lt;&lt; \"Successfully deleted!\" &lt;&lt; endl;\n\n                    judge=false;\n                }\n                else{\n                    p1 = &amp;A;\n\n                    if(index&gt;0){for(int i=0; i&lt;(index-1); i++){p1 = p1-&gt;next;}}\n\n                    p2 = p1-&gt;next;\n                    p3 = p2-&gt;next;\n\n                    cout &lt;&lt; endl;\n                    cout &lt;&lt; \"Info about deleted node:\" &lt;&lt; endl;\n                    cout &lt;&lt; endl;\n                    cout &lt;&lt; \" - index: \" &lt;&lt; index &lt;&lt; endl;\n                    cout &lt;&lt; \"   - value: \" &lt;&lt; p2-&gt;value &lt;&lt; endl;\n                    cout &lt;&lt; endl;\n                    cout &lt;&lt; \"Successfully deleted!\" &lt;&lt; endl;\n\n                    p1-&gt;next = p3;\n                    delete p2;\n\n                    cout &lt;&lt; endl;\n                    cout &lt;&lt; \"More deletion? (0 to exit): \";\n                    cin &gt;&gt; input;\n                    if(input=='0'){judge=false;}\n                    else{line();}\n                }\n            }\n        }\n    }\n}\n\nvoid sorted_insertion(){\n    char input;\n    int index,value;\n    bool judge=true;\n    LL *p1,*p2,*p3;\n\n    while(judge){\n        cout &lt;&lt; \"Current length: \" &lt;&lt; N &lt;&lt; endl;\n        cout &lt;&lt; \"Please input the value: \";\n        cin &gt;&gt; value;\n\n        if(N==0){\n            cout &lt;&lt; endl;\n            cout &lt;&lt; \"Info about inserted node:\" &lt;&lt; endl;\n            cout &lt;&lt; endl;\n            cout &lt;&lt; \" - index: 0\" &lt;&lt; endl;\n            cout &lt;&lt; \"   - value: \" &lt;&lt; value &lt;&lt; endl;\n\n            A.value = value;\n            N++;\n\n            cout &lt;&lt; endl;\n            cout &lt;&lt; \"Successfully inserted!\" &lt;&lt; endl;\n        }\n        else{\n            N++;\n\n            if(value &lt;= A.value){\n                index = 0;\n                p1 = &amp;A;\n\n                p2 = new LL();\n                p3 = A.next;\n\n                p1-&gt;next = p2;\n                p2-&gt;next = p3;\n                p2-&gt;value = p1-&gt;value;\n\n                p1-&gt;value = value;\n            }\n            else{\n                index = 1;\n                p1 = &amp;A;\n                p3 = p1-&gt;next;\n                for(index=1; index&lt;(N-1); index++){\n                    if(value &gt; p3-&gt;value){\n                        p1 = p1-&gt;next;\n                        p3 = p3-&gt;next;\n                    }\n                    else{break;}\n                }\n\n                p2 = new LL();\n\n                p1-&gt;next = p2;\n                p2-&gt;next = p3;\n                p2-&gt;value = value;\n            }\n\n            cout &lt;&lt; endl;\n            cout &lt;&lt; \"Info about inserted node:\" &lt;&lt; endl;\n            cout &lt;&lt; endl;\n            cout &lt;&lt; \" - index: \" &lt;&lt; index &lt;&lt; endl;\n            cout &lt;&lt; \"   - value: \" &lt;&lt; value &lt;&lt; endl;\n            cout &lt;&lt; endl;\n            cout &lt;&lt; \"Successfully inserted!\" &lt;&lt; endl;\n        }\n\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \"More insertions? (0 to exit): \";\n        cin &gt;&gt; input;\n        if(input=='0'){judge=false;}\n        else{line();}\n    }\n}\n\nvoid closest(){\n    if(N==0){cout &lt;&lt; \"Invalid Operation!\" &lt;&lt; endl;}\n    else{\n        int target;\n        cout &lt;&lt; \"Please input the target: \";\n        cin &gt;&gt; target;\n\n        int index = 0, v=A.value;\n        float m, r;\n        r = float(A.value) - float(target);\n        if(r&gt;=0){m = r;}\n        else{m = -r;}\n\n        LL *p = &amp;A;\n        for(int i=0; i&lt;N; i++){\n            r = float(p-&gt;value) - float(target);\n\n            if(r&gt;=0){if(r&lt;m){v=p-&gt;value;m=r;index=i;}}\n            else{if((-r)&lt;m){v=p-&gt;value;m=-r;index=i;}}\n\n            p = p-&gt;next;\n        }\n\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \"Info about closest node:\" &lt;&lt; endl;\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \" - index: \" &lt;&lt; index &lt;&lt; endl;\n        cout &lt;&lt; \"   - value:      \" &lt;&lt; v &lt;&lt; endl;\n        cout &lt;&lt; \"   - difference: \" &lt;&lt; m &lt;&lt; endl;\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \"Successfully searched!\" &lt;&lt; endl;\n    }\n}\n\nvoid reversal(){\n    if(N==0){cout &lt;&lt; \"Invalid Operation!\" &lt;&lt; endl;}\n    else if(N==1){cout &lt;&lt; \"Successfully reversed!\" &lt;&lt; endl;}\n    else{\n        LL *p1 = &amp;A, *p2 = &amp;A;\n        for(int i=0; i&lt;(N-1); i++){p1 = p1-&gt;next;}\n        p2 = p2-&gt;next;\n\n        rReversal(&amp;A,A.next);\n\n        p2-&gt;next = new LL();\n        p2 = p2-&gt;next;\n        p2-&gt;value = A.value;\n\n        A.value = p1-&gt;value;\n        A.next = p1-&gt;next;\n        delete p1;\n\n        cout &lt;&lt; \"Successfully reversed!\" &lt;&lt; endl;\n    }\n}\n\nvoid rReversal(LL *n1, LL *n2){\n    if(n2-&gt;next != NULL){\n        n1-&gt;next = NULL;\n        rReversal(n2,n2-&gt;next);\n    }\n\n    n2-&gt;next = n1;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_30_LAB_Linked_Lists/","title":"Lecture 30 LAB Linked Lists","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_30_LAB_Linked_Lists/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 5 items</li> <li>Size:  8 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 30 LAB Linked Lists\n</code></pre> Name Type Item Size list insertElement cpp / 2 KiB list middle cpp / 1 KiB list reverse cpp / 968 B list sublist cpp / 2 KiB list sublist2 cpp / 2 KiB"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_30_LAB_Linked_Lists/list_insertElement.cpp/","title":"list insertElement","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_30_LAB_Linked_Lists/list_insertElement.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 30 LAB Linked Lists\n    \u2514\u2500\u2500 list insertElement.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_30_LAB_Linked_Lists/list_insertElement.cpp/#preview","title":"Preview","text":"<pre><code>#include &lt;iostream&gt; \n\nusing namespace std;\n\nstruct Node {\n    int num; \n    Node *next; \n}; \n\nint sizen = 0; \n\nvoid insert(Node** head, int num) {\n    Node* new_Node = new Node(); \n    new_Node-&gt;num = num; \n    new_Node-&gt;next = *head; \n    *head = new_Node; \n    sizen++; \n}\n\nvoid insert_Position(int pos, int data, Node** head) {\n    Node* new_node = new Node(); \n    new_node-&gt;num = data;\n    new_node-&gt;next = NULL; \n\n    if (pos &lt; 1 || pos &gt; sizen + 1) {\n        cout &lt;&lt; \"Invalid\\n\";\n    } else if (pos == 1) { \n        new_node-&gt;next = *head; \n        *head = new_node;\n        sizen++;\n    } else {\n        Node* temp = *head; \n        while (--pos &gt; 1) {\n            temp = temp-&gt;next;\n        }\n        new_node-&gt;next = temp-&gt;next;\n        temp-&gt;next = new_node;\n        sizen++;\n    }\n}\n\nvoid display_all_nodes(Node* node) {\n    while (node != NULL) {\n        cout &lt;&lt; node-&gt;num &lt;&lt; \" \";\n        node = node-&gt;next; \n    } \n}\n\nint main() {\n    Node* head = NULL; \n\n    insert(&amp;head, 1); \n    insert(&amp;head, 3); \n    insert(&amp;head, 5); \n    insert(&amp;head, 7); \n\n    cout &lt;&lt; \"Original list:\\n\"; \n    display_all_nodes(head); \n\n    int pos = 1, value = 12;\n    cout &lt;&lt; \"\\n\\nPosition: \" &lt;&lt; pos &lt;&lt; \", Value: \" &lt;&lt; value;\n    insert_Position(pos, value, &amp;head);\n    cout &lt;&lt; \"\\nUpdated list:\\n\";\n    display_all_nodes(head); \n\n    pos = 4, value = 14;\n    cout &lt;&lt; \"\\n\\nPosition: \" &lt;&lt; pos &lt;&lt; \", Value: \" &lt;&lt; value;\n    insert_Position(pos, value, &amp;head); \n    cout &lt;&lt; \"\\nUpdated list:\\n\";\n    display_all_nodes(head);\n\n    pos = 7, value = 18;\n    cout &lt;&lt; \"\\n\\nPosition: \" &lt;&lt; pos &lt;&lt; \", Value: \" &lt;&lt; value;\n    insert_Position(pos, value, &amp;head); \n    cout &lt;&lt; \"\\nUpdated list:\\n\";\n    display_all_nodes(head); \n\n    cout &lt;&lt; endl; \n\n    return 0; \n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_30_LAB_Linked_Lists/list_middle.cpp/","title":"list middle","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_30_LAB_Linked_Lists/list_middle.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 30 LAB Linked Lists\n    \u2514\u2500\u2500 list middle.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_30_LAB_Linked_Lists/list_middle.cpp/#preview","title":"Preview","text":"<pre><code>#include &lt;iostream&gt; \n\nusing namespace std; \n\nstruct Node {\n    int num; \n    Node *next; \n}; \n\nint sz = 0; \n\nvoid insert(Node** head, int num) {\n    Node* new_Node = new Node();\n    new_Node-&gt;num = num; \n    new_Node-&gt;next = *head; \n    *head = new_Node;\n    sz++; \n}\n\nint get_Middle(Node *head) {\n    if (!head) return -1;\n    int c = 0; \n    Node *middle = head; \n    while (head) {\n        if (c % 2 != 0) middle = middle-&gt;next; \n        c++; \n        head = head-&gt;next; \n    }\n    return middle-&gt;num; \n}\n\nvoid display_all_nodes(Node* node) { \n    while (node != NULL) {\n        cout &lt;&lt; node-&gt;num &lt;&lt; \" \"; \n        node = node-&gt;next; \n    } \n}\n\nint main() {\n    Node* head = NULL; \n\n    insert(&amp;head, 1); \n    insert(&amp;head, 3); \n    insert(&amp;head, 5); \n    insert(&amp;head, 7); \n\n    cout &lt;&lt; \"Original list:\\n\"; \n    display_all_nodes(head); \n\n    cout &lt;&lt; \"\\nMiddle element of the said list:\";\n    cout &lt;&lt; \"\\n\" &lt;&lt; get_Middle(head) &lt;&lt; \"\\n\"; \n\n    cout &lt;&lt; \"\\nOriginal list:\\n\";\n    insert(&amp;head, 9); \n    display_all_nodes(head); \n\n    cout &lt;&lt; \"\\nMiddle element of the said list:\";\n    cout &lt;&lt; \"\\n\" &lt;&lt; get_Middle(head);\n\n    cout &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_30_LAB_Linked_Lists/list_reverse.cpp/","title":"list reverse","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_30_LAB_Linked_Lists/list_reverse.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    968 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 30 LAB Linked Lists\n    \u2514\u2500\u2500 list reverse.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_30_LAB_Linked_Lists/list_reverse.cpp/#preview","title":"Preview","text":"<pre><code>#include &lt;iostream&gt; \n\nusing namespace std;\n\nstruct node{\n    int num; \n    node *next; \n};\n\nnode *head=NULL; \n\nvoid insert_Node(int n){\n    struct node *new_node=new node; \n    new_node-&gt;num=n; \n    new_node-&gt;next=head;\n    head=new_node;\n}\n\nvoid reverse() {\n    node* current = head;\n    node *prev = NULL, *next = NULL;\n\n    while (current != NULL) {\n        next = current-&gt;next;\n        current-&gt;next = prev;\n        prev = current;\n        current = next;\n    }\n    head = prev; \n}\n\nvoid display_all_nodes() {\n    struct node *temp = head; \n    while(temp != NULL) { \n        cout &lt;&lt; temp-&gt;num &lt;&lt; \" \"; \n        temp = temp-&gt;next; \n    }\n    cout &lt;&lt; endl; \n}\n\nint main(){\n    insert_Node(1); \n    insert_Node(3); \n    insert_Node(5);\n    insert_Node(7); \n    insert_Node(9); \n    insert_Node(11); \n\n    cout &lt;&lt; \"Original Linked list:\\n\";\n    display_all_nodes();\n\n    cout &lt;&lt; \"\\nReverse Linked list:\\n\";\n    reverse();\n    display_all_nodes(); \n\n    return 0; \n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_30_LAB_Linked_Lists/list_sublist.cpp/","title":"list sublist","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_30_LAB_Linked_Lists/list_sublist.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 30 LAB Linked Lists\n    \u2514\u2500\u2500 list sublist.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_30_LAB_Linked_Lists/list_sublist.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n\n#include &lt;iostream&gt; \n\nstruct Node\n{\n    int data;\n    Node* next;\n    Node(int x)\n    {\n        data = x;\n        next = NULL;\n    }\n};\n\nbool isPresent(Node* list_pointer, Node* sub_pointer)\n{\n    Node* curr1 = list_pointer, *curr2 = sub_pointer;\n\n\n    if (list_pointer == NULL &amp;&amp; sub_pointer == NULL)\n        return true;\n\n    if ( sub_pointer == NULL || (sub_pointer != NULL &amp;&amp; list_pointer == NULL))\n        return false;\n\n    while (list_pointer != NULL)\n    {\n        curr1 = list_pointer;\n\n        while (curr2 != NULL)\n        {\n            if (curr1 == NULL)\n                return false;\n\n\n            else if (curr2-&gt;data == curr1-&gt;data)\n            {\n                curr2 = curr2-&gt;next;\n                curr1 = curr1-&gt;next;\n            }\n\n            else\n                break;\n        }\n        if (curr2 == NULL)\n            return true;\n\n        curr2 = sub_pointer;\n\n        list_pointer = list_pointer-&gt;next;\n    }\n\n    return false;\n}\n\nint main()\n{\n\n    Node *list = new Node(8);\n    list-&gt;next = new Node(2);\n    list-&gt;next-&gt;next = new Node(3);\n    list-&gt;next-&gt;next-&gt;next = new Node(4);\n    list-&gt;next-&gt;next-&gt;next-&gt;next = new Node(6);\n    list-&gt;next-&gt;next-&gt;next-&gt;next-&gt;next = new Node(9);\n\n    Node *sub_list = new Node(3);\n    sub_list-&gt;next = new Node(4);\n    sub_list-&gt;next-&gt;next = new Node(6);\n    if (isPresent(list, sub_list))\n        cout &lt;&lt; \"True\"&lt;&lt; \"\\n\";\n    else\n        cout &lt;&lt; \"False\"&lt;&lt; \"\\n\";\n\n    sub_list = new Node(2);\n    sub_list-&gt;next = new Node(4);\n    sub_list-&gt;next-&gt;next = new Node(6);\n    if (isPresent(list, sub_list))\n        cout &lt;&lt; \"True\"&lt;&lt; \"\\n\";\n    else\n        cout &lt;&lt; \"False\"&lt;&lt; \"\\n\";    \n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_30_LAB_Linked_Lists/list_sublist2.cpp/","title":"list sublist2","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_30_LAB_Linked_Lists/list_sublist2.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 30 LAB Linked Lists\n    \u2514\u2500\u2500 list sublist2.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_30_LAB_Linked_Lists/list_sublist2.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n\n#include &lt;iostream&gt; \n#include &lt;time.h&gt;     \n\nstruct Node\n{\n    int data;\n    Node* next;\n    Node(int x)\n    {\n        data = x;\n        next = NULL;\n    }\n};\n\nbool isPresent(Node* list_pointer, Node* sub_pointer)\n{\n    Node* curr1 = list_pointer, *curr2 = sub_pointer;\n\n\n    if (list_pointer == NULL &amp;&amp; sub_pointer == NULL)\n        return true;\n\n    if ( sub_pointer == NULL || (sub_pointer != NULL &amp;&amp; list_pointer == NULL))\n        return false;\n\n    while (list_pointer != NULL)\n    {\n        curr1 = list_pointer;\n\n        while (curr2 != NULL)\n        {\n            if (curr1 == NULL)\n                return false;\n\n\n            else if (curr2-&gt;data == curr1-&gt;data)\n            {\n                curr2 = curr2-&gt;next;\n                curr1 = curr1-&gt;next;\n            }\n\n            else\n                break;\n        }\n        if (curr2 == NULL)\n            return true;\n\n        curr2 = sub_pointer;\n\n        list_pointer = list_pointer-&gt;next;\n    }\n\n    return false;\n}\n\nvoid display_all_nodes(Node* node) {\n    while (node != NULL) {\n        cout &lt;&lt; node-&gt;data &lt;&lt; \" \";\n        node = node-&gt;next; \n    } \n}\n\nvoid createList(Node *head, int MAX, int maxNumNodes_list1){\n    int nodeValue= rand() % MAX;  \n    int countNodes=0;\n\n    Node *list = head;\n    Node *tmp=NULL;\n    do{\n        countNodes++;\n        nodeValue= rand() % MAX;  \n        tmp = new Node(nodeValue);\n        list-&gt;next = tmp;\n        list=tmp;\n    }while(countNodes&lt;maxNumNodes_list1);\n}\n\nint main()\n{\n    srand (time(NULL));\n    int MAX=10;\n    int maxNumNodes_list1 = rand() % 10;  \n    int maxNumNodes_list2 = rand() % 3;  \n\n    // create the first list - random\n\n    int nodeValue= rand() % MAX;\n    Node *head_L1 = new Node(nodeValue);\n    createList(head_L1, MAX, maxNumNodes_list1);\n    display_all_nodes(head_L1);\n    cout &lt;&lt; \"\\n\"; \n\n    // create the second list - random\n\n    nodeValue= rand() % MAX;\n    Node *head_L2 = new Node(nodeValue);\n    createList(head_L2, MAX, maxNumNodes_list2);\n    display_all_nodes(head_L2);\n    cout &lt;&lt; \"\\n\";\n\n    // check the second list\n\n    if (isPresent(head_L1, head_L2))\n        cout &lt;&lt; \"True\"&lt;&lt; \"\\n\";\n    else\n        cout &lt;&lt; \"False\"&lt;&lt; \"\\n\";\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_33_LAB_Exercises_on_Stack_and_Linked_Lists/","title":"Lecture 33 LAB Exercises on Stack and Linked Lists","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_33_LAB_Exercises_on_Stack_and_Linked_Lists/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 4 items</li> <li>Size:  7 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 33 LAB Exercises on Stack and Linked Lists\n</code></pre> Name Type Item Size RPN in CPP cpp / 3 KiB Register cpp / 3 KiB stack cpp / 249 B stack hpp / 160 B"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_33_LAB_Exercises_on_Stack_and_Linked_Lists/RPN-in-CPP.cpp/","title":"RPN in CPP","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_33_LAB_Exercises_on_Stack_and_Linked_Lists/RPN-in-CPP.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    3 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 33 LAB Exercises on Stack and Linked Lists\n    \u2514\u2500\u2500 RPN in CPP.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_33_LAB_Exercises_on_Stack_and_Linked_Lists/RPN-in-CPP.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include \"stack.h\"\n#include &lt;cstring&gt;\n#include &lt;cmath&gt;\n\nvoid line();\n\nnode tail(node*);\n\nvoid stack_add(node*&amp;);\n\nvoid stack_sub(node*&amp;);\n\nvoid stack_mul(node*&amp;);\n\nvoid stack_div(node*&amp;);\n\nvoid stack_pow(node*&amp;);\n\nvoid stack_sqrt(node*&amp;);\n\nvoid stack_print(node*);\n\nvoid stack_swap(node*&amp;);\n\nvoid stack_equal(node*&amp;);\n\nint main(){\n    node *stack = new node();\n\n    string input;\n    char choice;\n    while(true){\n        line();\n        cout &lt;&lt; \"Please choose:\" &lt;&lt; endl;\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \" a number\" &lt;&lt; endl;\n        cout &lt;&lt; \" an operation (+,-,*,/,^,|(sqrt))\" &lt;&lt; endl;\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \" p - the stack is printed\" &lt;&lt; endl;\n        cout &lt;&lt; \" s - the first two numbers in the stack are swapped\" &lt;&lt; endl;\n        cout &lt;&lt; \" e - the two first two numbers in the stack are equal\" &lt;&lt; endl;\n        cout &lt;&lt; \" q - the calculator quits\" &lt;&lt; endl;\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \"Please input your choice: \";\n        cin &gt;&gt; input;\n        line();\n\n        try{\n            push(stack,stoi(input));\n            cout &lt;&lt; \"Successfully pushed \\\"\" &lt;&lt; stoi(input) &lt;&lt; \"\\\" !\" &lt;&lt; endl;\n        }\n        catch(invalid_argument){\n            choice = input[0];\n            switch(choice){\n                case '+': stack_add(stack); cout &lt;&lt; \"Successfully \\\"+\\\" !\" &lt;&lt; endl; break;\n                case '-': stack_sub(stack); cout &lt;&lt; \"Successfully \\\"-\\\" !\" &lt;&lt; endl; break;\n                case '*': stack_mul(stack); cout &lt;&lt; \"Successfully \\\"*\\\" !\" &lt;&lt; endl; break;\n                case '/': stack_div(stack); cout &lt;&lt; \"Successfully \\\"/\\\" !\" &lt;&lt; endl; break;\n\n                case '^': stack_pow(stack); cout &lt;&lt; \"Successfully \\\"^\\\" !\" &lt;&lt; endl; break;\n                case '|': stack_sqrt(stack); cout &lt;&lt; \"Successfully \\\"square rooted\\\" !\" &lt;&lt; endl; break;\n\n                case 'p': stack_print(stack); break;\n                case 's': stack_swap(stack); cout &lt;&lt; \"Successfully swapped!\" &lt;&lt; endl; break;\n                case 'e': stack_equal(stack); cout &lt;&lt; \"Successfully pushed the equal check!\" &lt;&lt; endl; break;\n\n                case 'q': cout &lt;&lt; \"Result: \" &lt;&lt; pop(stack) &lt;&lt; endl; line(); return 0;\n\n                default: cout &lt;&lt; \"Invalid input!\" &lt;&lt; endl;\n            }\n        }\n    }\n}\n\nvoid line(){cout &lt;&lt; \"--------------------------------\" &lt;&lt; endl;}\n\nnode tail(node *A){\n    node *p = A;\n    int N = 0;\n\n    while(p-&gt;next!=NULL){p=p-&gt;next;N++;}\n\n    node res;\n    res.value = N;\n    res.next = p;\n\n    return res;\n}\n\nvoid stack_add(node* &amp;stack){push(stack,pop(stack)+pop(stack));}\n\nvoid stack_sub(node* &amp;stack){push(stack,pop(stack)-pop(stack));}\n\nvoid stack_mul(node* &amp;stack){push(stack,pop(stack)*pop(stack));}\n\nvoid stack_div(node* &amp;stack){push(stack,pop(stack)/pop(stack));}\n\nvoid stack_pow(node* &amp;stack){push(stack,pow(pop(stack),pop(stack)));}\n\nvoid stack_sqrt(node* &amp;stack){push(stack,sqrt(pop(stack)));}\n\nvoid stack_print(node *stack){\n    int N = tail(stack).value;\n    cout &lt;&lt; N &lt;&lt; \" Nodes in Total\" &lt;&lt; endl;\n\n    node *p = stack;\n    for(int i=0; i&lt;N; i++){\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \" - index: \" &lt;&lt; i &lt;&lt; endl;\n        cout &lt;&lt; \"   - value: \" &lt;&lt; p-&gt;value &lt;&lt; endl;\n        p = p-&gt;next;\n    }\n\n    cout &lt;&lt; endl &lt;&lt; \"Successfully printed!\" &lt;&lt; endl;\n}\n\nvoid stack_swap(node* &amp;stack){\n    node *t1 = new node(); push(t1,pop(stack));\n    node *t2 = new node(); push(t2,pop(stack));\n\n    push(stack,pop(t1));\n    push(stack,pop(t2));\n\n    delete t1;\n    delete t2;\n}\n\nvoid stack_equal(node* &amp;stack){push(stack,pop(stack)==pop(stack));}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_33_LAB_Exercises_on_Stack_and_Linked_Lists/Register.cpp/","title":"Register","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_33_LAB_Exercises_on_Stack_and_Linked_Lists/Register.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    3 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 33 LAB Exercises on Stack and Linked Lists\n    \u2514\u2500\u2500 Register.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_33_LAB_Exercises_on_Stack_and_Linked_Lists/Register.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include \"stack.h\"\n#include &lt;cstring&gt;\n\nstruct reg{\n    int index;\n    int value;\n\n    reg *next = NULL;\n};\n\nvoid line();\n\nnode tail(node*);\n\nvoid stack_print(node*);\n\nvoid stack_push_new(node*&amp;);\n\nvoid reg_store(reg*&amp;,node*&amp;);\n\nvoid reg_recall(reg*&amp;,node*&amp;);\n\nvoid reg_print(reg*);\n\nint main(){\n    node *stack = new node();\n    reg *R = new reg();\n\n    string input;\n    char choice;\n    while(true){\n        line();\n        cout &lt;&lt; \"Please choose:\" &lt;&lt; endl;\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \" n - push new\" &lt;&lt; endl;\n        cout &lt;&lt; \" p - print the stack\" &lt;&lt; endl;\n        cout &lt;&lt; \" s - store to register\" &lt;&lt; endl;\n        cout &lt;&lt; \" r - recall from register\" &lt;&lt; endl;\n        cout &lt;&lt; \" i - print the register\" &lt;&lt; endl;\n        cout &lt;&lt; \" q - the calculator quits\" &lt;&lt; endl;\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \"Please input your choice: \";\n        cin &gt;&gt; input;\n        line();\n\n        try{\n            push(stack,stoi(input));\n            cout &lt;&lt; \"Successfully pushed \\\"\" &lt;&lt; stoi(input) &lt;&lt; \"\\\" !\" &lt;&lt; endl;\n        }\n        catch(invalid_argument){\n            choice = input[0];\n            switch(choice){\n                case 'n': stack_push_new(stack); break;\n                case 'p': stack_print(stack); break;\n                case 's': reg_store(R,stack); break;\n                case 'r': reg_recall(R,stack); break;\n                case 'i': reg_print(R); break;\n\n                case 'q': return 0;\n\n                default: cout &lt;&lt; \"Invalid input!\" &lt;&lt; endl;\n            }\n        }\n    }\n\n    return 0;\n}\n\nvoid line(){cout &lt;&lt; \"--------------------------------\" &lt;&lt; endl;}\n\nnode tail(node *A){\n    node *p = A;\n    int N = 0;\n\n    while(p-&gt;next!=NULL){p=p-&gt;next;N++;}\n\n    node res;\n    res.value = N;\n    res.next = p;\n\n    return res;\n}\n\nvoid stack_print(node *stack){\n    int N = tail(stack).value;\n    cout &lt;&lt; N &lt;&lt; \" Nodes in Total\" &lt;&lt; endl;\n\n    node *p = stack;\n    for(int i=0; i&lt;N; i++){\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \" - index: \" &lt;&lt; i &lt;&lt; endl;\n        cout &lt;&lt; \"   - value: \" &lt;&lt; p-&gt;value &lt;&lt; endl;\n        p = p-&gt;next;\n    }\n}\n\nvoid stack_push_new(node* &amp;stack){\n    int input;\n    cout &lt;&lt; \"Please input: \";\n    cin &gt;&gt; input;\n    push(stack,input);\n}\n\nvoid reg_store(reg* &amp;R, node* &amp;stack){\n    reg *p = R;\n    if(p-&gt;next==NULL){\n        p-&gt;index = pop(stack);\n        p-&gt;value = pop(stack);\n    }\n    else{\n        while(p-&gt;next!=NULL){p=p-&gt;next;}\n\n        p-&gt;next = new reg();\n        p = p-&gt;next;\n\n        p-&gt;index = pop(stack);\n        p-&gt;value = pop(stack);\n    }\n    cout &lt;&lt; \"Index: \" &lt;&lt; p-&gt;index &lt;&lt; endl;\n    cout &lt;&lt; \"Value: \" &lt;&lt; p-&gt;value &lt;&lt; endl;\n}\n\nvoid reg_recall(reg* &amp;R, node* &amp;stack){\n    int index = pop(stack);\n\n    reg *p = R;\n    while(p-&gt;index!=index){p=p-&gt;next;}\n\n    cout &lt;&lt; \"Index: \" &lt;&lt; p-&gt;index &lt;&lt; endl;\n    cout &lt;&lt; \"Value: \" &lt;&lt; p-&gt;value &lt;&lt; endl;\n}\n\nvoid reg_print(reg *R){\n    int N = 0; reg *p = R;\n    while(p!=NULL){p=p-&gt;next;N++;}\n    cout &lt;&lt; N &lt;&lt; \" Nodes in Total\" &lt;&lt; endl;\n\n    p = R;\n    for(int i=0; i&lt;N; i++){\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \" - index: \" &lt;&lt; i &lt;&lt; endl;\n        cout &lt;&lt; \"   - index: \" &lt;&lt; p-&gt;index &lt;&lt; endl;\n        cout &lt;&lt; \"   - value: \" &lt;&lt; p-&gt;value &lt;&lt; endl;\n        p = p-&gt;next;\n    }\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_33_LAB_Exercises_on_Stack_and_Linked_Lists/stack.cpp/","title":"stack","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_33_LAB_Exercises_on_Stack_and_Linked_Lists/stack.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    249 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 33 LAB Exercises on Stack and Linked Lists\n    \u2514\u2500\u2500 stack.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_33_LAB_Exercises_on_Stack_and_Linked_Lists/stack.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include \"stack.h\"\n\nvoid push(node* &amp;stack, int num){\n    node *p = new node();\n    p-&gt;value = num;\n    p-&gt;next = stack;\n    stack = p;\n}\n\nint pop(node* &amp;stack){\n    int p = stack-&gt;value;\n    stack = stack-&gt;next;\n    return p;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_33_LAB_Exercises_on_Stack_and_Linked_Lists/stack.hpp/","title":"stack","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_33_LAB_Exercises_on_Stack_and_Linked_Lists/stack.hpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    hpp</li> <li>Size:    160 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 33 LAB Exercises on Stack and Linked Lists\n    \u2514\u2500\u2500 stack.hpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_33_LAB_Exercises_on_Stack_and_Linked_Lists/stack.hpp/#preview","title":"Preview","text":"<pre><code>#ifndef STACK_H\n#define STACK_H\n#include &lt;iostream&gt;\n\nstruct node{\n    int value = 0;\n    node *next = NULL;\n};\n\nvoid push(node*&amp;,int);\n\nint pop(node*&amp;);\n\n#endif\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_34_LAB_Argc_File_Arrays_List/","title":"Lecture 34 LAB Argc File Arrays List","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_34_LAB_Argc_File_Arrays_List/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 6 items</li> <li>Size:  22 MiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 34 LAB Argc File Arrays List\n</code></pre> Name Type Item Size a.jpg ppm / 4 MiB b.jpg ppm / 5 MiB c.jpg ppm / 5 MiB d.jpg ppm / 4 MiB e.jpg ppm / 4 MiB ex cpp / 4 KiB"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_34_LAB_Argc_File_Arrays_List/a.jpg.ppm/","title":"a.jpg","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_34_LAB_Argc_File_Arrays_List/a.jpg.ppm/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    ppm</li> <li>Size:    4 MiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 34 LAB Argc File Arrays List\n    \u2514\u2500\u2500 a.jpg.ppm\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_34_LAB_Argc_File_Arrays_List/a.jpg.ppm/#preview","title":"Preview","text":""},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_34_LAB_Argc_File_Arrays_List/b.jpg.ppm/","title":"b.jpg","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_34_LAB_Argc_File_Arrays_List/b.jpg.ppm/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    ppm</li> <li>Size:    5 MiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 34 LAB Argc File Arrays List\n    \u2514\u2500\u2500 b.jpg.ppm\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_34_LAB_Argc_File_Arrays_List/b.jpg.ppm/#preview","title":"Preview","text":""},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_34_LAB_Argc_File_Arrays_List/c.jpg.ppm/","title":"c.jpg","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_34_LAB_Argc_File_Arrays_List/c.jpg.ppm/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    ppm</li> <li>Size:    5 MiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 34 LAB Argc File Arrays List\n    \u2514\u2500\u2500 c.jpg.ppm\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_34_LAB_Argc_File_Arrays_List/c.jpg.ppm/#preview","title":"Preview","text":""},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_34_LAB_Argc_File_Arrays_List/d.jpg.ppm/","title":"d.jpg","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_34_LAB_Argc_File_Arrays_List/d.jpg.ppm/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    ppm</li> <li>Size:    4 MiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 34 LAB Argc File Arrays List\n    \u2514\u2500\u2500 d.jpg.ppm\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_34_LAB_Argc_File_Arrays_List/d.jpg.ppm/#preview","title":"Preview","text":""},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_34_LAB_Argc_File_Arrays_List/e.jpg.ppm/","title":"e.jpg","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_34_LAB_Argc_File_Arrays_List/e.jpg.ppm/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    ppm</li> <li>Size:    4 MiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 34 LAB Argc File Arrays List\n    \u2514\u2500\u2500 e.jpg.ppm\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_34_LAB_Argc_File_Arrays_List/e.jpg.ppm/#preview","title":"Preview","text":""},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_34_LAB_Argc_File_Arrays_List/ex.cpp/","title":"ex","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_34_LAB_Argc_File_Arrays_List/ex.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    4 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 34 LAB Argc File Arrays List\n    \u2514\u2500\u2500 ex.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_34_LAB_Argc_File_Arrays_List/ex.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;fstream&gt;\n\nstruct img{\n    string type;\n    int dim[2];\n    int depth;\n    int ***value;\n};\n\nvoid p3_identity(img);\n\nvoid p3_rgb_rotate(img);\n\nvoid p3_grayscale(img);\n\nvoid p3_saturate_channel(img,char);\n\nvoid p3_crop(img,int[]);\n\nint main(int argc, char *argv[]){\n    string fName = string(argv[1]);\n\n    fstream fIn;\n    fIn.open(fName, ios::in);\n    if(!(fIn.is_open())){cout &lt;&lt; \"Missing file name!\" &lt;&lt; endl; return 0;}\n\n    img F;\n\n    fIn &gt;&gt; F.type;\n    fIn &gt;&gt; F.dim[0] &gt;&gt; F.dim[1];\n    fIn &gt;&gt; F.depth;\n\n    F.value = new int**[F.dim[1]];\n    for(int i=0; i&lt;F.dim[1]; i++){\n\n        F.value[i] = new int*[F.dim[0]];\n        for(int j=0; j&lt;F.dim[0]; j++){\n\n            F.value[i][j] = new int[3];\n            for(int k=0; k&lt;3; k++){fIn &gt;&gt; F.value[i][j][k];}\n        }\n    }\n\n    fIn.close();\n\n    if(string(argv[2])==\"--identity\"){p3_identity(F);}\n    else if(string(argv[2])==\"--rgb-rotate\"){p3_rgb_rotate(F);}\n    else if(string(argv[2])==\"--grayscale\"){p3_grayscale(F);}\n    else if(string(argv[2])==\"--reder\"\n         || string(argv[2])==\"--greener\"\n         || string(argv[2])==\"--bluer\"){p3_saturate_channel(F,string(argv[2])[2]);}\n    else if(string(argv[2])==\"--crop\"){\n        int C[4] = {stoi(argv[3]),stoi(argv[4]),stoi(argv[5]),stoi(argv[6])};\n        p3_crop(F,C);\n    }\n    else{cout &lt;&lt; \"Invalid input!\" &lt;&lt; endl;}\n\n    return 0;\n}\n\nvoid p3_identity(img imgF){\n    cout &lt;&lt; imgF.type &lt;&lt; endl;\n    cout &lt;&lt; imgF.dim[0] &lt;&lt; \" \" &lt;&lt; imgF.dim[1] &lt;&lt; endl;\n    cout &lt;&lt; imgF.depth &lt;&lt; endl;\n\n    for(int i=0; i&lt;imgF.dim[1]; i++){\n        for(int j=0; j&lt;imgF.dim[0]; j++){\n            for(int k=0; k&lt;3; k++){cout &lt;&lt; imgF.value[i][j][k] &lt;&lt; \" \";}\n        }\n        cout &lt;&lt; endl;\n    }\n}\n\nvoid p3_rgb_rotate(img imgF){\n    cout &lt;&lt; imgF.type &lt;&lt; endl;\n    cout &lt;&lt; imgF.dim[0] &lt;&lt; \" \" &lt;&lt; imgF.dim[1] &lt;&lt; endl;\n    cout &lt;&lt; imgF.depth &lt;&lt; endl;\n\n    for(int i=0; i&lt;imgF.dim[1]; i++){\n        for(int j=0; j&lt;imgF.dim[0]; j++){\n            cout &lt;&lt; imgF.value[i][j][1] &lt;&lt; \" \";\n            cout &lt;&lt; imgF.value[i][j][2] &lt;&lt; \" \";\n            cout &lt;&lt; imgF.value[i][j][0] &lt;&lt; \" \";\n        }\n        cout &lt;&lt; endl;\n    }\n}\n\nvoid p3_grayscale(img imgF){\n    cout &lt;&lt; imgF.type &lt;&lt; endl;\n    cout &lt;&lt; imgF.dim[0] &lt;&lt; \" \" &lt;&lt; imgF.dim[1] &lt;&lt; endl;\n    cout &lt;&lt; imgF.depth &lt;&lt; endl;\n\n    int Gray;\n    for(int i=0; i&lt;imgF.dim[1]; i++){\n        for(int j=0; j&lt;imgF.dim[0]; j++){\n            Gray = 0.2989*imgF.value[i][j][0]\n                 + 0.5870*imgF.value[i][j][1]\n                 + 0.1140*imgF.value[i][j][2];\n\n            for(int k=0; k&lt;3; k++){cout &lt;&lt; Gray &lt;&lt; \" \";}\n        }\n        cout &lt;&lt; endl;\n    }\n}\n\nvoid p3_saturate_channel(img imgF, char choice){\n    cout &lt;&lt; imgF.type &lt;&lt; endl;\n    cout &lt;&lt; imgF.dim[0] &lt;&lt; \" \" &lt;&lt; imgF.dim[1] &lt;&lt; endl;\n    cout &lt;&lt; imgF.depth &lt;&lt; endl;\n\n    for(int i=0; i&lt;imgF.dim[1]; i++){\n        for(int j=0; j&lt;imgF.dim[0]; j++){\n            switch(choice){\n                case 'r': imgF.value[i][j][0] *= 1.3; break;\n                case 'g': imgF.value[i][j][1] *= 1.3; break;\n                case 'b': imgF.value[i][j][2] *= 1.3; break;\n            }\n            for(int k=0; k&lt;3; k++){cout &lt;&lt; imgF.value[i][j][k] &lt;&lt; \" \";}\n        }\n        cout &lt;&lt; endl;\n    }\n}\n\nvoid p3_crop(img imgF, int imgC[]){\n    cout &lt;&lt; imgF.type &lt;&lt; endl;\n\n    imgF.dim[0] -= (imgC[0]+imgC[3]);\n    imgF.dim[1] -= (imgC[1]+imgC[2]);\n    cout &lt;&lt; imgF.dim[0] &lt;&lt; \" \" &lt;&lt; imgF.dim[1] &lt;&lt; endl;\n\n    cout &lt;&lt; imgF.depth &lt;&lt; endl;\n\n    for(int i=imgC[1]; i&lt;(imgF.dim[1]+imgC[1]); i++){\n        for(int j=imgC[0]; j&lt;(imgF.dim[0]+imgC[0]); j++){\n            for(int k=0; k&lt;3; k++){cout &lt;&lt; imgF.value[i][j][k] &lt;&lt; \" \";}\n        }\n        cout &lt;&lt; endl;\n    }\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/","title":"Lecture 37&amp;38 LAB Exercises on Stack Queue and Linked Lists","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 23 items</li> <li>Size:  19 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 37&amp;38 LAB Exercises on Stack Queue and Linked Lists\n</code></pre> Name Type Item Size ex1 input txt / 5 B ex1 cpp / 1018 B ex2 cpp / 781 B ex3 cpp / 1 KiB ex4 cpp / 930 B ex5 0 cpp / 1 KiB ex5 1 cpp / 1 KiB ex5 2 cpp / 1 KiB ex5 eg1 txt / 9 B ex5 eg2 txt / 13 B ex6 eg1 txt / 14 B ex6 eg2 txt / 15 B ex6 cpp / 2 KiB ex6V cpp / 2 KiB ex7 input txt / 18 B ex7 cpp / 1 KiB ex8 cpp / 1 KiB list cpp / 3 KiB list hpp / 817 B queue cpp / 449 B queue hpp / 308 B stack cpp / 431 B stack hpp / 308 B"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex1-input.txt/","title":"ex1 input","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex1-input.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    5 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 37&amp;38 LAB Exercises on Stack Queue and Linked Lists\n    \u2514\u2500\u2500 ex1 input.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex1-input.txt/#preview","title":"Preview","text":"<pre><code>1\n2\n3\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex1.cpp/","title":"ex1","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex1.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    1018 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 37&amp;38 LAB Exercises on Stack Queue and Linked Lists\n    \u2514\u2500\u2500 ex1.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex1.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include \"stack.h\"\n#include &lt;string&gt;\n#include &lt;fstream&gt;\n\nvoid line();\n\nint str_to_int(string);\n\nint main(){\n    string fName = \"ex1-input.txt\";\n\n    fstream fIn;\n    fIn.open(fName, ios::in);\n    if(!(fIn.is_open())){cout &lt;&lt; \"Missing file name!\" &lt;&lt; endl; return 0;}\n\n    line();\n    cout &lt;&lt; \"Read from file: \" &lt;&lt; endl;\n\n    Stack *S = new Stack();\n    string fWord;\n    while(!fIn.eof()){\n        fIn &gt;&gt; fWord;\n        cout &lt;&lt; \" - \" &lt;&lt; fWord &lt;&lt; endl;\n        S-&gt;Stack_push(str_to_int(fWord));\n    }\n\n    cout &lt;&lt; endl &lt;&lt; \"Revert raws: \" &lt;&lt; endl;\n\n    int len = S-&gt;Stack_length();\n    for(int i=0; i&lt;len; i++){cout &lt;&lt; \" - \" &lt;&lt; S-&gt;Stack_pop() &lt;&lt; endl;}\n\n    cout &lt;&lt; endl &lt;&lt; \"Done!\" &lt;&lt; endl;\n    line();\n\n    return 0;\n}\n\nvoid line(){cout &lt;&lt; \"--------------------------------\" &lt;&lt; endl;}\n\nint str_to_int(string fWord){\n    int len=0;\n    while(fWord[len]!='\\0'){len++;}\n\n    char fNum[len+1];\n    for(int i=0; i&lt;len; i++){fNum[i] = fWord[i];}\n    fNum[len] = '\\0';\n\n    return stoi(fNum);\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex2.cpp/","title":"ex2","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex2.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    781 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 37&amp;38 LAB Exercises on Stack Queue and Linked Lists\n    \u2514\u2500\u2500 ex2.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex2.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include \"stack.h\"\n#include &lt;string&gt;\n\nvoid line();\n\nvoid formulae(bool);\n\nint main(){\n    string input;\n    line();\n    cout &lt;&lt; \"Please input a sequence of characters: \" &lt;&lt; endl &lt;&lt; endl &lt;&lt; \" - input: \";\n    cin &gt;&gt; input;\n    cout &lt;&lt; endl;\n\n    Stack *S = new Stack();\n\n    int len = 0;\n    while(input[len]!='\\0'){\n        if(input[len]=='('){S-&gt;Stack_push(1);}\n        else if(input[len]==')'){\n            if(S-&gt;Stack_pop()==0){formulae(false);return 0;}\n        }\n\n        len++;\n    }\n\n    formulae(S-&gt;Stack_pop()==0);\n\n    return 0;\n}\n\nvoid line(){cout &lt;&lt; \"--------------------------------\" &lt;&lt; endl;}\n\nvoid formulae(bool judge){\n    if(judge){\n        cout &lt;&lt; \"YES!\" &lt;&lt; endl;\n    }\n    else{\n        cout &lt;&lt; \"NO!\" &lt;&lt; endl;\n    }\n\n    line();\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex3.cpp/","title":"ex3","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex3.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 37&amp;38 LAB Exercises on Stack Queue and Linked Lists\n    \u2514\u2500\u2500 ex3.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex3.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include \"stack.h\"\n#include \"queue.h\"\n#include &lt;string&gt;\n\nvoid line();\n\nint str_to_int(string);\n\nint main(){\n    Stack *S = new Stack();\n\n    line();\n    cout &lt;&lt; \"Please input integers (input non-int to exit): \" &lt;&lt; endl &lt;&lt; endl;\n    cout &lt;&lt; \" - stack index: \" &lt;&lt; endl;\n\n    bool judge = true;\n    int count = 0;\n    string input;\n    while(judge){\n        cout &lt;&lt; \"   - \" &lt;&lt; count &lt;&lt; \": \";\n        cin &gt;&gt; input;\n\n        try{S-&gt;Stack_push(str_to_int(input));}\n        catch(invalid_argument){judge = false;}\n\n        count++;\n    }\n\n    Queue *Q = new Queue();\n\n    int len = S-&gt;Stack_length();\n    for(int i=0; i&lt;len; i++){Q-&gt;Queue_push(S-&gt;Stack_pop());}\n\n    cout &lt;&lt; endl &lt;&lt; \" - queue index: \" &lt;&lt; endl;\n\n    count = 0;\n    len = Q-&gt;Queue_length();\n    for(int i=0; i&lt;len; i++){\n        cout &lt;&lt; \"   - \" &lt;&lt; count &lt;&lt; \": \" &lt;&lt; Q-&gt;Queue_pop() &lt;&lt; endl;\n\n        count++;\n    }\n\n    cout &lt;&lt; endl &lt;&lt; \"Successfully reverted!\" &lt;&lt; endl;\n\n    line();\n\n    return 0;\n}\n\nvoid line(){cout &lt;&lt; \"--------------------------------\" &lt;&lt; endl;}\n\nint str_to_int(string fWord){\n    int len=0;\n    while(fWord[len]!='\\0'){len++;}\n\n    char fNum[len+1];\n    for(int i=0; i&lt;len; i++){fNum[i] = fWord[i];}\n    fNum[len] = '\\0';\n\n    return stoi(fNum);\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex4.cpp/","title":"ex4","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex4.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    930 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 37&amp;38 LAB Exercises on Stack Queue and Linked Lists\n    \u2514\u2500\u2500 ex4.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex4.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include \"stack.h\"\n#include \"queue.h\"\n#include &lt;string&gt;\n\nvoid line();\n\nvoid palindrome(bool);\n\nint main(){\n    string input;\n    line();\n    cout &lt;&lt; \"Please input a sequence of characters: \" &lt;&lt; endl &lt;&lt; endl &lt;&lt; \" - input: \";\n    cin &gt;&gt; input;\n    cout &lt;&lt; endl;\n\n    Stack *S = new Stack();\n    Queue *Q = new Queue();\n\n    int len = 0;\n    while(input[len]!='\\0'){\n        S-&gt;Stack_push(input[len]);\n        Q-&gt;Queue_push(input[len]);\n        len++;\n    }\n\n    int tS,tQ;\n    while(true){\n        tS = S-&gt;Stack_pop();\n        tQ = Q-&gt;Queue_pop();\n\n        if(tS&amp;&amp;tQ){\n            if(tS!=tQ){palindrome(false); return 0;}\n        }\n        else{palindrome(true); return 0;}\n    }\n\n    return 0;\n}\n\nvoid line(){cout &lt;&lt; \"--------------------------------\" &lt;&lt; endl;}\n\nvoid palindrome(bool judge){\n    if(judge){\n        cout &lt;&lt; \"YES!\" &lt;&lt; endl;\n    }\n    else{\n        cout &lt;&lt; \"NO!\" &lt;&lt; endl;\n    }\n\n    line();\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex5-0.cpp/","title":"ex5 0","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex5-0.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 37&amp;38 LAB Exercises on Stack Queue and Linked Lists\n    \u2514\u2500\u2500 ex5 0.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex5-0.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include \"list.h\"\n#include &lt;string&gt;\n#include &lt;fstream&gt;\n\nvoid line();\n\nint str_to_int(string);\n\nint main(){\n    string fName;\n    int choice;\n\n    line();\n    cout &lt;&lt; \"Please choose:\" &lt;&lt; endl;\n    cout &lt;&lt; \" 0 - quit\" &lt;&lt; endl;\n    cout &lt;&lt; \" 1 - example #1\" &lt;&lt; endl;\n    cout &lt;&lt; \" 2 - example #2\" &lt;&lt; endl;\n    cout &lt;&lt; endl;\n    cout &lt;&lt; \"Please input your choice: \";\n    cin &gt;&gt; choice;\n    line();\n\n    switch(choice){\n        case 0: return 0;\n        case 1: fName = \"ex5-eg1.txt\"; break;\n        case 2: fName = \"ex5-eg2.txt\"; break;\n\n        default: cout &lt;&lt; \"Invalid input!\" &lt;&lt; endl; return 0;\n    }\n\n    fstream fIn;\n    fIn.open(fName, ios::in);\n    if(!(fIn.is_open())){cout &lt;&lt; \"Missing file name!\" &lt;&lt; endl; return 0;}\n\n    cout &lt;&lt; \"Insert from file: \" &lt;&lt; endl;\n\n    List *L = new List();\n    string fWord;\n    while(!fIn.eof()){\n        fIn &gt;&gt; fWord;\n        cout &lt;&lt; \" - \" &lt;&lt; fWord &lt;&lt; endl;\n        L-&gt;List_insert_last(str_to_int(fWord));\n    }\n\n    cout &lt;&lt; endl &lt;&lt; \"Traverse: \" &lt;&lt; endl;\n\n    int *T = L-&gt;List_traverse();\n    for(int i=0; i&lt;T[0]; i++){cout &lt;&lt; \" - \" &lt;&lt; T[i+1] &lt;&lt; endl;}\n\n    cout &lt;&lt; endl &lt;&lt; \"Successfully traversed!\" &lt;&lt; endl;\n    line();\n\n    return 0;\n}\n\nvoid line(){cout &lt;&lt; \"--------------------------------\" &lt;&lt; endl;}\n\nint str_to_int(string fWord){\n    int len=0;\n    while(fWord[len]!='\\0'){len++;}\n\n    char fNum[len+1];\n    for(int i=0; i&lt;len; i++){fNum[i] = fWord[i];}\n    fNum[len] = '\\0';\n\n    return stoi(fNum);\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex5-1.cpp/","title":"ex5 1","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex5-1.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 37&amp;38 LAB Exercises on Stack Queue and Linked Lists\n    \u2514\u2500\u2500 ex5 1.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex5-1.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include \"list.h\"\n#include &lt;string&gt;\n#include &lt;fstream&gt;\n\nvoid line();\n\nint str_to_int(string);\n\nint main(){\n    string fName;\n    int choice;\n\n    line();\n    cout &lt;&lt; \"Please choose:\" &lt;&lt; endl;\n    cout &lt;&lt; \" 0 - quit\" &lt;&lt; endl;\n    cout &lt;&lt; \" 1 - example #1\" &lt;&lt; endl;\n    cout &lt;&lt; \" 2 - example #2\" &lt;&lt; endl;\n    cout &lt;&lt; endl;\n    cout &lt;&lt; \"Please input your choice: \";\n    cin &gt;&gt; choice;\n    line();\n\n    switch(choice){\n        case 0: return 0;\n        case 1: fName = \"ex5-eg1.txt\"; break;\n        case 2: fName = \"ex5-eg2.txt\"; break;\n\n        default: cout &lt;&lt; \"Invalid input!\" &lt;&lt; endl; return 0;\n    }\n\n    fstream fIn;\n    fIn.open(fName, ios::in);\n    if(!(fIn.is_open())){cout &lt;&lt; \"Missing file name!\" &lt;&lt; endl; return 0;}\n\n    cout &lt;&lt; \"Insert from file (iterative): \" &lt;&lt; endl;\n\n    List *L = new List();\n    string fWord;\n    while(!fIn.eof()){\n        fIn &gt;&gt; fWord;\n        cout &lt;&lt; \" - \" &lt;&lt; fWord &lt;&lt; endl;\n        L-&gt;List_insert_last(str_to_int(fWord));\n    }\n\n    cout &lt;&lt; endl &lt;&lt; \"Traverse (recursive): \" &lt;&lt; endl;\n\n    int *T = L-&gt;List_traverse_r();\n    for(int i=0; i&lt;T[0]; i++){cout &lt;&lt; \" - \" &lt;&lt; T[i+1] &lt;&lt; endl;}\n\n    cout &lt;&lt; endl &lt;&lt; \"Successfully traversed!\" &lt;&lt; endl;\n    line();\n\n    return 0;\n}\n\nvoid line(){cout &lt;&lt; \"--------------------------------\" &lt;&lt; endl;}\n\nint str_to_int(string fWord){\n    int len=0;\n    while(fWord[len]!='\\0'){len++;}\n\n    char fNum[len+1];\n    for(int i=0; i&lt;len; i++){fNum[i] = fWord[i];}\n    fNum[len] = '\\0';\n\n    return stoi(fNum);\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex5-2.cpp/","title":"ex5 2","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex5-2.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 37&amp;38 LAB Exercises on Stack Queue and Linked Lists\n    \u2514\u2500\u2500 ex5 2.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex5-2.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include \"list.h\"\n#include &lt;string&gt;\n#include &lt;fstream&gt;\n\nvoid line();\n\nint str_to_int(string);\n\nint main(){\n    string fName;\n    int choice;\n\n    line();\n    cout &lt;&lt; \"Please choose:\" &lt;&lt; endl;\n    cout &lt;&lt; \" 0 - quit\" &lt;&lt; endl;\n    cout &lt;&lt; \" 1 - example #1\" &lt;&lt; endl;\n    cout &lt;&lt; \" 2 - example #2\" &lt;&lt; endl;\n    cout &lt;&lt; endl;\n    cout &lt;&lt; \"Please input your choice: \";\n    cin &gt;&gt; choice;\n    line();\n\n    switch(choice){\n        case 0: return 0;\n        case 1: fName = \"ex5-eg1.txt\"; break;\n        case 2: fName = \"ex5-eg2.txt\"; break;\n\n        default: cout &lt;&lt; \"Invalid input!\" &lt;&lt; endl; return 0;\n    }\n\n    fstream fIn;\n    fIn.open(fName, ios::in);\n    if(!(fIn.is_open())){cout &lt;&lt; \"Missing file name!\" &lt;&lt; endl; return 0;}\n\n    cout &lt;&lt; \"Insert from file (recursive): \" &lt;&lt; endl;\n\n    List *L = new List();\n    string fWord;\n    while(!fIn.eof()){\n        fIn &gt;&gt; fWord;\n        cout &lt;&lt; \" - \" &lt;&lt; fWord &lt;&lt; endl;\n        L-&gt;List_insert_last_r(str_to_int(fWord));\n    }\n\n    cout &lt;&lt; endl &lt;&lt; \"Traverse (recursive): \" &lt;&lt; endl;\n\n    int *T = L-&gt;List_traverse_r();\n    for(int i=0; i&lt;T[0]; i++){cout &lt;&lt; \" - \" &lt;&lt; T[i+1] &lt;&lt; endl;}\n\n    cout &lt;&lt; endl &lt;&lt; \"Successfully traversed!\" &lt;&lt; endl;\n    line();\n\n    return 0;\n}\n\nvoid line(){cout &lt;&lt; \"--------------------------------\" &lt;&lt; endl;}\n\nint str_to_int(string fWord){\n    int len=0;\n    while(fWord[len]!='\\0'){len++;}\n\n    char fNum[len+1];\n    for(int i=0; i&lt;len; i++){fNum[i] = fWord[i];}\n    fNum[len] = '\\0';\n\n    return stoi(fNum);\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex5-eg1.txt/","title":"ex5 eg1","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex5-eg1.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    9 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 37&amp;38 LAB Exercises on Stack Queue and Linked Lists\n    \u2514\u2500\u2500 ex5 eg1.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex5-eg1.txt/#preview","title":"Preview","text":"<pre><code>1\n2\n3\n4\n5\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex5-eg2.txt/","title":"ex5 eg2","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex5-eg2.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    13 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 37&amp;38 LAB Exercises on Stack Queue and Linked Lists\n    \u2514\u2500\u2500 ex5 eg2.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex5-eg2.txt/#preview","title":"Preview","text":"<pre><code>7\n8\n4\n11\n44\n6\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex6-eg1.txt/","title":"ex6 eg1","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex6-eg1.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    14 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 37&amp;38 LAB Exercises on Stack Queue and Linked Lists\n    \u2514\u2500\u2500 ex6 eg1.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex6-eg1.txt/#preview","title":"Preview","text":"<pre><code>14\n21\n11\n30\n10\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex6-eg2.txt/","title":"ex6 eg2","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex6-eg2.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    15 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 37&amp;38 LAB Exercises on Stack Queue and Linked Lists\n    \u2514\u2500\u2500 ex6 eg2.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex6-eg2.txt/#preview","title":"Preview","text":"<pre><code>6\n21\n17\n30\n10\n8\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex6.cpp/","title":"ex6","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex6.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 37&amp;38 LAB Exercises on Stack Queue and Linked Lists\n    \u2514\u2500\u2500 ex6.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex6.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include \"list.h\"\n#include &lt;string&gt;\n#include &lt;fstream&gt;\n\nvoid line();\n\nint str_to_int(string);\n\nvoid formulae(bool);\n\nint main(){\n    string fName;\n    int choice;\n\n    line();\n    cout &lt;&lt; \"Please choose:\" &lt;&lt; endl;\n    cout &lt;&lt; \" 0 - quit\" &lt;&lt; endl;\n    cout &lt;&lt; \" 1 - example #1\" &lt;&lt; endl;\n    cout &lt;&lt; \" 2 - example #2\" &lt;&lt; endl;\n    cout &lt;&lt; endl;\n    cout &lt;&lt; \"Please input your choice: \";\n    cin &gt;&gt; choice;\n    line();\n\n    switch(choice){\n        case 0: return 0;\n        case 1: fName = \"ex6-eg1.txt\"; break;\n        case 2: fName = \"ex6-eg2.txt\"; break;\n\n        default: cout &lt;&lt; \"Invalid input!\" &lt;&lt; endl; return 0;\n    }\n\n    fstream fIn;\n    fIn.open(fName, ios::in);\n    if(!(fIn.is_open())){cout &lt;&lt; \"Missing file name!\" &lt;&lt; endl; return 0;}\n\n    cout &lt;&lt; \"Insert from file: \" &lt;&lt; endl;\n\n    List *L = new List();\n    string fWord;\n    while(!fIn.eof()){\n        fIn &gt;&gt; fWord;\n        cout &lt;&lt; \" - \" &lt;&lt; fWord &lt;&lt; endl;\n        L-&gt;List_insert_last(str_to_int(fWord));\n    }\n\n    int key;\n    cout &lt;&lt; endl &lt;&lt; \"Please input the key: \" &lt;&lt; endl &lt;&lt; endl &lt;&lt; \" - input: \";\n    cin &gt;&gt; key;\n    cout &lt;&lt; endl;\n\n    formulae(L-&gt;List_search(key));\n\n    return 0;\n}\n\nvoid line(){cout &lt;&lt; \"--------------------------------\" &lt;&lt; endl;}\n\nint str_to_int(string fWord){\n    int len=0;\n    while(fWord[len]!='\\0'){len++;}\n\n    char fNum[len+1];\n    for(int i=0; i&lt;len; i++){fNum[i] = fWord[i];}\n    fNum[len] = '\\0';\n\n    return stoi(fNum);\n}\n\nvoid formulae(bool judge){\n    if(judge){\n        cout &lt;&lt; \"Searched: YES!\" &lt;&lt; endl;\n    }\n    else{\n        cout &lt;&lt; \"Searched: NO!\" &lt;&lt; endl;\n    }\n\n    line();\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex6V.cpp/","title":"ex6V","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex6V.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 37&amp;38 LAB Exercises on Stack Queue and Linked Lists\n    \u2514\u2500\u2500 ex6V.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex6V.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include \"list.h\"\n#include &lt;string&gt;\n#include &lt;fstream&gt;\n\nvoid line();\n\nint str_to_int(string);\n\nvoid formulae(bool);\n\nint main(){\n    string fName;\n    int choice;\n\n    line();\n    cout &lt;&lt; \"Please choose:\" &lt;&lt; endl;\n    cout &lt;&lt; \" 0 - quit\" &lt;&lt; endl;\n    cout &lt;&lt; \" 1 - example #1\" &lt;&lt; endl;\n    cout &lt;&lt; \" 2 - example #2\" &lt;&lt; endl;\n    cout &lt;&lt; endl;\n    cout &lt;&lt; \"Please input your choice: \";\n    cin &gt;&gt; choice;\n    line();\n\n    switch(choice){\n        case 0: return 0;\n        case 1: fName = \"ex6-eg1.txt\"; break;\n        case 2: fName = \"ex6-eg2.txt\"; break;\n\n        default: cout &lt;&lt; \"Invalid input!\" &lt;&lt; endl; return 0;\n    }\n\n    fstream fIn;\n    fIn.open(fName, ios::in);\n    if(!(fIn.is_open())){cout &lt;&lt; \"Missing file name!\" &lt;&lt; endl; return 0;}\n\n    cout &lt;&lt; \"Insert from file: \" &lt;&lt; endl;\n\n    List *L = new List();\n    string fWord;\n    while(!fIn.eof()){\n        fIn &gt;&gt; fWord;\n        cout &lt;&lt; \" - \" &lt;&lt; fWord &lt;&lt; endl;\n        L-&gt;List_insert_last(str_to_int(fWord));\n    }\n\n    int key;\n    cout &lt;&lt; endl &lt;&lt; \"Please input the key: \" &lt;&lt; endl &lt;&lt; endl &lt;&lt; \" - input: \";\n    cin &gt;&gt; key;\n    cout &lt;&lt; endl;\n\n    formulae(L-&gt;List_search_r(key));\n\n    return 0;\n}\n\nvoid line(){cout &lt;&lt; \"--------------------------------\" &lt;&lt; endl;}\n\nint str_to_int(string fWord){\n    int len=0;\n    while(fWord[len]!='\\0'){len++;}\n\n    char fNum[len+1];\n    for(int i=0; i&lt;len; i++){fNum[i] = fWord[i];}\n    fNum[len] = '\\0';\n\n    return stoi(fNum);\n}\n\nvoid formulae(bool judge){\n    if(judge){\n        cout &lt;&lt; \"Searched: YES! (recursive)\" &lt;&lt; endl;\n    }\n    else{\n        cout &lt;&lt; \"Searched: NO! (recursive)\" &lt;&lt; endl;\n    }\n\n    line();\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex7-input.txt/","title":"ex7 input","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex7-input.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    18 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 37&amp;38 LAB Exercises on Stack Queue and Linked Lists\n    \u2514\u2500\u2500 ex7 input.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex7-input.txt/#preview","title":"Preview","text":"<pre><code>11\n1\n0\n2\n7\n88\n78\n7\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex7.cpp/","title":"ex7","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex7.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 37&amp;38 LAB Exercises on Stack Queue and Linked Lists\n    \u2514\u2500\u2500 ex7.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex7.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include \"list.h\"\n#include &lt;string&gt;\n#include &lt;fstream&gt;\n\nvoid line();\n\nint str_to_int(string);\n\nint main(){\n    string fName = \"ex7-input.txt\";\n\n    fstream fIn;\n    fIn.open(fName, ios::in);\n    if(!(fIn.is_open())){cout &lt;&lt; \"Missing file name!\" &lt;&lt; endl; return 0;}\n\n    line();\n    cout &lt;&lt; \"Read from file: \" &lt;&lt; endl;\n\n    List *L = new List();\n    string fWord;\n    while(!fIn.eof()){\n        fIn &gt;&gt; fWord;\n        cout &lt;&lt; \" - \" &lt;&lt; fWord &lt;&lt; endl;\n        L-&gt;List_insert_last(str_to_int(fWord));\n    }\n\n    L-&gt;List_order_r();\n\n    cout &lt;&lt; endl &lt;&lt; \"Traverse: \" &lt;&lt; endl;\n\n    int *T = L-&gt;List_traverse();\n    for(int i=0; i&lt;T[0]; i++){cout &lt;&lt; \" - \" &lt;&lt; T[i+1] &lt;&lt; endl;}\n\n    cout &lt;&lt; endl &lt;&lt; \"Successfully ordered!\" &lt;&lt; endl;\n    line();\n\n    return 0;\n}\n\nvoid line(){cout &lt;&lt; \"--------------------------------\" &lt;&lt; endl;}\n\nint str_to_int(string fWord){\n    int len=0;\n    while(fWord[len]!='\\0'){len++;}\n\n    char fNum[len+1];\n    for(int i=0; i&lt;len; i++){fNum[i] = fWord[i];}\n    fNum[len] = '\\0';\n\n    return stoi(fNum);\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex8.cpp/","title":"ex8","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex8.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 37&amp;38 LAB Exercises on Stack Queue and Linked Lists\n    \u2514\u2500\u2500 ex8.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/ex8.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nstruct node{\n    int value = 0;\n    node *next = NULL;\n};\n\nvoid line();\n\nnode *Josephus_ini(int);\n\nbool Josephus_kill(node*&amp;);\n\nint main(){\n    int N;\n    line();\n    cout &lt;&lt; \"Please input an integer: \" &lt;&lt; endl &lt;&lt; endl &lt;&lt; \" - input: \";\n    cin &gt;&gt; N;\n    cout &lt;&lt; endl;\n\n    node *L = Josephus_ini(N);\n\n    node *p;\n    do{\n        p = L;\n\n        cout &lt;&lt; \" - (\" &lt;&lt; p-&gt;value &lt;&lt; \")\";\n        p = p-&gt;next;\n        for(int i=0; i&lt;(N-1); i++){\n            cout &lt;&lt; \" -&gt; \" &lt;&lt; p-&gt;value;\n            p = p-&gt;next;\n        }\n        cout &lt;&lt; endl;\n\n        N--;\n    }\n    while(Josephus_kill(L));\n\n    cout &lt;&lt; endl &lt;&lt; \"person \" &lt;&lt; L-&gt;value &lt;&lt; \" wins!\" &lt;&lt; endl;\n    line();\n\n    return 0;\n}\n\nvoid line(){cout &lt;&lt; \"--------------------------------\" &lt;&lt; endl;}\n\nnode *Josephus_ini(int N){\n    node *L=new node(), *p=L;\n    for(int i=0; i&lt;(N-1); i++){\n        p-&gt;value = i+1;\n        p-&gt;next = new node();\n        p = p-&gt;next;\n    }\n    p-&gt;value = N;\n    p-&gt;next = L;\n\n    return L;\n}\n\nbool Josephus_kill(node *&amp;L){\n    node *p1=L, *p2=p1-&gt;next, *p3=p2-&gt;next;\n\n    if(p1==p2){return false;}\n    else{\n        delete p2;\n        p1-&gt;next = p3;\n\n        L = p3;\n\n        return true;\n    }\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/list.cpp/","title":"list","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/list.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    3 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 37&amp;38 LAB Exercises on Stack Queue and Linked Lists\n    \u2514\u2500\u2500 list.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/list.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include \"list.hpp\"\n\nint List::p_List_length(node *p){\n    int N = 0;\n\n    while(p-&gt;next!=NULL){p=p-&gt;next;N++;}\n\n    return N;\n}\n\nvoid List::p_List_insert_last(node *p, int num){\n    while(p-&gt;next!=NULL){p=p-&gt;next;}\n\n    p-&gt;value = num;\n    p-&gt;next = new node();\n}\n\nvoid List::p_List_swap(node *p1, node *p2){\n    node *t = new node();\n\n    t-&gt;value = p2-&gt;value;\n    p2-&gt;value = p1-&gt;value;\n    p1-&gt;value = t-&gt;value;\n\n    delete t;\n}\n\nList::List(){L = new node();}\n\nint List::List_length(){return p_List_length(L);}\n\nvoid List::List_insert_last(int num){p_List_insert_last(L,num);}\n\nvoid List::List_insert_last_r(int num){re_List_insert_last_r(L,num);}\n\nvoid List::re_List_insert_last_r(node *p, int num){\n    if(p-&gt;next==NULL){\n        p-&gt;value = num;\n        p-&gt;next = new node();\n    }\n    else{re_List_insert_last_r(p-&gt;next,num);}\n}\n\nint *List::List_traverse(){\n    int len = List_length();\n    int *res = new int[len+1];\n\n    res[0] = len;\n    node *p = L;\n    for(int i=0; i&lt;len; i++){\n        res[i+1] = p-&gt;value;\n        p = p-&gt;next;\n    }\n\n    return res;\n}\n\nint *List::List_traverse_r(){\n    int len = List_length();\n    int *res = new int[len+1];\n\n    res[0] = len;\n    re_List_traverse_r(res,L,0);\n\n    return res;\n}\n\nvoid List::re_List_traverse_r(int *res, const node *p, int i){\n    if(p-&gt;next!=NULL){re_List_traverse_r(res,p-&gt;next,i+1);}\n    res[i+1] = p-&gt;value;\n}\n\nbool List::List_search(int key){\n    bool judge = false;\n\n    node *p = L;\n    while(p-&gt;next!=NULL){\n        if(p-&gt;value==key){judge = true; break;}\n        else{p = p-&gt;next;}\n    }\n\n    return judge;\n}\n\nbool List::List_search_r(int key){return re_List_search_r(L,key);}\n\nbool List::re_List_search_r(const node *p, int key){\n    if(p-&gt;next==NULL){return false;}\n    else{\n        if(p-&gt;value==key){\n            return true;\n        }\n        else{\n            return re_List_search_r(p-&gt;next,key);\n        }\n    }\n}\n\nvoid List::List_order(){\n    node *p1,*p2;\n\n    bool judge = true;\n    while(judge){\n        judge = false;\n\n        p1 = L;\n        p2 = p1-&gt;next;\n        while(p2-&gt;next!=NULL){\n            if(p1-&gt;value &gt; p2-&gt;value){\n                judge = true;\n                p_List_swap(p1,p2);\n            }\n            p1 = p1-&gt;next;\n            p2 = p2-&gt;next;\n        }\n    }\n}\n\nvoid List::List_order_r(){re_List_order_r(L);}\n\nvoid List::re_List_order_r(node *&amp;p){\n    if(p_List_length(p)&gt;1){\n        node *p1 = new node();\n        node *p2 = new node();\n\n        node *v = p;\n        p = p-&gt;next;\n        while(p-&gt;next!=NULL){\n            if(v-&gt;value &gt; p-&gt;value){\n                p_List_insert_last(p1,p-&gt;value);\n            }\n            else{\n                p_List_insert_last(p2,p-&gt;value);\n            }\n            p = p-&gt;next;\n        }\n\n        re_List_order_r(p1);\n        re_List_order_r(p2);\n\n        p_List_insert_last(p1,v-&gt;value);\n\n        node *t;\n\n        while(v!=NULL){\n            t = v;\n            v = v-&gt;next;\n            delete t;\n        }\n\n        t = p1;\n        while(t-&gt;next-&gt;next!=NULL){t=t-&gt;next;}\n        delete t-&gt;next;\n        t-&gt;next = p2;\n\n        p = p1;\n    }\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/list.hpp/","title":"list","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/list.hpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    hpp</li> <li>Size:    817 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 37&amp;38 LAB Exercises on Stack Queue and Linked Lists\n    \u2514\u2500\u2500 list.hpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/list.hpp/#preview","title":"Preview","text":"<pre><code>#ifndef LIST_H\n#define LIST_H\n#include &lt;iostream&gt;\n\nclass List{\n    private:\n        struct node{\n            int value = 0;\n            node *next = NULL;\n        };\n\n        node *L;\n\n        int p_List_length(node*);\n        void p_List_insert_last(node*,int);\n        void p_List_swap(node*,node*);\n\n        void re_List_insert_last_r(node*,int);\n        void re_List_traverse_r(int*,const node*,int);\n        bool re_List_search_r(const node*,int);\n        void re_List_order_r(node*&amp;);\n    public:\n        List();\n\n        int List_length();\n\n        void List_insert_last(int);\n        void List_insert_last_r(int);\n\n        int *List_traverse();\n        int *List_traverse_r();\n\n        bool List_search(int);\n        bool List_search_r(int);\n\n        void List_order();\n        void List_order_r();\n};\n\n#endif\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/queue.cpp/","title":"queue","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/queue.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    449 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 37&amp;38 LAB Exercises on Stack Queue and Linked Lists\n    \u2514\u2500\u2500 queue.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/queue.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include \"queue.hpp\"\n\nQueue::Queue(){Q = new node();}\n\nvoid Queue::Queue_push(int num){\n    node *p = Q;\n\n    while(p-&gt;next!=NULL){p=p-&gt;next;}\n\n    p-&gt;value = num;\n    p-&gt;next = new node();\n}\n\nint Queue::Queue_pop(){\n    node *p = Q;\n\n    Q = Q-&gt;next;\n\n    int t = p-&gt;value;\n    delete p;\n\n    return t;\n}\n\nint Queue::Queue_length(){\n    node *p = Q;\n    int N = 0;\n\n    while(p-&gt;next!=NULL){p=p-&gt;next;N++;}\n\n    return N;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/queue.hpp/","title":"queue","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/queue.hpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    hpp</li> <li>Size:    308 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 37&amp;38 LAB Exercises on Stack Queue and Linked Lists\n    \u2514\u2500\u2500 queue.hpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/queue.hpp/#preview","title":"Preview","text":"<pre><code>#ifndef QUEUE_H\n#define QUEUE_H\n#include &lt;iostream&gt;\n\nclass Queue{\n    private:\n        struct node{\n            int value = 0;\n            node *next = NULL;\n        };\n        node *Q;\n    public:\n        Queue();\n        void Queue_push(int);\n        int Queue_pop();\n        int Queue_length();\n};\n\n#endif\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/stack.cpp/","title":"stack","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/stack.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    431 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 37&amp;38 LAB Exercises on Stack Queue and Linked Lists\n    \u2514\u2500\u2500 stack.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/stack.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include \"stack.hpp\"\n\nStack::Stack(){}\n\nvoid Stack::Stack_push(int num){\n    node *p = new node();\n    p-&gt;value = num;\n    p-&gt;next = S;\n    S = p;\n}\n\nint Stack::Stack_pop(){\n    if(S==NULL){\n        return 0;\n    }\n    else{\n        int p = S-&gt;value;\n        S = S-&gt;next;\n        return p;\n    }\n}\n\nint Stack::Stack_length(){\n    node *p = S;\n    int N = 0;\n\n    while(p!=NULL){p=p-&gt;next;N++;}\n\n    return N;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/stack.hpp/","title":"stack","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/stack.hpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    hpp</li> <li>Size:    308 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 37&amp;38 LAB Exercises on Stack Queue and Linked Lists\n    \u2514\u2500\u2500 stack.hpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_37%2638_LAB_Exercises_on_Stack_Queue_and_Linked_Lists/stack.hpp/#preview","title":"Preview","text":"<pre><code>#ifndef STACK_H\n#define STACK_H\n#include &lt;iostream&gt;\n\nclass Stack{\n    private:\n        struct node{\n            int value = 0;\n            node *next = NULL;\n        };\n        node *S;\n    public:\n        Stack();\n        void Stack_push(int);\n        int Stack_pop();\n        int Stack_length();\n};\n\n#endif\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_40_LAB_Exercises_on_ADT_and_Makefile/","title":"Lecture 40 LAB Exercises on ADT and Makefile","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_40_LAB_Exercises_on_ADT_and_Makefile/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 3 items</li> <li>Size:  12 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 40 LAB Exercises on ADT and Makefile\n</code></pre> Name Type Item Size Library cpp / 8 KiB Student cpp / 4 KiB Students txt / 71 B"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_40_LAB_Exercises_on_ADT_and_Makefile/Library.cpp/","title":"Library","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_40_LAB_Exercises_on_ADT_and_Makefile/Library.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    8 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 40 LAB Exercises on ADT and Makefile\n    \u2514\u2500\u2500 Library.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_40_LAB_Exercises_on_ADT_and_Makefile/Library.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nclass Borrower{\n    private:\n        string name;\n\n        void p_space_in(const int a){for(int i=0; i&lt;a; i++){cout &lt;&lt; \"  \";}}\n    public:\n        Borrower(const string name){this-&gt;name = name;}\n        void print(const int a){\n            if(!a){cout &lt;&lt; \"Borrower: \" &lt;&lt; endl;}\n            p_space_in(a-1); cout &lt;&lt; \"- name: \" &lt;&lt; this-&gt;name &lt;&lt; endl;\n        }\n};\n\nclass Borrowing{\n    private:\n        struct{\n            int ID;\n            Borrower* value;\n        }borrower;\n        struct{\n            int year, month, day;\n            void in(const int a){\n                year = a/1'00'00;\n                month = (a%1'00'00)/1'00;\n                day = a%1'00;\n            }\n            int out(){return (1'00'00*year + 1'00*month + day);}\n        }date;\n\n        void p_space_in(const int a){for(int i=0; i&lt;a; i++){cout &lt;&lt; \"  \";}}\n    public:\n        Borrowing(const int ID, Borrower* borrower, const int date){\n            this-&gt;borrower.ID = ID;\n            this-&gt;borrower.value = borrower;\n            this-&gt;date.in(date);\n        }\n        int get_ID(){return borrower.ID;}\n        int get_date(){return date.out();}\n        void print(const int a){\n            if(!a){cout &lt;&lt; \"Borrowing: \" &lt;&lt; endl;}\n            p_space_in(a-1); cout &lt;&lt; \"- Borrower: \" &lt;&lt; endl;\n            p_space_in(a); cout &lt;&lt; \"- ID: \" &lt;&lt; this-&gt;borrower.ID &lt;&lt; endl;\n            this-&gt;borrower.value-&gt;print(a+1);\n            p_space_in(a-1); cout &lt;&lt; \"- date: \";\n            if(a){cout &lt;&lt; this-&gt;date.out() &lt;&lt; endl;}\n            else{\n                cout &lt;&lt; endl;\n                p_space_in(a); cout &lt;&lt; \"- year:  \" &lt;&lt; this-&gt;date.year &lt;&lt; endl;\n                p_space_in(a); cout &lt;&lt; \"- month: \" &lt;&lt; this-&gt;date.month &lt;&lt; endl;\n                p_space_in(a); cout &lt;&lt; \"- day:   \" &lt;&lt; this-&gt;date.day &lt;&lt; endl;\n            }\n        }\n};\n\nclass Book{\n    private:\n        int count;\n        string author, title;\n\n        struct node{\n            int ID;\n            Borrowing* value;\n            node* next;\n        }*list;\n\n        void p_space_in(const int a){for(int i=0; i&lt;a; i++){cout &lt;&lt; \"  \";}}\n        void p_print(const int a){\n            if(!a){cout &lt;&lt; \"Book: \" &lt;&lt; endl;}\n            p_space_in(a-1); cout &lt;&lt; \"- author: \" &lt;&lt; this-&gt;author &lt;&lt; endl;\n            p_space_in(a-1); cout &lt;&lt; \"- title:  \" &lt;&lt; this-&gt;title &lt;&lt; endl;\n        }\n    public:\n        Book(const string author, const string title){\n            this-&gt;author = author;\n            this-&gt;title = title;\n\n            list = NULL;\n        }\n        void add_borrowing(const int ID, Borrower* borrower, const int date){\n            Borrowing* borrowing = new Borrowing(ID,borrower,date);\n            if(list == NULL){\n                list = new node();\n                list-&gt;ID = count;\n                list-&gt;value = borrowing;\n            }\n            else{\n                node* p = list;\n                while(p-&gt;next != NULL){p = p-&gt;next;}\n\n                p-&gt;next = new node();\n                p-&gt;next-&gt;ID = count;\n                p-&gt;next-&gt;value = borrowing;\n            }\n            count++;\n        }\n        void print(const int a){\n            p_print(a);\n            if(list){\n                p_space_in(a-1); cout &lt;&lt; \"- Borrowing List: \" &lt;&lt; endl;\n                for(node*p=list; p!=NULL; p=p-&gt;next){\n                    p_space_in(a); cout &lt;&lt; \"- ID: \" &lt;&lt; p-&gt;ID &lt;&lt; endl;\n                    p-&gt;value-&gt;print(a+2);\n                }\n                if(!a){cout &lt;&lt; \"- Total: \" &lt;&lt; count &lt;&lt; endl;}\n            }\n        }\n        bool print_list(const int a, const int ID, int &amp;i){\n            bool judge = false;\n            for(node*p=list; p!=NULL; p=p-&gt;next){\n                if(p-&gt;value-&gt;get_ID() == ID){\n                    p_space_in(a-1); cout &lt;&lt; \"- ID: \" &lt;&lt; i &lt;&lt; endl;\n                    p_print(a+1);\n                    p_space_in(a); cout &lt;&lt; \"- date:  \" &lt;&lt; p-&gt;value-&gt;get_date() &lt;&lt; endl;\n\n                    judge = true;\n                    i++;\n                }\n            }\n            return judge;\n        }\n};\n\nclass Library{\n    private:\n        int count_borrower, count_book;\n\n        template&lt;typename T&gt; struct node{\n            int ID;\n            T value;\n            node* next;\n\n            node&lt;T&gt;(const T a): value(a){}\n        };\n        node&lt;Borrower&gt;* list_borrower;\n        node&lt;Book&gt;* list_book;\n\n        template&lt;typename T&gt; void p_add_node(node&lt;T&gt;* &amp;list, const int ID, const T A){\n            if(list == NULL){\n                list = new node&lt;T&gt;(A);\n                list-&gt;ID = ID;\n            }\n            else{\n                node&lt;T&gt;* p = list;\n                while(p-&gt;next != NULL){p = p-&gt;next;}\n\n                p-&gt;next = new node&lt;T&gt;(A);\n                p-&gt;next-&gt;ID = ID;\n            }\n        }\n        template&lt;typename T&gt; bool p_delete_node(node&lt;T&gt;* &amp;list, const int ID){\n            if(list == NULL){return false;}\n            else{\n                node&lt;T&gt;* t = new node&lt;T&gt;(list-&gt;value);\n                t-&gt;next = list;\n\n                node&lt;T&gt;* p = t;\n                while(p-&gt;next-&gt;ID != ID){\n                    if(p-&gt;next-&gt;next == NULL){return false;}\n                    else{p = p-&gt;next;}\n                }\n\n                p-&gt;next = p-&gt;next-&gt;next;\n                list = t-&gt;next;\n\n                delete t, p-&gt;next;\n\n                return true;\n            }\n        }\n        template&lt;typename T&gt; void p_print_nodes(node&lt;T&gt;* list){\n            cout &lt;&lt; \"List: \" &lt;&lt; endl;\n            int i=0;\n            for(node&lt;T&gt;*p=list; p!=NULL; p=p-&gt;next){\n                cout &lt;&lt; \"- ID: \" &lt;&lt; p-&gt;ID &lt;&lt; endl;\n                p-&gt;value.print(2);\n                i++;\n            }\n            cout &lt;&lt; \"- Total: \" &lt;&lt; i &lt;&lt; endl;\n        }\n        template&lt;typename T&gt; node&lt;T&gt;* p_search_node(node&lt;T&gt;* list, const int ID){\n            node&lt;T&gt;* p = list;\n            while(p-&gt;ID != ID){\n                if(p-&gt;next == NULL){return NULL;}\n                else{p = p-&gt;next;}\n            }\n            return p;\n        }\n    public:\n        Library(){\n            count_borrower = 0;\n            count_book = 0;\n            list_borrower = NULL;\n            list_book = NULL;\n        }\n        void Lib_add_borrower(const string name){\n            Borrower A(name);\n            p_add_node&lt;Borrower&gt;(list_borrower,count_borrower,A);\n            count_borrower++;\n        }\n        void Lib_add_book(const string author, const string title){\n            Book A(author,title);\n            p_add_node&lt;Book&gt;(list_book,count_book,A);\n            count_book++;\n        }\n        bool Lib_add_borrowing(const int ID_borrower, const int ID_book, const int date){\n            node&lt;Borrower&gt;* borrower = p_search_node&lt;Borrower&gt;(list_borrower,ID_borrower);\n            node&lt;Book&gt;* book = p_search_node&lt;Book&gt;(list_book,ID_book);\n            if(borrower &amp;&amp; book){\n                book-&gt;value.add_borrowing(ID_borrower,&amp;(borrower-&gt;value),date);\n                return true;\n            }\n            else{return false;}\n        }\n        bool Lib_delete_book(const int ID){return p_delete_node&lt;Book&gt;(list_book,ID);}\n        void Lib_print_borrowers(){\n            cout &lt;&lt; \"Borrower \";\n            p_print_nodes&lt;Borrower&gt;(list_borrower);\n        }\n        void Lib_print_books(){\n            cout &lt;&lt; \"Book \";\n            p_print_nodes&lt;Book&gt;(list_book);\n        }\n        void Lib_print_borrowings(const int ID){\n            cout &lt;&lt; \"Borrowing List: \" &lt;&lt; endl;\n            int i=0;\n            for(node&lt;Book&gt;*p=list_book; p!=NULL; p=p-&gt;next){\n                if(p-&gt;value.print_list(1,ID,i)){cout &lt;&lt; \"  - book ID: \" &lt;&lt; p-&gt;ID &lt;&lt; endl;}\n            }\n            cout &lt;&lt; \"- Total: \" &lt;&lt; i &lt;&lt; endl;\n        }\n};\n\nint main(){\n    Library* A = new Library();\n\n    A-&gt;Lib_add_borrower(\"Li\");\n    A-&gt;Lib_add_borrower(\"Anto\");\n    A-&gt;Lib_add_borrower(\"Yifeng\");\n\n    A-&gt;Lib_add_book(\"Lee\",\"Battle of Calculus\");\n    A-&gt;Lib_add_book(\"Anto Lee\",\"Conquer the GLA\");\n    A-&gt;Lib_add_book(\"Li Yifeng\",\"Computer Programming Enjoyer\");\n\n    A-&gt;Lib_add_borrowing(2,2,19890604);\n    A-&gt;Lib_add_borrowing(2,0,29520000);\n    A-&gt;Lib_add_borrowing(0,2,12345678);\n    A-&gt;Lib_add_borrowing(0,0,89642952);\n    A-&gt;Lib_add_borrowing(0,1,20051109);\n    A-&gt;Lib_add_borrowing(1,1,01010101);\n\n    A-&gt;Lib_print_borrowers(); cout &lt;&lt; endl;\n    A-&gt;Lib_print_books(); cout &lt;&lt; endl;\n\n    A-&gt;Lib_print_borrowings(0); cout &lt;&lt; endl;\n    A-&gt;Lib_print_borrowings(1); cout &lt;&lt; endl;\n    A-&gt;Lib_print_borrowings(2); cout &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_40_LAB_Exercises_on_ADT_and_Makefile/Student.cpp/","title":"Student","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_40_LAB_Exercises_on_ADT_and_Makefile/Student.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    4 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 40 LAB Exercises on ADT and Makefile\n    \u2514\u2500\u2500 Student.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_40_LAB_Exercises_on_ADT_and_Makefile/Student.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;fstream&gt;\n\nstruct Student{\n    char *name=NULL, *surname=NULL;\n    int id = 0;\n    float w_average = 0;\n};\n\nvoid print_student(const Student&amp;);\n\nStudent create_student(char[],char[],int,float);\n\nbool upload_students(Student*&amp;, const string, const int);\n\nint search_id(Student*,int,int);\n\nint search_name_and_surname(Student*,char*,char*,int);\n\nint student_top_average(Student*,int);\n\nchar* str_to_char(const string);\n\nint main(){\n    const int N = 100;\n    Student* database = new Student[N];\n\n    /*\n    int* i = new int();\n    while(database[*i].name!=NULL &amp;&amp; *i&lt;N){i++;}\n\n    string* name = new string();\n    string* surname = new string();\n    int* id = new int();\n    float* w_average = new float();\n    if(*i &lt; N){\n        cout &lt;&lt; \"Create a student: \" &lt;&lt; endl;\n        cout &lt;&lt; \"- name:         \"; cin &gt;&gt; *name;\n        cout &lt;&lt; \"- surname:      \"; cin &gt;&gt; *surname;\n        cout &lt;&lt; \"- id:           \"; cin &gt;&gt; *id;\n        cout &lt;&lt; \"- weighted GPA: \"; cin &gt;&gt; *w_average;\n        database[*i] = create_student(str_to_char(*name),str_to_char(*surname),*id,*w_average);\n    }\n    else{cout &lt;&lt; \"the maximum size is reached\" &lt;&lt; endl;}\n\n    delete i, name, surname, id, w_average;\n    */\n\n    /*\n    int* i = new int();\n    *i = search_id(database,42459,N);\n    if(*i == -1){cout &lt;&lt; \"the user does not exist\" &lt;&lt; endl;}\n    else{print_student(database[*i]);}\n    delete i;\n    */\n\n    /*\n    int* i = new int();\n    *i = search_name_and_surname(database,str_to_char(\"Marcus\"),str_to_char(\"Wright\"),N);\n    if(*i == -1){cout &lt;&lt; \"the user does not exist\" &lt;&lt; endl;}\n    else{print_student(database[*i]);}\n    delete i;\n    */\n\n    //cout &lt;&lt; student_top_average(database,N);\n\n    //if(!upload_students(database,\"Students.txt\",N)){cout &lt;&lt; \"the maximum size is reached\" &lt;&lt; endl;}\n\n    return 0;\n}\n\nvoid print_student(const Student &amp;S){\n    if(S.name != NULL){\n        cout &lt;&lt; \"- name:         \" &lt;&lt; S.name &lt;&lt; endl;\n        cout &lt;&lt; \"- surname:      \" &lt;&lt; S.surname &lt;&lt; endl;\n        cout &lt;&lt; \"- id:           \" &lt;&lt; S.id &lt;&lt; endl;\n        cout &lt;&lt; \"- weighted GPA: \" &lt;&lt; S.w_average &lt;&lt; endl;\n    }\n}\n\nStudent create_student(char name[], char surname[], int id, float w_average){\n    Student S;\n\n    S.name = name;\n    S.surname = surname;\n    S.id = id;\n    S.w_average = w_average;\n\n    return S;\n}\n\nbool upload_students(Student* &amp;database, const string fName, const int DIM){\n    fstream fIn;\n    fIn.open(fName, ios::in);\n    if(!(fIn.is_open())){cout &lt;&lt; \"Missing file name!\" &lt;&lt; endl; return true;}\n\n    char *name, *surname;\n    int id;\n    float w_average;\n    string input;\n\n    int i = 0;\n    while(database[i].name != NULL){i++;}\n\n    for(int j=i; (j&lt;DIM &amp;&amp; !fIn.eof()); j++){\n        fIn &gt;&gt; input; name = str_to_char(input);\n        fIn &gt;&gt; input; surname = str_to_char(input);\n        fIn &gt;&gt; input; id = stoi(str_to_char(input));\n        fIn &gt;&gt; input; w_average = atof(str_to_char(input));\n\n        database[j] = create_student(name,surname,id,w_average);\n    }\n\n    return fIn.eof();\n}\n\nint search_id(Student* database, int id, int DIM){\n    for(int i=0; (i&lt;DIM &amp;&amp; database[i].name!=NULL); i++){\n        if(database[i].id == id){return i;}\n    }\n    return -1;\n}\n\nint search_name_and_surname(Student* database, char* name, char* surname, int DIM){\n    for(int i=0; (i&lt;DIM &amp;&amp; database[i].name!=NULL); i++){\n        if(!(strcmp(database[i].name,name)\n          || strcmp(database[i].surname,surname))){\n            return i;\n        }\n    }\n    return -1;\n}\n\nint student_top_average(Student* database, int DIM){\n    int res = 0;\n    float m = database[0].w_average;\n    for(int i=1; (i&lt;DIM &amp;&amp; database[i].name!=NULL); i++){\n        if(database[i].w_average &gt; m){\n            m = database[i].w_average;\n            res = i;\n        }\n    }\n    return res;\n}\n\nchar* str_to_char(const string s){\n    int len=0;\n    while(s[len] != '\\0'){len++;}\n    char *res = new char[len];\n    for(int i=0; i&lt;len; i++){res[i] = s[i];}\n\n    return res;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_40_LAB_Exercises_on_ADT_and_Makefile/Students.txt/","title":"Students","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_40_LAB_Exercises_on_ADT_and_Makefile/Students.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    71 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 40 LAB Exercises on ADT and Makefile\n    \u2514\u2500\u2500 Students.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_40_LAB_Exercises_on_ADT_and_Makefile/Students.txt/#preview","title":"Preview","text":"<pre><code>Alan Wilson 74731 23.4\nFenton Myers 42459 27.8\nMarcus Wright 15723 20.3\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_41_LAB_Simulation/","title":"Lecture 41 LAB Simulation","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_41_LAB_Simulation/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 2 items</li> <li>Size:  4 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 41 LAB Simulation\n</code></pre> Name Type Item Size 1 cpp / 2 KiB 2 cpp / 2 KiB"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_41_LAB_Simulation/1.cpp/","title":"1","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_41_LAB_Simulation/1.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 41 LAB Simulation\n    \u2514\u2500\u2500 1.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_41_LAB_Simulation/1.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint* f_initialize(const int);\n\nvoid f_print(const int, const int*);\n\nint* f_merge(const int, const int*, const int*);\n\nvoid f_sort(const int, int*&amp;);\n\nint f_min(const int, int*);\n\nint f_max(const int, int*);\n\nfloat f_mean(const int, int*);\n\nfloat f_median(const int, int*);\n\nint main(){\n    srand(time(NULL));\n\n    const int L = 1+rand()%(0b1111);\n    cout &lt;&lt; \"Length: \" &lt;&lt; L &lt;&lt; endl;\n\n    int *A = f_initialize(L);\n    int *B = f_initialize(L);\n    cout &lt;&lt; \"A:\"; f_print(L,A); cout &lt;&lt; endl;\n    cout &lt;&lt; \"B:\"; f_print(L,B); cout &lt;&lt; endl;\n\n    int *C = f_merge(L,A,B);\n    f_sort(2*L,C);\n    cout &lt;&lt; \"C:\"; f_print(2*L,C); cout &lt;&lt; endl;\n\n    cout &lt;&lt; \"Min: \" &lt;&lt; f_min(2*L,C) &lt;&lt; endl;\n    cout &lt;&lt; \"Max: \" &lt;&lt; f_max(2*L,C) &lt;&lt; endl;\n    cout &lt;&lt; \"Mean: \" &lt;&lt; f_mean(2*L,C) &lt;&lt; endl;\n    cout &lt;&lt; \"Median: \" &lt;&lt; f_median(2*L,C) &lt;&lt; endl;\n\n    return 0;\n}\n\nint* f_initialize(const int L){\n    int *A = new int[L];\n    for(int i=0; i&lt;L; i++){A[i] = rand()%(1+0b11111111);}\n\n    return A;\n}\n\nvoid f_print(const int L, const int* A){\n    for(int i=0; i&lt;L; i++){cout &lt;&lt; \" \" &lt;&lt; A[i];}\n}\n\nint* f_merge(const int L, const int* A, const int* B){\n    int *C = new int[L];\n    for(int i=0; i&lt;L; i++){C[i] = A[i];}\n    for(int i=0; i&lt;L; i++){C[L+i] = B[i];}\n\n    return C;\n}\n\nvoid f_sort(const int L, int* &amp;A){\n    bool judge = true;\n    int t;\n    while(judge){\n        judge = false;\n        for(int i=1; i&lt;L; i++){\n            if(A[i-1] &gt; A[i]){\n                judge = true;\n                t = A[i-1];\n                A[i-1] = A[i];\n                A[i] = t;\n            }\n        }\n    }\n}\n\nint f_min(const int L, int* A){\n    int res = A[0];\n    for(int i=1; i&lt;L; i++){res = (res&lt;A[i])?res:A[i];}\n\n    return res;\n}\n\nint f_max(const int L, int* A){\n    int res = A[0];\n    for(int i=1; i&lt;L; i++){res = (res&gt;A[i])?res:A[i];}\n\n    return res;\n}\n\nfloat f_mean(const int L, int* A){\n    int res = 0;\n    for(int i=0; i&lt;L; i++){res += A[i];}\n\n    return float(res)/L;\n}\n\nfloat f_median(const int L, int* A){return float(A[L/2-1]+A[L/2])/2;}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_41_LAB_Simulation/2.cpp/","title":"2","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_41_LAB_Simulation/2.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 41 LAB Simulation\n    \u2514\u2500\u2500 2.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_41_LAB_Simulation/2.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nstruct node;\n\nint** f1();\n\nnode* f2(const int, const int*);\n\nvoid f3(node*);\n\nvoid f4(node*&amp;, const int, const int);\n\nint main(){\n    srand(time(NULL));\n\n    int** t = f1();\n\n    const int X = t[0][0];\n    cout &lt;&lt; \"X: \" &lt;&lt; X &lt;&lt; endl;\n\n    const int* A = t[1];\n    cout &lt;&lt; \"Array:\";\n    for(int i=0; i&lt;X; i++){cout &lt;&lt; \" \" &lt;&lt; A[i];}\n    cout &lt;&lt; endl;\n\n    node* B = f2(X,A);\n    f3(B);\n\n    int P;\n    cout &lt;&lt; \"P: \";\n    cin &gt;&gt; P;\n    f4(B,P,rand()%(1+0b11111111));\n    f3(B);\n\n    return 0;\n}\n\nstruct node{\n    int data;\n    node *prev, *next;\n};\n\nint** f1(){\n    const int X = 1+rand()%(0b1111);\n\n    int** res = new int*[2];\n\n    res[0] = new int;\n    res[0][0] = X;\n\n    res[1] = new int[X];\n    for(int i=0; i&lt;X; i++){res[1][i] = rand()%(1+0b11111111);}\n\n    return res;\n}\n\nnode* f2(const int X, const int* A){\n    if(X &gt; 0){\n        node* B = new node();\n        node *p1=B, *p2=p1;\n        for(int i=0; i&lt;X; i++){\n            p1-&gt;data = A[i];\n            p2 = new node();\n\n            p1-&gt;next = p2;\n            p2-&gt;prev = p1;\n\n            p1 = p1-&gt;next;\n        }\n        p1-&gt;prev-&gt;next = NULL;\n        delete p2;\n\n        return B;\n    }\n    else{return NULL;}\n}\n\nvoid f3(node* A){\n    cout &lt;&lt; \"Doubly Linked List:\";\n    node* p = A;\n    while(p != NULL){\n        cout &lt;&lt; \" \" &lt;&lt; p-&gt;data;\n        p = p-&gt;next;\n    }\n    cout &lt;&lt; endl;\n}\n\nvoid f4(node* &amp;A, const int P, const int num){\n    int X = 0;\n    for(node*t=A; t!=NULL; t=t-&gt;next){X++;}\n\n    if(X == 0){\n        A = new node();\n        A-&gt;data = num;\n    }\n    else{\n        node* t = A;\n        if(P &lt;= 0){\n            t-&gt;prev = new node();\n            t-&gt;prev-&gt;data = num;\n            t-&gt;prev-&gt;next = t;\n\n            A = t-&gt;prev;\n        }\n        else if(P &gt;= X){\n            while(t-&gt;next != NULL){t = t-&gt;next;}\n\n            t-&gt;next = new node();\n            t-&gt;next-&gt;data = num;\n            t-&gt;next-&gt;prev = t;\n        }\n        else{\n            for(int i=0; i&lt;P; i++){t = t-&gt;next;}\n            node *p1=t-&gt;prev, *p2=t;\n\n            t = new node();\n            t-&gt;data = num;\n            t-&gt;prev = p1;\n            t-&gt;next = p2;\n\n            p1-&gt;next = t;\n            p2-&gt;prev = t;\n        }\n    }\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/","title":"Lecture 43 LAB Exercises on Graphs and Trees","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 15 items</li> <li>Size:  10 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 43 LAB Exercises on Graphs and Trees\n</code></pre> Name Type Item Size BST cpp / 3 KiB BST hpp / 673 B ex1&amp;2&amp;3 cpp / 1 KiB ex4 eg1 txt / 13 B ex4 eg2 txt / 13 B ex4 cpp / 1 KiB ex5 eg1 1 txt / 13 B ex5 eg1 2 txt / 13 B ex5 eg2 1 txt / 13 B ex5 eg2 2 txt / 13 B ex5 eg3 1 txt / 13 B ex5 eg3 2 txt / 11 B ex5 cpp / 1 KiB ex5V cpp / 3 KiB tree txt / 11 B"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/BST.cpp/","title":"BST","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/BST.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    3 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 43 LAB Exercises on Graphs and Trees\n    \u2514\u2500\u2500 BST.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/BST.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include \"BST.hpp\"\n\nint str_to_int(const string s){\n    int len=0;\n    while(s[len] != '\\0'){len++;}\n    char *res = new char[len];\n    for(int i=0; i&lt;len; i++){res[i] = s[i];}\n\n    return stoi(res);\n}\n\nvoid get_length_r(BST* &amp;tree, int &amp;l){\n    if(tree){\n        l++;\n        get_length_r(tree-&gt;left,l);\n        get_length_r(tree-&gt;right,l);\n    }\n}\n\nint get_length(BST* &amp;tree){\n    int res = 0;\n    get_length_r(tree,res);\n\n    return res;\n}\n\nvoid visualize_tree_r(BST* &amp;tree, const int c){\n    if(tree){\n        visualize_tree_r(tree-&gt;right,1+c);\n        for(int i=0; i&lt;c; i++){cout &lt;&lt; \"      \";}\n        cout &lt;&lt; tree-&gt;value &lt;&lt; endl;\n        visualize_tree_r(tree-&gt;left,1+c);\n    }\n}\n\nvoid visualize_tree(BST* &amp;tree){visualize_tree_r(tree,0);}\n\nvoid add_node(BST* &amp;p, const int &amp;v){\n    p = new BST();\n    p-&gt;value = v;\n    p-&gt;left = NULL;\n    p-&gt;right = NULL;\n}\n\nvoid add_BST_r(BST* &amp;tree, const int &amp;v){\n    if(tree){\n        if(v &lt; tree-&gt;value){\n            add_BST_r(tree-&gt;left,v);\n        }\n        else{\n            add_BST_r(tree-&gt;right,v);\n        }\n    }\n    else{add_node(tree,v);}\n}\n\nvoid upload_BST(BST* &amp;tree, const string &amp;fName){\n    fstream fIn;\n    fIn.open(fName, ios::in);\n\n    string wIn;\n    while(!fIn.eof()){\n        fIn &gt;&gt; wIn;\n        add_BST_r(tree,str_to_int(wIn));\n    }\n}\n\nvoid print_tree_r(BST* &amp;tree){\n    if(tree){\n        if(tree-&gt;left){\n            print_tree_r(tree-&gt;left);\n            cout &lt;&lt; ',';\n        }\n        cout &lt;&lt; tree-&gt;value;\n        if(tree-&gt;right){\n            cout &lt;&lt; ',';\n            print_tree_r(tree-&gt;right);\n        }\n    }\n}\n\nvoid search_tree_r(BST* &amp;tree, const int n){\n    if(tree){\n        if(tree-&gt;value == n){cout &lt;&lt; n;}\n        else{\n            cout &lt;&lt; tree-&gt;value &lt;&lt; ',';\n            if(tree-&gt;value &lt; n){\n                cout &lt;&lt; \"right\" &lt;&lt; ',';\n                search_tree_r(tree-&gt;right,n);\n            }\n            else{\n                cout &lt;&lt; \"left\" &lt;&lt; ',';\n                search_tree_r(tree-&gt;left,n);\n            }\n        }\n    }\n}\n\nvoid deallocate_tree_r(BST* &amp;tree){\n    if(tree){\n        deallocate_tree_r(tree-&gt;left);\n        deallocate_tree_r(tree-&gt;right);\n        delete tree;\n    }\n}\n\nvoid deallocate_tree(BST* &amp;tree){\n    deallocate_tree_r(tree);\n    tree = NULL;\n}\n\nvoid add_BT_r(BST* &amp;tree, const int &amp;v, const int p, const int d){\n    if(d / 2){\n        if((p % d) / (d / 2)){\n            add_BT_r(tree-&gt;right,v,p,d/2);\n        }\n        else{\n            add_BT_r(tree-&gt;left,v,p,d/2);\n        }\n    }\n    else{add_node(tree,v);}\n}\n\nvoid add_BT(BST* &amp;tree, const int &amp;v){\n    const int p = 1 + get_length(tree);\n\n    int d = 1;\n    for(int i=p; i-1; i/=2){d *= 2;}\n\n    add_BT_r(tree,v,p,d);\n}\n\nvoid upload_BT(BST* &amp;tree, const string &amp;fName){\n    fstream fIn;\n    fIn.open(fName, ios::in);\n\n    string wIn;\n    while(!fIn.eof()){\n        fIn &gt;&gt; wIn;\n        add_BT(tree,str_to_int(wIn));\n    }\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/BST.hpp/","title":"BST","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/BST.hpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    hpp</li> <li>Size:    673 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 43 LAB Exercises on Graphs and Trees\n    \u2514\u2500\u2500 BST.hpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/BST.hpp/#preview","title":"Preview","text":"<pre><code>#ifndef BST_H\n#define BST_H\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;fstream&gt;\n\nstruct BST{\n    int value;\n    BST *left, *right;\n};\n\nint str_to_int(const string);\n\nvoid get_length_r(BST*&amp;,int&amp;);\n\nint get_length(BST*&amp;);\n\nvoid visualize_tree_r(BST*&amp;, const int);\n\nvoid visualize_tree(BST*&amp;);\n\nvoid add_node(BST*&amp;, const int&amp;);\n\nvoid add_BST_r(BST*&amp;, const int&amp;);\n\nvoid upload_BST(BST*&amp;, const string&amp;);\n\nvoid print_tree_r(BST*&amp;);\n\nvoid search_tree_r(BST*&amp;, const int);\n\nvoid deallocate_tree_r(BST*&amp;);\n\nvoid deallocate_tree(BST*&amp;);\n\nvoid add_BT_r(BST*&amp;, const int&amp;, const int, const int);\n\nvoid add_BT(BST*&amp;, const int&amp;);\n\nvoid upload_BT(BST*&amp;, const string&amp;);\n\n#endif\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/ex1%262%263.cpp/","title":"ex1&amp;2&amp;3","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/ex1%262%263.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 43 LAB Exercises on Graphs and Trees\n    \u2514\u2500\u2500 ex1&amp;2&amp;3.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/ex1%262%263.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include \"BST.h\"\n\nint main(){\n    char choice;\n    BST* tree = NULL;\n    while(true){\n        cout &lt;&lt; \"Please choose:\" &lt;&lt; endl;\n        cout &lt;&lt; \"- x: conclude the execution of the program\" &lt;&lt; endl;\n        cout &lt;&lt; \"- s: search for another number\" &lt;&lt; endl;\n        cout &lt;&lt; \"- p: print the tree\" &lt;&lt; endl;\n        cout &lt;&lt; \"- l: load a new tree form a file\" &lt;&lt; endl;\n        cout &lt;&lt; \"Please input your choice: \";\n        cin &gt;&gt; choice;\n\n        switch(choice){\n            case 'x': return 0;\n            case 's':{\n                cout &lt;&lt; endl;\n                int n;\n                cout &lt;&lt; \"the input number to search: \";\n                cin &gt;&gt; n;\n                cout &lt;&lt; endl;\n                search_tree_r(tree,n);\n                cout &lt;&lt; endl &lt;&lt; endl;\n                break;\n            }\n            case 'p':\n                cout &lt;&lt; endl;\n                if(tree){\n                    visualize_tree(tree);\n                    cout &lt;&lt; endl;\n                    print_tree_r(tree);\n                    cout &lt;&lt; endl &lt;&lt; endl;\n                }\n                break;\n            case 'l':\n                deallocate_tree(tree);\n                upload_BST(tree,\"tree.txt\");\n                cout &lt;&lt; endl;\n                break;\n            default: cout &lt;&lt; \"Invalid input!\" &lt;&lt; endl;\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/ex4-eg1.txt/","title":"ex4 eg1","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/ex4-eg1.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    13 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 43 LAB Exercises on Graphs and Trees\n    \u2514\u2500\u2500 ex4 eg1.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/ex4-eg1.txt/#preview","title":"Preview","text":"<pre><code>4\n2\n6\n1\n3\n5\n7\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/ex4-eg2.txt/","title":"ex4 eg2","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/ex4-eg2.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    13 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 43 LAB Exercises on Graphs and Trees\n    \u2514\u2500\u2500 ex4 eg2.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/ex4-eg2.txt/#preview","title":"Preview","text":"<pre><code>4\n2\n6\n3\n1\n5\n7\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/ex4.cpp/","title":"ex4","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/ex4.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 43 LAB Exercises on Graphs and Trees\n    \u2514\u2500\u2500 ex4.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/ex4.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include \"BST.h\"\n\nbool check_BST_r(BST*&amp;);\n\nint main(){\n    int choice;\n    string eg;\n    while(true){\n        cout &lt;&lt; \"Please choose:\" &lt;&lt; endl;\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \" 0 - quit\" &lt;&lt; endl;\n        cout &lt;&lt; \" 1 - example #1\" &lt;&lt; endl;\n        cout &lt;&lt; \" 2 - example #2\" &lt;&lt; endl;\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \"Please input your choice: \";\n        cin &gt;&gt; choice;\n\n        switch(choice){\n            case 0: return 0;\n            case 1: eg = \"ex4-eg1.txt\"; break;\n            case 2: eg = \"ex4-eg2.txt\"; break;\n\n            default: cout &lt;&lt; \"Invalid input!\" &lt;&lt; endl; return 0;\n        }\n\n        BST* tree = NULL;\n\n        upload_BT(tree,eg);\n\n        cout &lt;&lt; endl;\n        visualize_tree(tree);\n\n        cout &lt;&lt; endl &lt;&lt; (check_BST_r(tree)? \"Yes\": \"No\") &lt;&lt; endl &lt;&lt; endl;\n\n        delete tree;\n    }\n    return 0;\n}\n\nbool check_BST_r(BST* &amp;tree){\n    if(tree){\n        BST *tL=tree-&gt;left, *tR=tree-&gt;right;\n        if((tL &amp;&amp; (tL-&gt;value &gt; tree-&gt;value))\n        || (tR &amp;&amp; (tR-&gt;value &lt; tree-&gt;value))){\n            return false;\n        }\n        else{\n            return (check_BST_r(tL) &amp;&amp; check_BST_r(tR));\n        }\n    }\n    else{return true;}\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/ex5-eg1-1.txt/","title":"ex5 eg1 1","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/ex5-eg1-1.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    13 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 43 LAB Exercises on Graphs and Trees\n    \u2514\u2500\u2500 ex5 eg1 1.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/ex5-eg1-1.txt/#preview","title":"Preview","text":"<pre><code>1\n2\n3\n4\n5\n6\n7\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/ex5-eg1-2.txt/","title":"ex5 eg1 2","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/ex5-eg1-2.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    13 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 43 LAB Exercises on Graphs and Trees\n    \u2514\u2500\u2500 ex5 eg1 2.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/ex5-eg1-2.txt/#preview","title":"Preview","text":"<pre><code>1\n2\n3\n4\n5\n6\n7\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/ex5-eg2-1.txt/","title":"ex5 eg2 1","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/ex5-eg2-1.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    13 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 43 LAB Exercises on Graphs and Trees\n    \u2514\u2500\u2500 ex5 eg2 1.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/ex5-eg2-1.txt/#preview","title":"Preview","text":"<pre><code>1\n2\n3\n4\n5\n6\n7\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/ex5-eg2-2.txt/","title":"ex5 eg2 2","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/ex5-eg2-2.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    13 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 43 LAB Exercises on Graphs and Trees\n    \u2514\u2500\u2500 ex5 eg2 2.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/ex5-eg2-2.txt/#preview","title":"Preview","text":"<pre><code>1\n2\n3\n4\n5\n6\n8\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/ex5-eg3-1.txt/","title":"ex5 eg3 1","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/ex5-eg3-1.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    13 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 43 LAB Exercises on Graphs and Trees\n    \u2514\u2500\u2500 ex5 eg3 1.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/ex5-eg3-1.txt/#preview","title":"Preview","text":"<pre><code>1\n2\n3\n4\n5\n6\n7\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/ex5-eg3-2.txt/","title":"ex5 eg3 2","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/ex5-eg3-2.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    11 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 43 LAB Exercises on Graphs and Trees\n    \u2514\u2500\u2500 ex5 eg3 2.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/ex5-eg3-2.txt/#preview","title":"Preview","text":"<pre><code>1\n2\n3\n4\n5\n6\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/ex5.cpp/","title":"ex5","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/ex5.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 43 LAB Exercises on Graphs and Trees\n    \u2514\u2500\u2500 ex5.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/ex5.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include \"BST.h\"\n\nbool check_BST_identical_r(BST*&amp;,BST*&amp;);\n\nint main(){\n    int choice;\n    string eg1,eg2;\n    while(true){\n        cout &lt;&lt; \"Please choose:\" &lt;&lt; endl;\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \" 0 - quit\" &lt;&lt; endl;\n        cout &lt;&lt; \" 1 - example #1\" &lt;&lt; endl;\n        cout &lt;&lt; \" 2 - example #2\" &lt;&lt; endl;\n        cout &lt;&lt; \" 3 - example #3\" &lt;&lt; endl;\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \"Please input your choice: \";\n        cin &gt;&gt; choice;\n\n        switch(choice){\n            case 0: return 0;\n            case 1: eg1 = \"ex5-eg1-1.txt\"; eg2 = \"ex5-eg1-2.txt\"; break;\n            case 2: eg1 = \"ex5-eg2-1.txt\"; eg2 = \"ex5-eg2-2.txt\"; break;\n            case 3: eg1 = \"ex5-eg3-1.txt\"; eg2 = \"ex5-eg3-2.txt\"; break;\n\n            default: cout &lt;&lt; \"Invalid input!\" &lt;&lt; endl; return 0;\n        }\n\n        BST *t1=NULL, *t2=NULL;\n\n        upload_BT(t1,eg1);\n        upload_BT(t2,eg2);\n\n        cout &lt;&lt; endl; visualize_tree(t1);\n        cout &lt;&lt; endl; visualize_tree(t2);\n\n        cout &lt;&lt; endl &lt;&lt; (check_BST_identical_r(t1,t2)? \"True\": \"False\") &lt;&lt; endl &lt;&lt; endl;\n\n        delete t1,t2;\n    }\n    return 0;\n}\n\nbool check_BST_identical_r(BST* &amp;t1, BST* &amp;t2){\n    if(t1 &amp;&amp; t2){\n        if(t1-&gt;value == t2-&gt;value){\n            return (check_BST_identical_r(t1-&gt;left,t2-&gt;left)\n                 &amp;&amp; check_BST_identical_r(t1-&gt;right,t2-&gt;right));\n        }\n        else{return false;}\n    }\n    else{return (!(t1 || t2));}\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/ex5V.cpp/","title":"ex5V","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/ex5V.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    3 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 43 LAB Exercises on Graphs and Trees\n    \u2514\u2500\u2500 ex5V.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/ex5V.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include \"BST.h\"\n\nclass Stack{\n    private:\n        struct node{\n            int value;\n            node* next;\n        }*S;\n    public:\n        Stack();\n        void stack_push(const int);\n        int* stack_pop();\n};\n\nvoid check_BST_identical_i(Stack*&amp;,BST*&amp;,BST*&amp;);\n\nbool check_BST_identical(BST*&amp;,BST*&amp;);\n\nint main(){\n    int choice;\n    string eg1,eg2;\n    while(true){\n        cout &lt;&lt; \"Please choose:\" &lt;&lt; endl;\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \" 0 - quit\" &lt;&lt; endl;\n        cout &lt;&lt; \" 1 - example #1\" &lt;&lt; endl;\n        cout &lt;&lt; \" 2 - example #2\" &lt;&lt; endl;\n        cout &lt;&lt; \" 3 - example #3\" &lt;&lt; endl;\n        cout &lt;&lt; endl;\n        cout &lt;&lt; \"Please input your choice: \";\n        cin &gt;&gt; choice;\n\n        switch(choice){\n            case 0: return 0;\n            case 1: eg1 = \"ex5-eg1-1.txt\"; eg2 = \"ex5-eg1-2.txt\"; break;\n            case 2: eg1 = \"ex5-eg2-1.txt\"; eg2 = \"ex5-eg2-2.txt\"; break;\n            case 3: eg1 = \"ex5-eg3-1.txt\"; eg2 = \"ex5-eg3-2.txt\"; break;\n\n            default: cout &lt;&lt; \"Invalid input!\" &lt;&lt; endl; return 0;\n        }\n\n        BST *t1=NULL, *t2=NULL;\n\n        upload_BT(t1,eg1);\n        upload_BT(t2,eg2);\n\n        cout &lt;&lt; endl; visualize_tree(t1);\n        cout &lt;&lt; endl; visualize_tree(t2);\n\n        cout &lt;&lt; endl &lt;&lt; (check_BST_identical(t1,t2)? \"True\": \"False\") &lt;&lt; endl &lt;&lt; endl;\n\n        delete t1,t2;\n    }\n    return 0;\n}\n\nStack::Stack(){S = NULL;}\n\nvoid Stack::stack_push(const int v){\n    if(S){\n        node* p = new node();\n        p-&gt;value = v;\n        p-&gt;next = S;\n        S = p;\n    }\n    else{\n        S = new node();\n        S-&gt;value = v;\n        S-&gt;next = NULL;\n    }\n}\n\nint* Stack::stack_pop(){\n    if(S){\n        node* p = S;\n        S = p-&gt;next;\n\n        return &amp;p-&gt;value;\n    }\n    else{return NULL;}\n}\n\nvoid check_BST_identical_i(Stack* &amp;S, BST* &amp;t1, BST* &amp;t2){\n    if(t1 &amp;&amp; t2){\n        S-&gt;stack_push(t1-&gt;value);\n        S-&gt;stack_push(t2-&gt;value);\n        check_BST_identical_i(S,t1-&gt;left,t2-&gt;left);\n        check_BST_identical_i(S,t1-&gt;right,t2-&gt;right);\n    }\n    else if(t1 &amp;&amp; !t2){\n        S-&gt;stack_push(t1-&gt;value);\n        check_BST_identical_i(S,t1-&gt;left,t2);\n        check_BST_identical_i(S,t1-&gt;right,t2);\n    }\n    else if(!t1 &amp;&amp; t2){\n        S-&gt;stack_push(t2-&gt;value);\n        check_BST_identical_i(S,t1,t2-&gt;left);\n        check_BST_identical_i(S,t1,t2-&gt;right);\n    }\n}\n\nbool check_BST_identical(BST* &amp;t1, BST* &amp;t2){\n    Stack *S = new Stack();\n    check_BST_identical_i(S,t1,t2);\n\n    int *p1, *p2;\n    while(true){\n        p1 = S-&gt;stack_pop();\n        p2 = S-&gt;stack_pop();\n\n        if(p1 &amp;&amp; p2){\n            if(*p1 != *p2){return false;}\n        }\n        else if(p1 || p2){\n            return false;\n        }\n        else{\n            return true;\n        }\n\n        delete p1,p2;\n    }\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/tree.txt/","title":"tree","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/tree.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    11 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 43 LAB Exercises on Graphs and Trees\n    \u2514\u2500\u2500 tree.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_43_LAB_Exercises_on_Graphs_and_Trees/tree.txt/#preview","title":"Preview","text":"<pre><code>5\n3\n7\n2\n4\n6\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_44_LAB_Basic_exercises_on_Object-Oriented/","title":"Lecture 44 LAB Basic exercises on Object Oriented","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_44_LAB_Basic_exercises_on_Object-Oriented/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 11 items</li> <li>Size:  12 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 44 LAB Basic exercises on Object Oriented\n</code></pre> Name Type Item Size ex1 cpp / 1 KiB ex1V main cpp / 255 B ex1V stack cpp / 629 B ex1V stack hpp / 318 B ex2 cpp / 1 KiB ex3 cpp / 2 KiB ex4 main cpp / 2 KiB ex4 person cpp / 945 B ex4 person hpp / 513 B ex5 cpp / 2 KiB ex6 cpp / 2 KiB"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_44_LAB_Basic_exercises_on_Object-Oriented/ex1.cpp/","title":"ex1","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_44_LAB_Basic_exercises_on_Object-Oriented/ex1.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 44 LAB Basic exercises on Object Oriented\n    \u2514\u2500\u2500 ex1.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_44_LAB_Basic_exercises_on_Object-Oriented/ex1.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nclass Stack{\n    private:\n        struct node{\n            int value;\n            node* next;\n        }*S;\n    public:\n        Stack();\n        ~Stack();\n        void stack_push(const int);\n        int stack_pop();\n        bool stack_isEmpty();\n};\n\nint main(){\n    Stack* S = new Stack();\n\n    S-&gt;stack_push(1);\n    S-&gt;stack_push(2);\n    S-&gt;stack_push(3);\n\n    S-&gt;stack_pop();\n\n    while(!S-&gt;stack_isEmpty()){cout &lt;&lt; S-&gt;stack_pop() &lt;&lt; endl;}\n\n    return 0;\n}\n\nStack::Stack(){S = NULL;}\n\nStack::~Stack(){\n    node* p;\n    while(S){\n        p = S;\n        S = S-&gt;next;\n        delete p;\n    }\n}\n\nvoid Stack::stack_push(const int v){\n    if(S){\n        node* p = new node();\n        p-&gt;value = v;\n        p-&gt;next = S;\n        S = p;\n    }\n    else{\n        S = new node();\n        S-&gt;value = v;\n        S-&gt;next = NULL;\n    }\n}\n\nint Stack::stack_pop(){\n    if(S){\n        node* p = S;\n        int v = p-&gt;value;\n        S = p-&gt;next;\n        delete p;\n\n        return v;\n    }\n    else{return 0;}\n}\n\nbool Stack::stack_isEmpty(){return (!bool(S));}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_44_LAB_Basic_exercises_on_Object-Oriented/ex1V-main.cpp/","title":"ex1V main","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_44_LAB_Basic_exercises_on_Object-Oriented/ex1V-main.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    255 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 44 LAB Basic exercises on Object Oriented\n    \u2514\u2500\u2500 ex1V main.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_44_LAB_Basic_exercises_on_Object-Oriented/ex1V-main.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include \"ex1V-stack.h\"\n\nint main(){\n    Stack* S = new Stack();\n\n    S-&gt;stack_push(1);\n    S-&gt;stack_push(2);\n    S-&gt;stack_push(3);\n\n    S-&gt;stack_pop();\n\n    while(!S-&gt;stack_isEmpty()){cout &lt;&lt; S-&gt;stack_pop() &lt;&lt; endl;}\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_44_LAB_Basic_exercises_on_Object-Oriented/ex1V-stack.cpp/","title":"ex1V stack","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_44_LAB_Basic_exercises_on_Object-Oriented/ex1V-stack.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    629 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 44 LAB Basic exercises on Object Oriented\n    \u2514\u2500\u2500 ex1V stack.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_44_LAB_Basic_exercises_on_Object-Oriented/ex1V-stack.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include \"ex1V-stack.hpp\"\n\nStack::Stack(){S = NULL;}\n\nStack::~Stack(){\n    node* p;\n    while(S){\n        p = S;\n        S = S-&gt;next;\n        delete p;\n    }\n}\n\nvoid Stack::stack_push(const int v){\n    if(S){\n        node* p = new node();\n        p-&gt;value = v;\n        p-&gt;next = S;\n        S = p;\n    }\n    else{\n        S = new node();\n        S-&gt;value = v;\n        S-&gt;next = NULL;\n    }\n}\n\nint Stack::stack_pop(){\n    if(S){\n        node* p = S;\n        int v = p-&gt;value;\n        S = p-&gt;next;\n        delete p;\n\n        return v;\n    }\n    else{return 0;}\n}\n\nbool Stack::stack_isEmpty(){return (!bool(S));}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_44_LAB_Basic_exercises_on_Object-Oriented/ex1V-stack.hpp/","title":"ex1V stack","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_44_LAB_Basic_exercises_on_Object-Oriented/ex1V-stack.hpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    hpp</li> <li>Size:    318 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 44 LAB Basic exercises on Object Oriented\n    \u2514\u2500\u2500 ex1V stack.hpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_44_LAB_Basic_exercises_on_Object-Oriented/ex1V-stack.hpp/#preview","title":"Preview","text":"<pre><code>#ifndef EX1V_STACK_H\n#define EX1V_STACK_H\n#include &lt;iostream&gt;\n\nclass Stack{\n    private:\n        struct node{\n            int value;\n            node* next;\n        }*S;\n    public:\n        Stack();\n        ~Stack();\n        void stack_push(const int);\n        int stack_pop();\n        bool stack_isEmpty();\n};\n\n#endif\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_44_LAB_Basic_exercises_on_Object-Oriented/ex2.cpp/","title":"ex2","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_44_LAB_Basic_exercises_on_Object-Oriented/ex2.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 44 LAB Basic exercises on Object Oriented\n    \u2514\u2500\u2500 ex2.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_44_LAB_Basic_exercises_on_Object-Oriented/ex2.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nclass Time{\n    private:\n        int h, m, s;\n    public:\n        Time();\n        int time_get_hour();\n        int time_get_minutes();\n        int time_get_seconds();\n        void time_advance(const int, const int, const int);\n        void time_reset(const int, const int, const int);\n        void time_print();\n};\n\nint main(){\n    Time* T = new Time();\n\n    T-&gt;time_reset(11,59,59);\n\n    T-&gt;time_advance(0,0,1);\n\n    T-&gt;time_print();\n    cout &lt;&lt; endl;\n\n    return 0;\n}\n\nTime::Time(){\n    h = 0;\n    m = 0;\n    s = 0;\n}\n\nint Time::time_get_hour(){\n    return h;\n}\n\nint Time::time_get_minutes(){\n    return m;\n}\n\nint Time::time_get_seconds(){\n    return s;\n}\n\nvoid Time::time_advance(const int h, const int m, const int s){\n    int t = (((this-&gt;h + h) * 3600)\n            + ((this-&gt;m + m) * 60)\n            + (this-&gt;s + s))\n            % (24 * 3600);\n    Time::time_reset(t/3600,(t%3600)/60,t%60);\n}\nvoid Time::time_reset(const int h, const int m, const int s){\n    this-&gt;h = h;\n    this-&gt;m = m;\n    this-&gt;s = s;\n}\nvoid Time::time_print(){cout &lt;&lt; h &lt;&lt; ':' &lt;&lt; m &lt;&lt; ':' &lt;&lt; s;}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_44_LAB_Basic_exercises_on_Object-Oriented/ex3.cpp/","title":"ex3","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_44_LAB_Basic_exercises_on_Object-Oriented/ex3.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 44 LAB Basic exercises on Object Oriented\n    \u2514\u2500\u2500 ex3.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_44_LAB_Basic_exercises_on_Object-Oriented/ex3.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n\nclass Person{\n    private:\n        char *name, *surname;\n        int YoB;\n\n        void p_set_array_of_chars(char*&amp;,string);\n    public:\n        Person();\n        ~Person();\n        char* person_get_name();\n        char* person_get_surname();\n        int person_get_YoB();\n        void person_set_name(string);\n        void person_set_surname(string);\n        void person_set_YoB(const int);\n        void person_print();\n};\n\nint main(){\n    Person* P = new Person();\n\n    P-&gt;person_set_name(\"NRed\");\n    P-&gt;person_set_surname(\"SRed\");\n    P-&gt;person_set_YoB(2002);\n\n    P-&gt;person_print();\n\n    cout &lt;&lt; endl;\n\n    P-&gt;person_set_YoB(2003);\n\n    P-&gt;person_print();\n\n    return 0;\n}\n\nvoid Person::p_set_array_of_chars(char* &amp;a1, string a2){\n    int l = 0;\n    while(a2[l] != '\\0'){l++;}\n\n    delete[] a1;\n    a1 = new char[l];\n\n    for(int i=0; i&lt;l; i++){a1[i] = a2[i];}\n}\n\nPerson::Person(){\n    name = NULL;\n    surname = NULL;\n    YoB = 0;\n}\n\nPerson::~Person(){delete[] name, surname;}\n\nchar* Person::person_get_name(){\n    return name;\n}\n\nchar* Person::person_get_surname(){\n    return surname;\n}\n\nint Person::person_get_YoB(){\n    return YoB;\n}\n\nvoid Person::person_set_name(string name){\n    p_set_array_of_chars(this-&gt;name,name);\n}\n\nvoid Person::person_set_surname(string surname){\n    p_set_array_of_chars(this-&gt;surname,surname);\n}\n\nvoid Person::person_set_YoB(const int YoB){this-&gt;YoB = YoB;}\n\nvoid Person::person_print(){\n    cout &lt;&lt; \"- name:          \" &lt;&lt; name &lt;&lt; endl;\n    cout &lt;&lt; \"- surname:       \" &lt;&lt; surname &lt;&lt; endl;\n    cout &lt;&lt; \"- year of birth: \" &lt;&lt; YoB &lt;&lt; endl;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_44_LAB_Basic_exercises_on_Object-Oriented/ex4-main.cpp/","title":"ex4 main","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_44_LAB_Basic_exercises_on_Object-Oriented/ex4-main.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 44 LAB Basic exercises on Object Oriented\n    \u2514\u2500\u2500 ex4 main.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_44_LAB_Basic_exercises_on_Object-Oriented/ex4-main.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include \"ex4-person.h\"\n\nPerson create_person(string, string, const int);\n\nPerson* create_array_of_person(const int);\n\nbool store_person_in_array(Person*&amp;, Person, const int);\n\nfloat average_cal(Person*&amp;, const int);\n\nvoid average(Person*&amp;, const int);\n\nvoid greaterThan(Person*&amp;, const int);\n\nint main(){\n    int n;\n    cout &lt;&lt; \"Please input the length n: \";\n    cin &gt;&gt; n;\n\n    Person* PA = create_array_of_person(n);\n\n    store_person_in_array(PA,create_person(\"p1 name\",\"p1 surname\",2001),n);\n    store_person_in_array(PA,create_person(\"p2 name\",\"p2 surname\",2002),n);\n    store_person_in_array(PA,create_person(\"p3 name\",\"p3 surname\",2003),n);\n    store_person_in_array(PA,create_person(\"p4 name\",\"p4 surname\",2004),n);\n    store_person_in_array(PA,create_person(\"p5 name\",\"p5 surname\",2005),n);\n\n    cout &lt;&lt; \"average: \";\n    average(PA,n);\n    cout &lt;&lt; endl;\n\n    cout &lt;&lt; \"greater Than: \";\n    greaterThan(PA,n);\n    cout &lt;&lt; endl;\n\n    return 0;\n}\n\nPerson create_person(string name, string surname, const int YoB){\n    Person P;\n\n    P.person_set_name(name);\n    P.person_set_surname(surname);\n    P.person_set_YoB(YoB);\n\n    return P;\n}\n\nPerson* create_array_of_person(const int n){\n    if(n &gt; 0){\n        return new Person[n];\n    }\n    else{\n        return NULL;\n    }\n}\n\nbool store_person_in_array(Person* &amp;A, Person O, const int n){\n    if(A){\n        Person* p = A;\n        for(int i=0; p-&gt;person_get_name(); p++){\n            i++;\n            if(i &gt;= n){return false;}\n        }\n\n        p-&gt;person_set_name(O.person_get_name());\n        p-&gt;person_set_surname(O.person_get_surname());\n        p-&gt;person_set_YoB(O.person_get_YoB());\n\n        return true;\n    }\n    else{return false;}\n}\n\nfloat average_cal(Person* &amp;A, const int n){\n    int l = 0;\n    float a = 0;\n    for(Person*p=A; (p-&gt;person_get_name() &amp;&amp; l&lt;n); p++){\n        a += p-&gt;person_get_YoB();\n        l++;\n    }\n    a /= l;\n\n    return a;\n}\n\nvoid average(Person* &amp;A, const int n){if(A){cout &lt;&lt; average_cal(A,n);}}\n\nvoid greaterThan(Person* &amp;A, const int n){\n    if(A){\n        float a = average_cal(A,n);\n\n        int c = 0;\n        Person* p = A;\n        for(int i=0; (p[i].person_get_name() &amp;&amp; i&lt;n); i++){c += (p[i].person_get_YoB() &gt; a);}\n\n        cout &lt;&lt; c;\n    }\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_44_LAB_Basic_exercises_on_Object-Oriented/ex4-person.cpp/","title":"ex4 person","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_44_LAB_Basic_exercises_on_Object-Oriented/ex4-person.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    945 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 44 LAB Basic exercises on Object Oriented\n    \u2514\u2500\u2500 ex4 person.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_44_LAB_Basic_exercises_on_Object-Oriented/ex4-person.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include \"ex4-person.hpp\"\n\nvoid Person::p_set_array_of_chars(char* &amp;a1, string a2){\n    int l = 0;\n    while(a2[l] != '\\0'){l++;}\n\n    delete[] a1;\n    a1 = new char[l];\n\n    for(int i=0; i&lt;l; i++){a1[i] = a2[i];}\n}\n\nPerson::Person(){\n    name = NULL;\n    surname = NULL;\n    YoB = 0;\n}\n\nPerson::~Person(){delete[] name, surname;}\n\nchar* Person::person_get_name(){\n    return name;\n}\n\nchar* Person::person_get_surname(){\n    return surname;\n}\n\nint Person::person_get_YoB(){\n    return YoB;\n}\n\nvoid Person::person_set_name(string name){\n    p_set_array_of_chars(this-&gt;name,name);\n}\n\nvoid Person::person_set_surname(string surname){\n    p_set_array_of_chars(this-&gt;surname,surname);\n}\n\nvoid Person::person_set_YoB(const int YoB){this-&gt;YoB = YoB;}\n\nvoid Person::person_print(){\n    cout &lt;&lt; \"- name:          \" &lt;&lt; name &lt;&lt; endl;\n    cout &lt;&lt; \"- surname:       \" &lt;&lt; surname &lt;&lt; endl;\n    cout &lt;&lt; \"- year of birth: \" &lt;&lt; YoB &lt;&lt; endl;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_44_LAB_Basic_exercises_on_Object-Oriented/ex4-person.hpp/","title":"ex4 person","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_44_LAB_Basic_exercises_on_Object-Oriented/ex4-person.hpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    hpp</li> <li>Size:    513 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 44 LAB Basic exercises on Object Oriented\n    \u2514\u2500\u2500 ex4 person.hpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_44_LAB_Basic_exercises_on_Object-Oriented/ex4-person.hpp/#preview","title":"Preview","text":"<pre><code>#ifndef EX4_PERSON_H\n#define EX4_PERSON_H\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n\nclass Person{\n    private:\n        char *name, *surname;\n        int YoB;\n\n        void p_set_array_of_chars(char*&amp;,string);\n    public:\n        Person();\n        ~Person();\n        char* person_get_name();\n        char* person_get_surname();\n        int person_get_YoB();\n        void person_set_name(string);\n        void person_set_surname(string);\n        void person_set_YoB(const int);\n        void person_print();\n};\n\n#endif\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_44_LAB_Basic_exercises_on_Object-Oriented/ex5.cpp/","title":"ex5","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_44_LAB_Basic_exercises_on_Object-Oriented/ex5.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 44 LAB Basic exercises on Object Oriented\n    \u2514\u2500\u2500 ex5.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_44_LAB_Basic_exercises_on_Object-Oriented/ex5.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nclass Circle{\n    private:\n        const float PI = 3.1415926;\n        float r, x, y;\n    public:\n        Circle();\n        Circle(Circle&amp;);\n        float circle_get_radius();\n        float circle_get_x();\n        float circle_get_y();\n        void circle_set(const float, const float, const float);\n        float circle_area();\n        float circle_circumference();\n        void circle_print();\n};\n\nfloat random_float();\n\nint main(){\n    Circle* C = new Circle[3];\n\n    for(int i=0; i&lt;3; i++){C[i].circle_set(3,18,2);}\n\n    srand(time(NULL));\n\n    int i1 = rand()%3;\n    int i2 = i1;\n    while(i1 == i2){i2 = rand()%3;}\n\n    C[i1].circle_set(random_float(),random_float(),random_float());\n    C[i2].circle_set(random_float(),random_float(),random_float());\n\n    for(int i=0; i&lt;3; i++){\n        cout &lt;&lt; \"Circle \" &lt;&lt; i &lt;&lt; ':' &lt;&lt; endl;\n        C[i].circle_print();\n    }\n\n    return 0;\n}\n\nCircle::Circle(){\n    r = 0;\n    x = 0;\n    y = 0;\n}\n\nCircle::Circle(Circle &amp;A){\n    r = A.circle_get_radius();\n    x = A.circle_get_x();\n    y = A.circle_get_y();\n}\n\nfloat Circle::circle_get_radius(){\n    return r;\n}\n\nfloat Circle::circle_get_x(){\n    return x;\n}\n\nfloat Circle::circle_get_y(){\n    return y;\n}\n\nvoid Circle::circle_set(const float r, const float x, const float y){\n    this-&gt;r = r;\n    this-&gt;x = x;\n    this-&gt;y = y;\n}\n\nfloat Circle::circle_area(){\n    return (PI*r*r);\n}\n\nfloat Circle::circle_circumference(){\n    return (2*PI*r);\n}\n\nvoid Circle::circle_print(){\n    cout &lt;&lt; \"- radius: \" &lt;&lt; r &lt;&lt; endl;\n    cout &lt;&lt; \"- center: \" &lt;&lt; endl;\n    cout &lt;&lt; \"  - x: \" &lt;&lt; x &lt;&lt; endl;\n    cout &lt;&lt; \"  - y: \" &lt;&lt; y &lt;&lt; endl;\n}\n\nfloat random_float(){return (float(rand() % 0b11111111'11111111)\n                           / float(rand() % 0b11111111));}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_44_LAB_Basic_exercises_on_Object-Oriented/ex6.cpp/","title":"ex6","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_44_LAB_Basic_exercises_on_Object-Oriented/ex6.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 44 LAB Basic exercises on Object Oriented\n    \u2514\u2500\u2500 ex6.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_44_LAB_Basic_exercises_on_Object-Oriented/ex6.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nclass String{\n    private:\n        int length;\n        char* array;\n\n        int p_length_compute(char*);\n    public:\n        String();\n        ~String();\n        int string_get_length();\n        char* string_get_array();\n        void string_set(char*);\n        void string_length_compute();\n        char string_array_position(const int);\n        void string_print();\n};\n\nint main(){\n    char C1[] = \"stringValue\";\n    String* S = new String[2];\n\n    S[0].string_set(C1);\n    S[1].string_set(C1);\n\n    cout &lt;&lt; \"S1: \"; S[0].string_print(); cout &lt;&lt; endl;\n    cout &lt;&lt; \"S2: \"; S[1].string_print(); cout &lt;&lt; endl;\n\n    cout &lt;&lt; endl;\n\n    srand(time(NULL));\n\n    char C2[] = \"newValueNewValue\";\n    S[rand() % 2].string_set(C2);\n\n    cout &lt;&lt; \"S1: \"; S[0].string_print(); cout &lt;&lt; endl;\n    cout &lt;&lt; \"S2: \"; S[1].string_print(); cout &lt;&lt; endl;\n\n    return 0;\n}\n\nint String::p_length_compute(char* A){\n    int l = 0;\n    while(A[l] != '\\0'){l++;}\n\n    return l;\n}\n\nString::String(){\n    length = 0;\n    array = NULL;\n}\n\nString::~String(){delete[] array;}\n\nint String::string_get_length(){\n    return length;\n}\n\nchar* String::string_get_array(){\n    return array;\n}\n\nvoid String::string_set(char* A){\n    int l = p_length_compute(A);\n\n    if(array){delete[] array;}\n    array = new char[l];\n\n    for(int i=0; i&lt;l; i++){array[i] = A[i];}\n}\n\nvoid String::string_length_compute(){length = p_length_compute(array);}\n\nchar String::string_array_position(const int i){return array[i];}\n\nvoid String::string_print(){cout &lt;&lt; array;}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/","title":"Lecture 45 LAB Exercises on additional Past exams","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 25 items</li> <li>Size:  21 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 45 LAB Exercises on additional Past exams\n</code></pre> Name Type Item Size File cpp / 3 KiB File1 eg txt / 253 B File2 eg txt / 11 B File3 eg1 txt / 11 B File3 eg2 txt / 17 B File3 eg3 txt / 21 B File3 eg4 txt / 31 B Interleave eg1 1 txt / 7 B Interleave eg1 2 txt / 7 B Interleave eg2 1 txt / 9 B Interleave eg2 2 txt / 7 B Interleave cpp / 3 KiB LowerToUpper input txt / 37 B LowerToUpper cpp / 1019 B Pattern cpp / 1 KiB PostOffice main cpp / 1 KiB Submatrix eg 1 txt / 31 B Submatrix eg 2 txt / 7 B Submatrix cpp / 7 KiB WorkLists eg1 txt / 32 B WorkLists eg2 txt / 86 B WorkLists eg3 txt / 92 B WorkLists cpp / 3 KiB queue c list cc / 960 B queue c list h / 359 B"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/File.cpp/","title":"File","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/File.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    3 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 45 LAB Exercises on additional Past exams\n    \u2514\u2500\u2500 File.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/File.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;fstream&gt;\n\nint** f1(string fName){\n    char c;\n    fstream fIn;\n\n    int l1 = 0;\n    fIn.open(fName, ios::in);\n    while(!fIn.eof()){\n        c = fIn.get();\n        if((c == '\\n') || (fIn.eof())){l1++;}\n    }\n\n    int l2[l1];\n    fIn.clear();\n    fIn.seekg(0);\n    for(int i=0,j=0; !fIn.eof();){\n        c = fIn.get();\n        if((c == '\\n') || (fIn.eof())){\n            l2[i] = 1 + j;\n            i++;\n            j = 0;\n        }\n        else if(c == ' '){j++;}\n    }\n\n    int** A = new int*[1+l1];\n    A[0] = new int;\n    A[0][0] = l1;\n    for(int i=0; i&lt;l1; i++){\n        A[1+i] = new int[1+l2[i]];\n        A[1+i][0] = l2[i];\n    }\n    fIn.clear();\n    fIn.seekg(0);\n    for(int i=0,j=0,k=0; !fIn.eof();){\n        c = fIn.get();\n        if((c == '\\n') || (fIn.eof())){\n            A[1+i][1+j] = k;\n            i++;\n            j = 0;\n            k = 0;\n        }\n        else if(c == ' '){\n            A[1+i][1+j] = k;\n            j++;\n            k = 0;\n        }\n        else{k++;}\n    }\n\n    return A;\n}\n\nint** f2(string fName){\n    int** A = new int*[2];\n    string wIn;\n    fstream fIn;\n\n    int l1 = 0;\n    fIn.open(fName, ios::in);\n    for(;!fIn.eof(); l1++){fIn &gt;&gt; wIn;}\n\n    A[0] = new int[1+l1];\n    A[0][0] = l1;\n    fIn.clear();\n    fIn.seekg(0);\n    for(int i=0,l; !fIn.eof(); i++){\n        fIn &gt;&gt; wIn;\n\n        l = 0;\n        while((wIn[l] != '\\0') &amp;&amp; (wIn[l] != '\\n')){l++;}\n        char *C = new char[l];\n        for(int i=0; i&lt;l; i++){C[i] = wIn[i];}\n\n        if(l){A[0][1+i] = stoi(C);}\n    }\n\n    int min=A[0][1], max=A[0][1];\n    for(int i=1; i&lt;l1; i++){\n        min = (A[0][1+i] &lt; min)? A[0][1+i]: min;\n        max = (A[0][1+i] &gt; max)? A[0][1+i]: max;\n    }\n\n    int r=1+max-min, B[r] = {0};\n    for(int i=0; i&lt;l1; i++){B[A[0][1+i]-min]++;}\n\n    int l2 = 0;\n    for(int i=0; i&lt;r; i++){l2 += bool(B[i]);}\n\n    A[1] = new int[1+l2];\n    A[1][0] = l2;\n    for(int i=0,j=0; i&lt;l1; i++){\n        if(B[A[0][1+i]-min]){\n            A[1][1+j] = A[0][1+i];\n            B[A[0][1+i]-min] = 0;\n            j++;\n        }\n    }\n\n    return A;\n}\n\nint main(){\n    int** A1 = f1(\"File1-eg.txt\");\n    int** A2 = f2(\"File2-eg.txt\");\n\n    cout &lt;&lt; \"Function one:\" &lt;&lt; endl &lt;&lt; \"- Y: \" &lt;&lt; A1[0][0] &lt;&lt; endl;\n    for(int i=0; i&lt;A1[0][0]; i++){\n        cout &lt;&lt; \"- X: \" &lt;&lt; A1[1+i][0] &lt;&lt; \" and numbers: \";\n        for(int j=0; j&lt;(A1[1+i][0] - 1); j++){\n            cout &lt;&lt; A1[1+i][1+j] &lt;&lt; ',';\n        }\n        cout &lt;&lt; A1[1+i][A1[1+i][0]] &lt;&lt; endl;\n    }\n\n    cout &lt;&lt; endl &lt;&lt; \"Function two:\" &lt;&lt; endl &lt;&lt; \"- Input array: \";\n    for(int i=1; i&lt;A2[0][0]; i++){cout &lt;&lt; A2[0][i] &lt;&lt; ',';}\n    cout &lt;&lt; A2[0][A2[0][0]] &lt;&lt; endl &lt;&lt; \"- Unique elements of the said array: \";\n    for(int i=1; i&lt;A2[1][0]; i++){cout &lt;&lt; A2[1][i] &lt;&lt; ',';}\n    cout &lt;&lt; A2[1][A2[1][0]] &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/File1-eg.txt/","title":"File1 eg","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/File1-eg.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    253 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 45 LAB Exercises on additional Past exams\n    \u2514\u2500\u2500 File1 eg.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/File1-eg.txt/#preview","title":"Preview","text":"<pre><code>The first row contains five strings\nThe second row contains more than five different elements\nAt a given time Jean realizes that she has forgotten something\nReading helps you to improve your understanding of a language and build your personal vocabulary\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/File2-eg.txt/","title":"File2 eg","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/File2-eg.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    11 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 45 LAB Exercises on additional Past exams\n    \u2514\u2500\u2500 File2 eg.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/File2-eg.txt/#preview","title":"Preview","text":"<pre><code>3 5 3 8 4 7\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/File3-eg1.txt/","title":"File3 eg1","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/File3-eg1.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    11 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 45 LAB Exercises on additional Past exams\n    \u2514\u2500\u2500 File3 eg1.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/File3-eg1.txt/#preview","title":"Preview","text":"<pre><code>3 5 3 8 4 7\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/File3-eg2.txt/","title":"File3 eg2","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/File3-eg2.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    17 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 45 LAB Exercises on additional Past exams\n    \u2514\u2500\u2500 File3 eg2.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/File3-eg2.txt/#preview","title":"Preview","text":"<pre><code>3 6 3 8 4 4 4 9 8\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/File3-eg3.txt/","title":"File3 eg3","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/File3-eg3.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    21 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 45 LAB Exercises on additional Past exams\n    \u2514\u2500\u2500 File3 eg3.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/File3-eg3.txt/#preview","title":"Preview","text":"<pre><code>2 1 5 4 4 8 4 3 3 9 9\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/File3-eg4.txt/","title":"File3 eg4","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/File3-eg4.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    31 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 45 LAB Exercises on additional Past exams\n    \u2514\u2500\u2500 File3 eg4.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/File3-eg4.txt/#preview","title":"Preview","text":"<pre><code>7 5 3 2 7 4 13 2 1 8 3 5 4 8 10\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/Interleave-eg1-1.txt/","title":"Interleave eg1 1","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/Interleave-eg1-1.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    7 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 45 LAB Exercises on additional Past exams\n    \u2514\u2500\u2500 Interleave eg1 1.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/Interleave-eg1-1.txt/#preview","title":"Preview","text":"<pre><code>1\n3\n5\n7\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/Interleave-eg1-2.txt/","title":"Interleave eg1 2","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/Interleave-eg1-2.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    7 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 45 LAB Exercises on additional Past exams\n    \u2514\u2500\u2500 Interleave eg1 2.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/Interleave-eg1-2.txt/#preview","title":"Preview","text":"<pre><code>2\n4\n6\n8\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/Interleave-eg2-1.txt/","title":"Interleave eg2 1","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/Interleave-eg2-1.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    9 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 45 LAB Exercises on additional Past exams\n    \u2514\u2500\u2500 Interleave eg2 1.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/Interleave-eg2-1.txt/#preview","title":"Preview","text":"<pre><code>14\n13\n0\n1\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/Interleave-eg2-2.txt/","title":"Interleave eg2 2","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/Interleave-eg2-2.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    7 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 45 LAB Exercises on additional Past exams\n    \u2514\u2500\u2500 Interleave eg2 2.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/Interleave-eg2-2.txt/#preview","title":"Preview","text":"<pre><code>2\n4\n6\n8\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/Interleave.cpp/","title":"Interleave","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/Interleave.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    3 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 45 LAB Exercises on additional Past exams\n    \u2514\u2500\u2500 Interleave.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/Interleave.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;fstream&gt;\n\nstruct Node{\n    int data;\n    Node* next;\n};\n\nint str_to_int(const string);\n\nvoid node_add(Node*&amp;, const int);\n\nNode* list_read_from_file(string);\n\nint random(const int);\n\nNode* list_generate(const int, const int);\n\nvoid list_print(Node*);\n\nNode* list_copy(Node*);\n\nvoid list_interleave_r(Node*,Node*);\n\nNode* list_interleave(Node*,Node*);\n\nvoid list_main(Node*,Node*);\n\nint main(){\n    srand(time(NULL));\n\n    const int l=random(0b111), MAXNUM=0b1111;\n\n    int choice;\n    cout &lt;&lt; \"Please choose:\" &lt;&lt; endl;\n    cout &lt;&lt; endl;\n    cout &lt;&lt; \" 0 - quit\" &lt;&lt; endl;\n    cout &lt;&lt; \" 1 - example #1\" &lt;&lt; endl;\n    cout &lt;&lt; \" 2 - example #2\" &lt;&lt; endl;\n    cout &lt;&lt; \" 3 - generate randomly\" &lt;&lt; endl;\n    cout &lt;&lt; endl;\n    cout &lt;&lt; \"Please input your choice: \";\n    cin &gt;&gt; choice;\n\n    switch(choice){\n        case 0: return 0;\n        case 1:\n            cout &lt;&lt; endl;\n            list_main(\n                list_read_from_file(\"Interleave-eg1-1.txt\"),\n                list_read_from_file(\"Interleave-eg1-2.txt\")\n            );\n            break;\n        case 2:\n            cout &lt;&lt; endl;\n            list_main(\n                list_read_from_file(\"Interleave-eg2-1.txt\"),\n                list_read_from_file(\"Interleave-eg2-2.txt\")\n            );\n            break;\n        case 3:\n            cout &lt;&lt; endl;\n            list_main(\n                list_generate(l,MAXNUM),\n                list_generate(l,MAXNUM)\n            );\n            break;\n        default: cout &lt;&lt; \"Invalid input!\" &lt;&lt; endl; return 0;\n    }\n    return 0;\n}\n\nint str_to_int(const string s){\n    int len = 0;\n    while(s[len] != '\\0'){len++;}\n    char *res = new char[len];\n    for(int i=0; i&lt;len; i++){res[i] = s[i];}\n\n    return stoi(res);\n}\n\nvoid node_add(Node* &amp;list, const int num){\n    if(list){\n        Node* p = list;\n        while(p-&gt;next){p = p-&gt;next;}\n        p-&gt;next = new Node();\n        p-&gt;next-&gt;data = num;\n        p-&gt;next-&gt;next = NULL;\n    }\n    else{\n        list = new Node();\n        list-&gt;data = num;\n        list-&gt;next = NULL;\n    }\n}\n\nNode* list_read_from_file(string fName){\n    fstream fIn;\n    fIn.open(fName, ios::in);\n\n    string wIn;\n    Node* res = NULL;\n    while(!fIn.eof()){\n        fIn &gt;&gt; wIn;\n        node_add(res,str_to_int(wIn));\n    }\n    return res;\n}\n\nint random(const int MAX){\n    return (rand() % (1 + MAX));\n}\n\nNode* list_generate(const int l, const int MAXNUM){\n    Node* res = NULL;\n\n    for(int i=0; i&lt;l; i++){node_add(res,random(MAXNUM));}\n\n    return res;\n}\n\nvoid list_print(Node* list){\n    if(list){\n        for(Node*p=list; p; p=p-&gt;next){cout &lt;&lt; p-&gt;data &lt;&lt; ' ';}\n    }\n}\n\nNode* list_copy(Node* list){\n    Node* res = NULL;\n    if(list){\n        for(Node*p=list; p; p=p-&gt;next){node_add(res,p-&gt;data);}\n    }\n    return res;\n}\n\nvoid list_interleave_r(Node* l1, Node* l2){\n    if(l1-&gt;next){\n        list_interleave_r(l2,l1-&gt;next);\n    }\n    l1-&gt;next = l2;\n}\n\nNode* list_interleave(Node* l1, Node* l2){\n    if(l1 &amp;&amp; l2){\n        Node *l1c=list_copy(l1), *l2c=list_copy(l2);\n\n        list_interleave_r(l1c,l2c);\n\n        return l1c;\n    }\n    else{return NULL;}\n}\n\nvoid list_main(Node* l1, Node* l2){\n    cout &lt;&lt; \"Original Lists:\" &lt;&lt; endl &lt;&lt; \"- List1: \";\n    list_print(l1);\n    cout &lt;&lt; endl &lt;&lt; \"- List2: \";\n    list_print(l2);\n    cout &lt;&lt; endl &lt;&lt; \"After interleaving:\" &lt;&lt; endl &lt;&lt; \"- Interleaved ListA: \";\n    list_print(list_interleave(l1,l2));\n    cout &lt;&lt; endl &lt;&lt; \"- Interleaved ListB: \";\n    if(l1){list_print(list_interleave(l2,l1-&gt;next));}\n    cout &lt;&lt; endl;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/LowerToUpper-input.txt/","title":"LowerToUpper input","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/LowerToUpper-input.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    37 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 45 LAB Exercises on additional Past exams\n    \u2514\u2500\u2500 LowerToUpper input.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/LowerToUpper-input.txt/#preview","title":"Preview","text":"<pre><code>text for testing.\nplease,\ncorrect me.\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/LowerToUpper.cpp/","title":"LowerToUpper","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/LowerToUpper.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    1019 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 45 LAB Exercises on additional Past exams\n    \u2514\u2500\u2500 LowerToUpper.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/LowerToUpper.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;fstream&gt;\n\nchar text_correction(bool&amp;,char);\n\nvoid text_up(string,string);\n\nint main(int argc, char *argv[]){\n    string fInName=\"LowerToUpper-input.txt\", fOutName=\"LowerToUpper-output.txt\";\n\n    if(argc - 1){\n        fInName = argv[1];\n        if(argc - 2){fOutName = argv[2];}\n    }\n\n    text_up(fInName,fOutName);\n\n    return 0;\n}\n\nchar text_correction(bool &amp;judge, char c){\n    if(judge){\n        if((c &gt;= 'a')\n        &amp;&amp; (c &lt;= 'z')){\n            c += ('A' - 'a');\n            judge = false;\n        }\n    }\n    else{\n        if((c == '.')\n        || (c == ',')\n        || (c == '?')\n        || (c == '!')){judge = true;}\n    }\n    return c;\n}\n\nvoid text_up(string fInName, string fOutName){\n    fstream fIn, fOut;\n    fIn.open(fInName, ios::in);\n    fOut.open(fOutName, ios::out | ios::app);\n\n    bool judge = true;\n    char c;\n    while(!fIn.eof()){\n        c = fIn.get();\n        if(!fIn.eof()){fOut.put(text_correction(judge,c));}\n    }\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/Pattern.cpp/","title":"Pattern","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/Pattern.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 45 LAB Exercises on additional Past exams\n    \u2514\u2500\u2500 Pattern.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/Pattern.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n\nint* array_generate(const int, const int);\n\nvoid array_print(int*, const int);\n\nbool array_sub_check(int*, int*, const int, const int);\n\nint main(){\n    srand(time(NULL));\n\n    const int MAXLEN_pettern = 3;\n    const int MAXLEN_text = 6;\n    const int MAXNUM = 0b1;\n\n    int* pattern = array_generate(MAXLEN_pettern,MAXNUM);\n    int* text = array_generate(MAXLEN_text,MAXNUM);\n\n    array_print(pattern,MAXLEN_pettern);\n    cout &lt;&lt; \" -&gt; \";\n    array_print(text,MAXLEN_text);\n    cout &lt;&lt; ' ' &lt;&lt; (array_sub_check(text,pattern,MAXLEN_text,MAXLEN_pettern)? \"YES\": \"NO\") &lt;&lt; endl;\n\n    return 0;\n}\n\nint* array_generate(const int MAXLEN, const int MAXNUM){\n    int* res = new int[MAXLEN];\n    for(int i=0; i&lt;MAXLEN; i++){res[i] = rand() % (1 + MAXNUM);}\n\n    return res;\n}\n\nvoid array_print(int* array, const int MAXLEN){\n    cout &lt;&lt; '[';\n    for(int i=0; i&lt;(MAXLEN-1); i++){cout &lt;&lt; array[i] &lt;&lt; \", \";}\n    cout &lt;&lt; array[MAXLEN-1] &lt;&lt; ']';\n}\n\nbool array_sub_check(int* array, int* subarray, const int len_array, const int len_subarray){\n    for(int i=0,j=0; i&lt;len_array; i++){\n        if(array[i] == subarray[j]){\n            j++;\n            if(!(len_subarray - j)){return true;}\n        }\n        else{j = 0;}\n    }\n    return false;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/PostOffice-main.cpp/","title":"PostOffice main","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/PostOffice-main.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 45 LAB Exercises on additional Past exams\n    \u2514\u2500\u2500 PostOffice main.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/PostOffice-main.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include \"queue_c_list.h\"\n\nint main(){\n    char choice;\n    Queue* Q = new Queue();\n    while(true){\n        cout &lt;&lt; \"Please choose:\" &lt;&lt; endl;\n        cout &lt;&lt; \"- q: quit\" &lt;&lt; endl;\n        cout &lt;&lt; \"- a: add person\" &lt;&lt; endl;\n        cout &lt;&lt; \"- d: dispose of person\" &lt;&lt; endl;\n        cout &lt;&lt; \"- p: print current situation\" &lt;&lt; endl;\n        cout &lt;&lt; \"Please input your choice: \";\n        cin &gt;&gt; choice;\n\n        switch(choice){\n            case 'q': return 0;\n            case 'a':{\n                char* input;\n                cout &lt;&lt; endl &lt;&lt; \"- name: \";\n                cin &gt;&gt; input;\n                Q-&gt;queue_push(input);\n                cout &lt;&lt; endl;\n\n                break;\n            }\n            case 'd':\n                cout &lt;&lt; endl &lt;&lt; \"- \" &lt;&lt; Q-&gt;queue_pop() &lt;&lt; endl &lt;&lt; endl;\n\n                break;\n            case 'p':\n                cout &lt;&lt; endl;\n                Q-&gt;queue_print();\n                cout &lt;&lt; endl;\n\n                break;\n            default: cout &lt;&lt; \"Invalid input!\" &lt;&lt; endl;\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/Submatrix-eg-1.txt/","title":"Submatrix eg 1","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/Submatrix-eg-1.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    31 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 45 LAB Exercises on additional Past exams\n    \u2514\u2500\u2500 Submatrix eg 1.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/Submatrix-eg-1.txt/#preview","title":"Preview","text":"<pre><code>1 2 9 1\n5 6 7 8\n9 5 7 2\n7 2 9 3\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/Submatrix-eg-2.txt/","title":"Submatrix eg 2","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/Submatrix-eg-2.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    7 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 45 LAB Exercises on additional Past exams\n    \u2514\u2500\u2500 Submatrix eg 2.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/Submatrix-eg-2.txt/#preview","title":"Preview","text":"<pre><code>2\n1\n2\n3\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/Submatrix.cpp/","title":"Submatrix","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/Submatrix.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    7 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 45 LAB Exercises on additional Past exams\n    \u2514\u2500\u2500 Submatrix.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/Submatrix.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;fstream&gt;\n\nclass List{\n    private:\n        struct Node{\n            int value;\n            Node* next;\n        }* L;\n    public:\n        List();\n        List(int*, const int);\n        ~List();\n        void list_add(const int);\n        int list_get_length();\n        int* list_get();\n        int list_get_index(const int);\n        int list_get_count(const int);\n        void list_print();\n};\n\nclass Matrix{\n    private:\n        struct Node{\n            List* value;\n            Node* next;\n        }* M;\n\n        int p_random_int(const int);\n        int* p_random_array(const int, const int);\n    public:\n        Matrix();\n        Matrix(int**, const int, const int);\n        ~Matrix();\n        int matrix_get_width();\n        int matrix_get_height();\n        int* matrix_get_row(const int);\n        int* matrix_get_col(const int);\n        int matrix_get_ele(const int, const int);\n        void matrix_add_col(int*);\n        void matrix_add_row(int*);\n        void matrix_fill(const int, const int, const int);\n        void matrix_print();\n};\n\nint str_to_int(const string);\n\nint** matrix_read_from_file(string, const int, const int);\n\nint* input_read_from_file(string);\n\nMatrix* submatrix(Matrix*,int*);\n\nint main(){\n    srand(time(NULL));\n\n    const int H=4, W=4, MAX=9;\n\n    Matrix* M = new Matrix(matrix_read_from_file(\"Submatrix-eg-1.txt\",H,W),H,W);\n    //M-&gt;matrix_fill(H,W,MAX);\n\n    M-&gt;matrix_print();\n\n    cout &lt;&lt; endl &lt;&lt; \"input: \";\n\n    int* I = input_read_from_file(\"Submatrix-eg-2.txt\");\n\n    for(int i=0; i&lt;3; i++){cout &lt;&lt; I[i] &lt;&lt; ',';}\n    cout &lt;&lt; I[3] &lt;&lt; \" =&gt; \" &lt;&lt; endl &lt;&lt; endl;\n\n    Matrix* subM = submatrix(M,I);\n\n    subM-&gt;matrix_print();\n\n    delete M,subM;\n\n    return 0;\n}\n\nList::List(){L = NULL;}\n\nList::List(int* A, const int l){\n    L = NULL;\n    for(int i=0; i&lt;l; i++){list_add(A[i]);}\n}\n\nList::~List(){\n    for(Node*p; L; delete p){\n        p = L;\n        L = L-&gt;next;\n    }\n}\n\nvoid List::list_add(const int value){\n    if(L){\n        Node* p = L;\n        while(p-&gt;next){p = p-&gt;next;}\n        p-&gt;next = new Node();\n        p-&gt;next-&gt;value = value;\n        p-&gt;next-&gt;next = NULL;\n    }\n    else{\n        L = new Node();\n        L-&gt;value = value;\n        L-&gt;next = NULL;\n    }\n}\n\nint List::list_get_length(){\n    int l = 0;\n    for(Node* p=L; p; p=p-&gt;next){l++;}\n\n    return l;\n}\n\nint* List::list_get(){\n    if(L){\n        const int l = list_get_length();\n        int* A = new int[l];\n        Node* p = L;\n        for(int i=0; i&lt;l; i++){\n            A[i] = p-&gt;value;\n            p = p-&gt;next;\n        }\n        return A;\n    }\n    return NULL;            \n}\n\nint List::list_get_index(const int index){\n    Node* p = L;\n    for(int i=0; p; i++){\n        if(i == index){return p-&gt;value;}\n        else{p = p-&gt;next;}\n    }\n    return 0;\n}\n\nint List::list_get_count(const int value){\n    if(L){\n        int c = 0;\n        for(Node*p=L; p; p=p-&gt;next){c += (p-&gt;value == value);}\n\n        return c;\n    }\n    else{return 0;}\n}\n\nvoid List::list_print(){\n    if(L){\n        for(Node*p=L; p; p=p-&gt;next){cout &lt;&lt; p-&gt;value &lt;&lt; ' ';}\n    }\n}\n\nint Matrix::p_random_int(const int MAX){return (rand() % (1 + MAX));}\n\nint* Matrix::p_random_array(const int l, const int MAX){\n    int* A = new int[l];\n    for(int i=0; i&lt;l; i++){A[i] = p_random_int(MAX);}\n\n    return A;\n}\n\nMatrix::Matrix(){M = NULL;}\n\nMatrix::Matrix(int** M, const int h, const int w){\n    this-&gt;M = NULL;\n    if(h&gt;0 &amp;&amp; w&gt;0){\n        for(int i=0; i&lt;w; i++){matrix_add_col(&amp;M[0][i]);}\n        for(int i=1; i&lt;h; i++){matrix_add_row(M[i]);}\n    }\n}\n\nMatrix::~Matrix(){\n    Node* p;\n    while(M){\n        p = M;\n        M = M-&gt;next;\n        delete p-&gt;value;\n        delete p;\n    }\n}\n\nint Matrix::matrix_get_width(){\n    if(M){\n        if(M-&gt;value){return M-&gt;value-&gt;list_get_length();}\n    }\n    return 0;\n}\n\nint Matrix::matrix_get_height(){\n    int l = 0;\n    for(Node* p=M; p; p=p-&gt;next){l++;}\n\n    return l;\n}\n\nint* Matrix::matrix_get_row(const int index){\n    Node* p = M;\n    for(int i=0; p; i++){\n        if(i == index){return p-&gt;value-&gt;list_get();}\n        else{p = p-&gt;next;}\n    }\n    return NULL;\n}\n\nint* Matrix::matrix_get_col(const int index){\n    if(M){\n        const int l = matrix_get_height();\n        int* A = new int[l];\n        Node* p = M;\n        for(int i=0; i&lt;l; i++){\n            A[i] = p-&gt;value-&gt;list_get_index(index);\n            p = p-&gt;next;\n        }\n        return A;\n    }\n    else{return NULL;}\n}\n\nint Matrix::matrix_get_ele(const int y, const int x){\n    if(M){return matrix_get_row(y)[x];}\n    else{return 0;}\n}\n\nvoid Matrix::matrix_add_col(int* A){\n    if(M){\n        int i = 0;\n        for(Node*p=M; p; p=p-&gt;next){\n            p-&gt;value-&gt;list_add(A[i]);\n        }\n    }\n    else{\n        M = new Node();\n        M-&gt;value = new List(A,1+matrix_get_width());\n        M-&gt;next = NULL;\n    }\n}\n\nvoid Matrix::matrix_add_row(int* A){\n    if(M){\n        Node* p = M;\n        while(p-&gt;next){p = p-&gt;next;}\n        p-&gt;next = new Node();\n        p-&gt;next-&gt;value = new List(A,matrix_get_width());\n        p-&gt;next-&gt;next = NULL;\n    }\n    else{\n        M = new Node();\n        M-&gt;value = new List(A,matrix_get_width());\n        M-&gt;next = NULL;\n    }\n}\n\nvoid Matrix::matrix_fill(const int h, const int w, const int MAX){\n    if(h&gt;0 &amp;&amp; w&gt;0){\n        for(int i=0; i&lt;w; i++){matrix_add_col(p_random_array(1,MAX));}\n        for(int i=1; i&lt;h; i++){matrix_add_row(p_random_array(w,MAX));}\n    }\n}\n\nvoid Matrix::matrix_print(){\n    for(Node*p=M; p; p=p-&gt;next){\n        p-&gt;value-&gt;list_print();\n        cout &lt;&lt; endl;\n    }\n}\n\nint str_to_int(const string s){\n    int len = 0;\n    while(s[len] != '\\0'){len++;}\n    char *res = new char[len];\n    for(int i=0; i&lt;len; i++){res[i] = s[i];}\n\n    return stoi(res);\n}\n\nint** matrix_read_from_file(string fName, const int h, const int w){\n    fstream fIn;\n    fIn.open(fName, ios::in);\n\n    string wIn;\n    int** res = new int*[h];\n    for(int i=0; i&lt;h; i++){\n        res[i] = new int[w];\n        for(int j=0; j&lt;w; j++){\n            fIn &gt;&gt; wIn;\n            res[i][j] = str_to_int(wIn);\n        }\n    }\n    return res;\n}\n\nint* input_read_from_file(string fName){\n    fstream fIn;\n    fIn.open(fName, ios::in);\n\n    string wIn;\n    int* res = new int[4];\n    for(int i=0; i&lt;4; i++){\n        fIn &gt;&gt; wIn;\n        res[i] = str_to_int(wIn);\n    }\n    return res;\n}\n\nMatrix* submatrix(Matrix* M, int* I){\n    if(I[2]&gt;0 &amp;&amp; I[3]&gt;0){\n        int mh=M-&gt;matrix_get_height(), mw=M-&gt;matrix_get_width(),\n            h, w,\n            py=0, px=0,\n            **res;\n        res = new int*[I[2]];\n        h = I[2];\n        for(int i=0; i&lt;I[2]; i++){\n            res[i] = new int[I[3]];\n            py = I[0] + i;\n            if(py&gt;=0 &amp;&amp; py&lt;mh){\n                w = I[3];\n                for(int j=0; j&lt;I[3]; j++){\n                    px = I[1] + j;\n                    if(px&gt;=0 &amp;&amp; px&lt;mw){res[i-(I[2]-h)][j-(I[3]-w)] = M-&gt;matrix_get_ele(py,px);}\n                    else{w--;}\n                }\n            }\n            else{h--;}\n        }\n        return (new Matrix(res,h,w));\n    }\n    else{return NULL;}\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/WorkLists-eg1.txt/","title":"WorkLists eg1","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/WorkLists-eg1.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    32 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 45 LAB Exercises on additional Past exams\n    \u2514\u2500\u2500 WorkLists eg1.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/WorkLists-eg1.txt/#preview","title":"Preview","text":"<pre><code>12 76 47 23 36 67 16 52 15 14 84\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/WorkLists-eg2.txt/","title":"WorkLists eg2","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/WorkLists-eg2.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    86 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 45 LAB Exercises on additional Past exams\n    \u2514\u2500\u2500 WorkLists eg2.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/WorkLists-eg2.txt/#preview","title":"Preview","text":"<pre><code>84 67 23 76 52 16 67 23 47 12 15 16 67 23 15 16 47 76 12 67 36 23 12 15 52 16 67 36 76\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/WorkLists-eg3.txt/","title":"WorkLists eg3","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/WorkLists-eg3.txt/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    txt</li> <li>Size:    92 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 45 LAB Exercises on additional Past exams\n    \u2514\u2500\u2500 WorkLists eg3.txt\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/WorkLists-eg3.txt/#preview","title":"Preview","text":"<pre><code>84 52 23 14 47 12 84 15 16 47 76 12 52 16 67 36 47 76 12 84 52 36 23 47 76 12 15 16 67 23 76\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/WorkLists.cpp/","title":"WorkLists","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/WorkLists.cpp/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cpp</li> <li>Size:    3 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 45 LAB Exercises on additional Past exams\n    \u2514\u2500\u2500 WorkLists.cpp\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/WorkLists.cpp/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;fstream&gt;\n\nclass List{\n    private:\n        struct Node{\n            int value;\n            Node* next;\n        }* L;\n    public:\n        List();\n        void list_add(const int);\n        int list_get_length();\n        int* list_get();\n        int list_get_count(const int);\n        void list_print();\n};\n\nclass WAMS{\n    private:\n        List *list_employee, *list_stamp_enter, *list_stamp_exit;\n    public:\n        WAMS(List*,List*,List*);\n        List* WAMS_get_warninglist();\n};\n\nint str_to_int(const string);\n\nList* read_from_file(string);\n\nint main(){\n    List *L1 = read_from_file(\"WorkLists-eg1.txt\"),\n         *L2 = read_from_file(\"WorkLists-eg2.txt\"),\n         *L3 = read_from_file(\"WorkLists-eg3.txt\");\n    WAMS* W = new WAMS(L1,L2,L3);\n\n    cout &lt;&lt; \"List of employees:    \"; L1-&gt;list_print(); cout &lt;&lt; endl;\n    cout &lt;&lt; \"List of enter stamps: \"; L2-&gt;list_print(); cout &lt;&lt; endl;\n    cout &lt;&lt; \"List of exit stamps:  \"; L3-&gt;list_print(); cout &lt;&lt; endl;\n\n    List* WL = W-&gt;WAMS_get_warninglist();\n\n    cout &lt;&lt; \"Warning list:         \"; WL-&gt;list_print(); cout &lt;&lt; endl;\n\n    return 0;\n}\n\nList::List(){L = NULL;}\n\nvoid List::list_add(const int value){\n    if(L){\n        Node* p = L;\n        while(p-&gt;next){p = p-&gt;next;}\n        p-&gt;next = new Node();\n        p-&gt;next-&gt;value = value;\n        p-&gt;next-&gt;next = NULL;\n    }\n    else{\n        L = new Node();\n        L-&gt;value = value;\n        L-&gt;next = NULL;\n    }\n}\n\nint List::list_get_length(){\n    int l = 0;\n    for(Node* p=L; p; p=p-&gt;next){l++;}\n\n    return l;\n}\n\nint* List::list_get(){\n    const int l = list_get_length();\n    int* A = new int[l];\n    Node* p = L;\n    for(int i=0; i&lt;l; i++){\n        A[i] = p-&gt;value;\n        p = p-&gt;next;\n    }\n    return A;\n}\n\nint List::list_get_count(const int value){\n    if(L){\n        int c = 0;\n        for(Node*p=L; p; p=p-&gt;next){c += (p-&gt;value == value);}\n\n        return c;\n    }\n    else{return 0;}\n}\n\nvoid List::list_print(){\n    if(L){\n        for(Node*p=L; p; p=p-&gt;next){cout &lt;&lt; p-&gt;value &lt;&lt; ' ';}\n    }\n}\n\nWAMS::WAMS(List* list_employee, List* list_stamp_enter, List* list_stamp_exit){\n    this-&gt;list_employee = list_employee;\n    this-&gt;list_stamp_enter = list_stamp_enter;\n    this-&gt;list_stamp_exit = list_stamp_exit;\n}\n\nList* WAMS::WAMS_get_warninglist(){\n    int l = list_employee-&gt;list_get_length(), *A = list_employee-&gt;list_get();\n    List *W = new List();\n    for(int i=0; i&lt;l; i++){\n        if(list_stamp_enter-&gt;list_get_count(A[i])\n            - list_stamp_exit-&gt;list_get_count(A[i])){W-&gt;list_add(A[i]);}\n    }\n    return W;\n}\n\nint str_to_int(const string s){\n    int len = 0;\n    while(s[len] != '\\0'){len++;}\n    char *res = new char[len];\n    for(int i=0; i&lt;len; i++){res[i] = s[i];}\n\n    return stoi(res);\n}\n\nList* read_from_file(string fName){\n    fstream fIn;\n    fIn.open(fName, ios::in);\n\n    string wIn;\n    List* res = new List();\n    while(!fIn.eof()){\n        fIn &gt;&gt; wIn;\n        res-&gt;list_add(str_to_int(wIn));\n    }\n    return res;\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/queue_c_list.cc/","title":"queue c list","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/queue_c_list.cc/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    cc</li> <li>Size:    960 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 45 LAB Exercises on additional Past exams\n    \u2514\u2500\u2500 queue c list.cc\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/queue_c_list.cc/#preview","title":"Preview","text":"<pre><code>using namespace std;\n#include \"queue_c_list.h\"\n\nint Queue::p_get_length(char* C){\n    int len = 0;\n    while(C[len] != '\\0'){len++;}\n\n    return len;\n}\n\nQueue::Queue(){Q = NULL;}\n\nQueue::~Queue(){\n    Node* p;\n    while(Q){\n        p = Q;\n        Q = Q-&gt;next;\n        delete p;\n    }\n}\n\nvoid Queue::queue_push(char* input){\n    int len = p_get_length(input);\n    char* t = new char[len];\n    strcpy(t,input);\n\n    if(Q){\n        Node* p = Q;\n        while(p-&gt;next){p = p-&gt;next;}\n        p-&gt;next = new Node();\n        p-&gt;next-&gt;name = t;\n        p-&gt;next-&gt;next = NULL;\n    }\n    else{\n        Q = new Node();\n        Q-&gt;name = t;\n        Q-&gt;next = NULL;\n    }\n}\n\nchar* Queue::queue_pop(){\n    if(Q){\n        Node* p = Q;\n\n        Q = Q-&gt;next;\n\n        char* t = p-&gt;name;\n        delete p;\n\n        return t;\n    }\n    else{return NULL;}\n}\n\nvoid Queue::queue_print(){\n    if(Q){\n        for(Node*p=Q; p; p=p-&gt;next){cout &lt;&lt; \"- \" &lt;&lt; p-&gt;name &lt;&lt; endl;}\n    }\n}\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/queue_c_list.h/","title":"queue c list","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/queue_c_list.h/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    h</li> <li>Size:    359 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 Lecture 45 LAB Exercises on additional Past exams\n    \u2514\u2500\u2500 queue c list.h\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/Lecture_45_LAB_Exercises_on_additional_Past_exams/queue_c_list.h/#preview","title":"Preview","text":"<pre><code>#ifndef QUEUE_H\n#define QUEUE_H\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n\nclass Queue{\n    private:\n        struct Node{\n            char* name;\n            Node* next;\n        }* Q;\n\n        int p_get_length(char*);\n    public:\n        Queue();\n        ~Queue();\n        void queue_push(char*);\n        char* queue_pop();\n        void queue_print();\n};\n\n#endif\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/README.md/","title":"README","text":"<p>\u2190 Back</p>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/README.md/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    md</li> <li>Size:    3 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computer Programming 1\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/README.md/#more-info","title":"More Info","text":""},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/README.md/#moodle-link","title":"Moodle Link","text":"<ul> <li>[146140] Computer Programming 1 - MARCHETTO</li> </ul>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/README.md/#textbook","title":"Textbook","text":"<ul> <li>Schaum's Outline of Programming with C++ - John R. Hubbard - Second Edition</li> <li>Programming: Principle and Practice Using C++ - Bjarne Stroustrup - Second Edition</li> <li>The C++ Programming Language - Bjarne Stroustrup - Fourth Edition</li> <li>C++: The Complete Reference - Herbert Schildt - Fourth Edition</li> </ul>"},{"location":"courses/146140_39259_MARCHETTO_Computer_Programming_1/README.md/#about","title":"About","text":"<ul> <li>The Von Neumann Architecture<ul> <li>Lecture 1_xx \u2013 Computers - Adolfo Villafiorita - Universit\u00e0 di Trento</li> </ul> </li> <li>Why Binary Representations<ul> <li>Introduction to \u201cThe First Draft Report on the EDVAC\u201d - John von Neumann - University of Pennsylvania</li> </ul> </li> <li>Types of error<ul> <li>Error Messages and Debugging in C++</li> </ul> </li> <li>C++ Compact Reference<ul> <li>C++ Compact Reference - C++ Team</li> </ul> </li> <li>C++<ul> <li>C++ Programming Language</li> <li>C++ reference</li> <li>cplusplus</li> </ul> </li> <li>compiler from browser<ul> <li>C++ Shell</li> <li>Replit</li> </ul> </li> <li>Linux Filesystem<ul> <li>An introduction to Linux filesystems</li> <li>Classic SysAdmin: The Linux Filesystem Explained</li> <li>File systems</li> </ul> </li> <li>Linux (basic) commands<ul> <li>Bash Shell Reference</li> <li>An A-Z Index of the Linux command line: bash + utilities.</li> <li>Bash Guide for Beginners</li> </ul> </li> <li>common errors<ul> <li>All of Programming</li> <li>7 Common Errors in C Programming and C++ Programming</li> <li>Error Messages and Debugging in C++</li> </ul> </li> <li>Derived types<ul> <li>Derived Data Types in C++</li> <li>User Defined Data Types in C++</li> </ul> </li> <li>ASCII table<ul> <li>ASCII Table</li> </ul> </li> <li>Recursive function<ul> <li>C++ Recursion</li> </ul> </li> </ul>"},{"location":"courses/146141_40310_WIYGUL_Calculus_2/","title":"Calculus 2","text":"<p>\u2190 Back</p>"},{"location":"courses/146141_40310_WIYGUL_Calculus_2/#basic-info","title":"Basic Info","text":"<ul> <li>Course ID: 146141</li> <li>Professor: Wiygul</li> <li> <p>Moodle</p> </li> <li> <p>Download</p> </li> </ul> Name Type Item Size README md / 302 B"},{"location":"courses/146141_40310_WIYGUL_Calculus_2/#more-info","title":"More Info","text":""},{"location":"courses/146141_40310_WIYGUL_Calculus_2/#moodle-link","title":"Moodle Link","text":"<ul> <li>[146141] Calculus 2 - SORESINA/WIYGUL</li> </ul>"},{"location":"courses/146141_40310_WIYGUL_Calculus_2/#textbook","title":"Textbook","text":"<ul> <li>Mathematical Analysis II - Claudio Canuto, Anita Tabacco - Second Edition - Politecnico di Torino</li> </ul>"},{"location":"courses/146141_40310_WIYGUL_Calculus_2/README.md/","title":"README","text":"<p>\u2190 Back</p>"},{"location":"courses/146141_40310_WIYGUL_Calculus_2/README.md/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    md</li> <li>Size:    302 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Calculus 2\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"courses/146141_40310_WIYGUL_Calculus_2/README.md/#more-info","title":"More Info","text":""},{"location":"courses/146141_40310_WIYGUL_Calculus_2/README.md/#moodle-link","title":"Moodle Link","text":"<ul> <li>[146141] Calculus 2 - SORESINA/WIYGUL</li> </ul>"},{"location":"courses/146141_40310_WIYGUL_Calculus_2/README.md/#textbook","title":"Textbook","text":"<ul> <li>Mathematical Analysis II - Claudio Canuto, Anita Tabacco - Second Edition - Politecnico di Torino</li> </ul>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/","title":"Functional Programming","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/#basic-info","title":"Basic Info","text":"<ul> <li>Course ID: 146168</li> <li>Professor: Kuper</li> <li> <p>Moodle</p> </li> <li> <p>Download</p> </li> </ul> Name Type Item Size Lab ML / 11 items 40 KiB README md / 1 KiB"},{"location":"courses/146168_40605_KUPER_Functional_Programming/#more-info","title":"More Info","text":""},{"location":"courses/146168_40605_KUPER_Functional_Programming/#moodle-link","title":"Moodle Link","text":"<ul> <li>[146168] Functional Programming - KUPER</li> </ul>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/#textbook","title":"Textbook","text":"<ul> <li>Programming Languages: Principles and Paradigms - Maurizio Gabbrielli, Simone Martini - Universit\u00e0 di Bologna</li> <li>Elements of ML Programming - Jeffrey D. Ullman - Second Edition - Leland Stanford Junior University</li> <li>Programming Languages: Principles and Practice - Kenneth C. Louden, Kenneth A. Lambert - Third Edition</li> <li>Programming Language Pragmatics - Michael L. Scott - Fourth Edition - University of Rochester</li> <li>ML for the Working Programmer - L. C. Paulson - Second Edition - University of Cambridge</li> <li>Functional programming: practice and theory - Bruce J. MacLennan - University of Tennessee, Knoxville</li> </ul>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/#about","title":"About","text":"<ul> <li>Poly/ML Basis<ul> <li>Poly/ML Basis Library</li> </ul> </li> </ul>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/","title":"Lab ML","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 11 items</li> <li>Size:  40 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n</code></pre> Name Type Item Size 0\u200b228 / 10 items 7 KiB 0\u200b307 / 19 items 5 KiB 0\u200b314 / 13 items 4 KiB 0\u200b321 / 7 items 2 KiB 0\u200b328 / 9 items 4 KiB 0\u200b404 / 13 items 8 KiB 0\u200b411 / 5 items 1 KiB 0\u200b429 / 7 items 2 KiB 0\u200b506 / 2 items 932 B 0\u200b509 / 1 item 3 KiB README md / 2 KiB"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/#more-info","title":"More Info","text":""},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/#content","title":"CONTENT","text":""},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/#feb-28","title":"Feb 28","text":"<ul> <li>Exercise 1<ul> <li>ML</li> <li>Running ML</li> <li>Expressions</li> <li>Constants</li> <li>Arithmetic operators</li> <li>String operators</li> <li>Comparisons</li> <li>Logical operations</li> <li>If-then-else</li> </ul> </li> <li>Exercise 2<ul> <li>Type errors</li> <li>Tuples</li> <li>Coercion</li> <li>Real to integer</li> <li>Conversion between characters and integers</li> </ul> </li> <li>Exercise 3<ul> <li>Variables</li> </ul> </li> <li>Exercise 4<ul> <li>Tuples</li> <li>Accessing components of tuple</li> <li>Lists</li> <li>Head of a list</li> <li>Tail of a list</li> <li>Concatenation of lists</li> <li>Combining lists</li> <li>Strings to lists</li> <li>Lists to strings</li> <li>The ML type system: Introduction</li> </ul> </li> </ul>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/#mar-07","title":"Mar 07","text":"<ul> <li>Exercise 1<ul> <li>Functions</li> <li>The ML type system</li> <li>Specifying types</li> <li>Multiple arguments</li> <li>Tuples</li> <li>Referencing external values</li> </ul> </li> <li>Exercise 2<ul> <li>Recursion</li> <li>Reversing a list</li> <li>Nonlinear recursion</li> <li>Combinations</li> <li>Mutual recursion</li> <li>First attempt</li> <li>Type inference</li> </ul> </li> </ul>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/#mar-14","title":"Mar 14","text":"<ul> <li>Exercise 1<ul> <li>Function definition: Petterns</li> <li>as: Match pattern and assign variables</li> <li>Anonymous variables</li> <li>Patterns</li> <li>Multiple uses of variables</li> <li>Patterns that are not allowed</li> <li>No redundant patterns</li> </ul> </li> </ul>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/#mar-21","title":"Mar 21","text":"<ul> <li>Exercise 1<ul> <li>Local environments using let</li> <li>Decomposing the result of a function</li> <li>Splitting lists</li> </ul> </li> </ul>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/#mar-28","title":"Mar 28","text":"<ul> <li>Exercise 1<ul> <li>Input and Output</li> <li>Printing</li> <li>Printing non-strings</li> <li>Other conversions</li> </ul> </li> <li>Exercise 2<ul> <li>Input</li> <li>Instreams</li> <li>Reading lines of a file</li> <li>Reading complete files</li> <li>Read a single character</li> <li>Lookahead</li> <li>Are there n characters left?</li> </ul> </li> <li>Exercise 3<ul> <li>Exceptions</li> <li>User-defined exceptions</li> <li>Exceptions with parameters</li> <li>Handling exceptions</li> </ul> </li> </ul>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/#apr-4","title":"Apr 4","text":"<ul> <li>Exercise 1<ul> <li>Polymorphic functions</li> <li>More on polymorphic functions</li> <li>Equality types</li> <li>Reversing lists</li> <li>Testing for empty list</li> </ul> </li> <li>Exercise 2<ul> <li>Higher-order functions</li> <li>Integration</li> <li>Some higher-order functions</li> <li>Map</li> <li>reduce</li> <li>Definition of reduce</li> <li>Using reduce to compute variance</li> <li>Infix operators</li> <li>Filter</li> </ul> </li> </ul>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0228/","title":"0\u200b228","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0228/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 10 items</li> <li>Size:  7 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b228\n</code></pre> Name Type Item Size ex1 1 sml / 430 B ex1 2 sml / 2 KiB ex1 3 sml / 124 B ex2 1 sml / 529 B ex2 2 sml / 619 B ex3 sml / 245 B ex4 1 sml / 357 B ex4 2 sml / 2 KiB ex4 3 sml / 407 B ex4 4 sml / 472 B"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0228/ex1-1.sml/","title":"ex1 1","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0228/ex1-1.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    430 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b228\n        \u2514\u2500\u2500 ex1 1.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0228/ex1-1.sml/#preview","title":"Preview","text":"<pre><code>(* What is the response of ML to the following (without using ML. . . )? *)\n\n1+2*3;\n(* val it = 7: int *)\n\n5.0-4.2/1.4;\n(* val it = 2.0: real *)\n\n11 div 2 mod 3;\n(* val it = 2: int *)\n\n\"foo\" ^ \"bar\" ^ \"\";\n(* val it = \"foobar\": string *)\n\n3&gt;4 orelse 5&lt;6 andalso not (7&lt;&gt;8);\n(* val it = false: bool *)\n\nif 6&lt;10 then 6.0 else 10.6;\n(* val it = 6.0: real *)\n\n0xab + 123;\n(* val it = 294: int *)\n\n0xab &lt; 123;\n(* val it = false: bool *)\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0228/ex1-2.sml/","title":"ex1 2","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0228/ex1-2.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b228\n        \u2514\u2500\u2500 ex1 2.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0228/ex1-2.sml/#preview","title":"Preview","text":"<pre><code>(* What are the errors in the following expressions? *)\n\n8/4;\n(*\nerror: Type error in function application.\n   Function: / : real * real -&gt; real\n   Argument: (8, 4) : int * int\n   Reason: Can't unify real to int (Incompatible overloadings)\nFound near 8 / 4\nStatic Errors\n*)\n\nif 2&lt;3 then 4;\n(*\nerror: else expected but ; was found\nerror: Expression expected but ; was found\nStatic Errors\n*)\n\n1&lt;2 and 5&gt;3;\n(*\nerror: ; expected but and was found\nStatic Errors\n*)\n\n6+7 DIV 2;\n(*\nerror: Type error in function application.\n   Function: 7 : int\n   Argument: DIV : bad\n   Reason: Value being applied does not have a function type\nFound near 6 + 7 DIV 2\nStatic Errors\n*)\n\n4. + 3.5;\n(*\nerror: malformed real number: 4.\nStatic Errors\n*)\n\n1.0&lt;2.0 or 3&gt;4;\n(*\nerror: Type error in function application.\n   Function: 2.0 : real\n   Argument: or : bad\n   Reason: Value being applied does not have a function type\nFound near 1.0 &lt; 2.0 or 3 &gt; 4\nerror: Type error in function application.\n   Function: &gt; : 'a * 'a -&gt; bool\n   Argument: (1.0 &lt; 2.0 or 3, 4) : bool * 'a\n   Reason:\n      Can't unify int (*In Basis*) with bool (*In Basis*)\n         (Different type constructors)\nFound near 1.0 &lt; 2.0 or 3 &gt; 4\nStatic Errors\n*)\n\n#\"a\" ^ #\"b\";\n(*\nerror: Type error in function application.\n   Function: ^ : string * string -&gt; string\n   Argument: (#\"a\", #\"b\") : char * char\n   Reason:\n      Can't unify string (*In Basis*) with char (*In Basis*)\n         (Different type constructors)\nFound near #\"a\" ^ #\"b\"\nStatic Errors\n*)\n\n123.;\n(*\nerror: malformed real number: 123.;\nStatic Errors\n*)\n\n1.0 = 2.0;\n(*\nerror: Type error in function application.\n   Function: = : ''a * ''a -&gt; bool\n   Argument: (1.0, 2.0) : ''a * ''b\n   Reason: Can't unify ''a to ''a (Requires equality type)\nFound near 1.0 = 2.0\nStatic Errors\n*)\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0228/ex1-3.sml/","title":"ex1 3","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0228/ex1-3.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    124 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b228\n        \u2514\u2500\u2500 ex1 3.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0228/ex1-3.sml/#preview","title":"Preview","text":"<pre><code>(* Express E orlse F and E andalso F using if-then-else statements *)\n\n(*\nif E then true else F;\n\nif E then F else false;\n*)\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0228/ex2-1.sml/","title":"ex2 1","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0228/ex2-1.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    529 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b228\n        \u2514\u2500\u2500 ex2 1.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0228/ex2-1.sml/#preview","title":"Preview","text":"<pre><code>(*\n    Write expressions to\n\n    \u2022 Convert 123.45 to the next lower integer\n    \u2022 Convert -123.45 to the next lower integer\n\n    \u2022 Convert 123.45 to the next higher integer\n    \u2022 Convert -123.45 to the next higher integer\n\n    \u2022 Convert #\"Y\" to an integer\n    \u2022 Convert 120 to a character\n\n    \u2022 Convert #\"N\" to an real\n    \u2022 Convert 97.0 to a character\n    \u2022 Convert #\"Z\" to an string\n*)\n\nfloor 123.45;\nfloor ~123.45;\n\nceil 123.45;\nceil ~123.45;\n\nord #\"Y\";\nchr 120;\n\nreal (ord #\"N\");\nchr (ceil 97.0);\nstr #\"Z\";\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0228/ex2-2.sml/","title":"ex2 2","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0228/ex2-2.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    619 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b228\n        \u2514\u2500\u2500 ex2 2.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0228/ex2-2.sml/#preview","title":"Preview","text":"<pre><code>(* What are the type errors in the following expressions, and how can we fix them? *)\n\nceil 4;\n(*\nerror: Type error in function application.\n   Function: ceil : real -&gt; int\n   Argument: 4 : int\n   Reason:\n      Can't unify int (*In Basis*) with real (*In Basis*)\n         (Different type constructors)\nFound near ceil 4\nStatic Errors\n*)\n\nif true then 5+6 else 7.0;\n(*\nerror: Type mismatch between then-part and else-part.\n   Then: 5 + 6 : int\n   Else: 7.0 : real\n   Reason: Can't unify int to real (Incompatible overloadings)\nFound near if true then 5 + 6 else 7.0\nStatic Errors\n*)\n\nchr 256;\n(* Exception- Chr raised *)\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0228/ex3.sml/","title":"ex3","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0228/ex3.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    245 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b228\n        \u2514\u2500\u2500 ex3.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0228/ex3.sml/#preview","title":"Preview","text":"<pre><code>(* What does the environment contain after these command? *)\n\nval a = 3;\n(* val a = 3: int *)\n\nval b = 98.6;\n(* val b = 98.6: real *)\n\nval a = \"three\";\n(* val a = \"three\": string *)\n\nval c = a ^ str(chr(floor(b)));\n(* val c = \"threeb\": string *)\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0228/ex4-1.sml/","title":"ex4 1","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0228/ex4-1.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    357 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b228\n        \u2514\u2500\u2500 ex4 1.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0228/ex4-1.sml/#preview","title":"Preview","text":"<pre><code>(* What are the values of the following expressions? *)\n\n#2 (3,4,5);\n(* val it = 4: int *)\n\nhd [3,4,5];\n(* val it = 3: int *)\n\ntl [3,4,5];\n(* val it = [4, 5]: int list *)\n\nexplode (\"foo\");\n(* val it = [#\"f\", #\"o\", #\"o\"]: char list *)\n\nimplode ([#\"f\", #\"o\", #\"o\"]);\n(* val it = \"foo\": string *)\n\n\"c\" :: [\"a\", \"t\"];\n(* val it = [\"c\", \"a\", \"t\"]: string list *)\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0228/ex4-2.sml/","title":"ex4 2","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0228/ex4-2.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b228\n        \u2514\u2500\u2500 ex4 2.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0228/ex4-2.sml/#preview","title":"Preview","text":"<pre><code>(* What is wrong with the following expressions? When possible, correct them *)\n\n#4 (3,4,5);\n(*\nerror: Type error in function application.\n   Function: #4 : 'a * 'b * 'c * 'd -&gt; 'd\n   Argument: (3, 4, 5) : int * int * int\n   Reason: Can't unify {4: 'a} to int * int * int (Field 4 missing)\nFound near #4 (3, 4, 5)\nException- Fail \"Static Errors\" raised\n*)\n\nhd([]);\n(*\nwarning: The type of (it) contains a free type variable. Setting it to a unique\n   monotype.\nException- Empty raised\n*)\n\n#1 (1);\n(*\nerror: Type error in function application.\n   Function: #1 : {1: 'a, ...} -&gt; 'a\n   Argument: (1) : int\n   Reason: Can't unify {1: 'a, ...} to int (Incompatible types)\nFound near #1 (1)\nStatic Errors\n*)\n\nexplode [\"bar\"];\n(*\nerror: Type error in function application.\n   Function: explode : string -&gt; char list\n   Argument: [\"bar\"] : string list\n   Reason:\n      Can't unify string (*In Basis*) with string list (*In Basis*)\n         (Different type constructors)\nFound near explode [\"bar\"]\nStatic Errors\n*)\n\nimplode ( #\"a\", #\"b\");\n(*\nerror: Type error in function application.\n   Function: implode : char list -&gt; string\n   Argument: (#\"a\", #\"b\") : char * char\n   Reason: Can't unify char list to char * char (Incompatible types)\nFound near implode (#\"a\", #\"b\")\nStatic Errors\n*)\n\n[\"r\"]::[\"a\",\"t\"];\n(*\nerror: Type error in function application.\n   Function: :: : string list * string list list -&gt; string list list\n   Argument: ([\"r\"], [\"a\", \"t\"]) : string list * string list\n   Reason:\n      Can't unify string list (*In Basis*) with string (*In Basis*)\n         (Different type constructors)\nFound near [\"r\"] :: [\"a\", \"t\"]\nStatic Errors\n*)\n\ntl [];\n(*\nwarning: The type of (it) contains a free type variable. Setting it to a unique\n   monotype.\nException- Empty raised\n*)\n\n1 @ 2;\n(*\nerror: Type error in function application.\n   Function: @ : 'a list * 'a list -&gt; 'a list\n   Argument: (1, 2) : int * int\n   Reason:\n      Can't unify int (*In Basis*) with 'a list (*In Basis*)\n         (Different type constructors)\nFound near 1 @ 2\nStatic Errors\n*)\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0228/ex4-3.sml/","title":"ex4 3","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0228/ex4-3.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    407 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b228\n        \u2514\u2500\u2500 ex4 3.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0228/ex4-3.sml/#preview","title":"Preview","text":"<pre><code>(* What are the types of the following expressions? *)\n\n(1.5, (\"3\",[4,5]));\n(* val it = (1.5, (\"3\", [4, 5])): real * (string * int list) *)\n\n[[1,2],nil,[3]];\n(* val it = [[1, 2], [], [3]]: int list list *)\n\n[ (2,3.5), (4,5.5), (6,7.5)];\n(* val it = [(2, 3.5), (4, 5.5), (6, 7.5)]: (int * real) list *)\n\n([#\"a\", #\"b\"], [nil,[1,2,3]]);\n(* val it = ([#\"a\", #\"b\"], [[], [1, 2, 3]]): char list * int list list *)\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0228/ex4-4.sml/","title":"ex4 4","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0228/ex4-4.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    472 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b228\n        \u2514\u2500\u2500 ex4 4.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0228/ex4-4.sml/#preview","title":"Preview","text":"<pre><code>(*\nGive examples of objects of the following types, without using empty lists\n\n    int list list list\n\n    (int * char) list\n\n    string list * ( int * (real * string) * int )\n\n    ((int * int) * (bool list) * real) * (real * string)\n\n    (bool * int) * char\n\n    real * int list list list list\n*)\n\n[[[1,2]],[[3,4]]];\n\n[(1,#\"a\"), (2,#\"b\")];\n\n([\"ab\",\"cd\"], (4,(2.5,\"ef\")), 7);\n\n(((5,6), [true, false], 5.6), (6.7, \"abc\"));\n\n((true, 7), #\"a\");\n\n(7.8, [[[[1,2],[3,4]]]]);\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/","title":"0\u200b307","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 19 items</li> <li>Size:  5 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b307\n</code></pre> Name Type Item Size ex1 01 sml / 91 B ex1 02 sml / 229 B ex1 03 sml / 125 B ex1 04 sml / 84 B ex1 05 sml / 169 B ex1 06 sml / 147 B ex1 07 sml / 413 B ex1 08 sml / 715 B ex1 09 sml / 91 B ex1 10 sml / 129 B ex1 11 sml / 451 B ex2 1 sml / 201 B ex2 2 sml / 251 B ex2 3 sml / 262 B ex2 4 sml / 105 B ex2 5 sml / 178 B ex2 6 sml / 286 B ex2 7 sml / 334 B ex2 8 sml / 1 KiB"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex1-01.sml/","title":"ex1 01","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex1-01.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    91 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b307\n        \u2514\u2500\u2500 ex1 01.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex1-01.sml/#preview","title":"Preview","text":"<pre><code>(* Write a function to compute the cube of a real number *)\n\nfun cube (x:real) = x * x * x;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex1-02.sml/","title":"ex1 02","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex1-02.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    229 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b307\n        \u2514\u2500\u2500 ex1 02.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex1-02.sml/#preview","title":"Preview","text":"<pre><code>(* Write a function to compute the smallest component of a tuple of type int*int*int *)\n\nfun min3 (a,b,c) =\n    if a&lt;b \n    then\n        if a&lt;c\n        then a\n        else c\n    else\n        if c&lt;b\n        then c\n        else b\n;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex1-03.sml/","title":"ex1 03","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex1-03.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    125 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b307\n        \u2514\u2500\u2500 ex1 03.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex1-03.sml/#preview","title":"Preview","text":"<pre><code>(* Find the third element of a list (it doesn\u2019t have to work properly on shorter lists) *)\n\nfun third (l) = hd (tl(tl(l)));\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex1-04.sml/","title":"ex1 04","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex1-04.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    84 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b307\n        \u2514\u2500\u2500 ex1 04.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex1-04.sml/#preview","title":"Preview","text":"<pre><code>(* Write a function to reverse a tuple of length 3 *)\n\nfun reverse(a,b,c) = (c,b,a);\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex1-05.sml/","title":"ex1 05","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex1-05.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    169 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b307\n        \u2514\u2500\u2500 ex1 05.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex1-05.sml/#preview","title":"Preview","text":"<pre><code>(* Find the third character of a string (it doesn\u2019t have to work properly on shorter strings) *)\n\nfun third (l) = hd (tl(tl(l)));\n\nfun thirdchar(s) = third(explode s);\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex1-06.sml/","title":"ex1 06","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex1-06.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    147 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b307\n        \u2514\u2500\u2500 ex1 06.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex1-06.sml/#preview","title":"Preview","text":"<pre><code>(* Cycle a list once, i.e., convert [a1,...,an] to [a2,...,an,a1]. It doesn\u2019t have to work on the empty list *)\n\nfun cycle (l) = tl(l) @ [hd(l)];\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex1-07.sml/","title":"ex1 07","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex1-07.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    413 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b307\n        \u2514\u2500\u2500 ex1 07.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex1-07.sml/#preview","title":"Preview","text":"<pre><code>(* Given 3 integers, produce a pair consisting of the smallest and the largest *)\n\nfun min3 (a,b,c) =\n    if a&lt;b \n    then\n        if a&lt;c\n        then a\n        else c\n    else\n        if c&lt;b\n        then c\n        else b\n;\n\nfun max3 (a,b,c) =\n    if a&gt;b \n    then\n        if a&gt;c\n        then a\n        else c\n    else\n        if c&gt;b\n        then c\n        else b\n;\n\nfun query (a,b,c) = (min3(a,b,c),max3(a,b,c));\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex1-08.sml/","title":"ex1 08","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex1-08.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    715 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b307\n        \u2514\u2500\u2500 ex1 08.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex1-08.sml/#preview","title":"Preview","text":"<pre><code>(* Given three integers, produce a list of them in sorted order *)\n\nfun min3 (a,b,c) =\n    if a&lt;b \n    then\n        if a&lt;c\n        then a\n        else c\n    else\n        if c&lt;b\n        then c\n        else b\n;\n\nfun max3 (a,b,c) =\n    if a&gt;b \n    then\n        if a&gt;c\n        then a\n        else c\n    else\n        if c&gt;b\n        then c\n        else b\n;\n\nfun sort (a,b,c) = \n    [min3(a,b,c)] @\n    [\n        if a&lt;b\n        then \n            if b&lt;c\n            then b\n            else\n                if a&lt;c\n                then c\n                else a\n        else\n            if c&lt;b\n            then b\n            else\n                if a&lt;c\n                then a\n                else c\n    ] @\n    [max3(a,b,c)]\n;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex1-09.sml/","title":"ex1 09","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex1-09.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    91 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b307\n        \u2514\u2500\u2500 ex1 09.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex1-09.sml/#preview","title":"Preview","text":"<pre><code>(* Round a real number to the nearest 10th. *)\n\nfun rnd (r) = real (round(r *10.0)) / 10.0;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex1-10.sml/","title":"ex1 10","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex1-10.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    129 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b307\n        \u2514\u2500\u2500 ex1 10.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex1-10.sml/#preview","title":"Preview","text":"<pre><code>(* Given a list, remove the second element. It doesn\u2019t need to work on lists shorter than 2 *)\n\nfun rem l = hd(l) :: tl(tl(l));\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex1-11.sml/","title":"ex1 11","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex1-11.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    451 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b307\n        \u2514\u2500\u2500 ex1 11.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex1-11.sml/#preview","title":"Preview","text":"<pre><code>(*\n\u2022 After the following definitions\n    val a=2;\n    fun f(b)=a*b;\n    val b=3;\n    fun g(a) = a+b;\n\u2022 What does the following produce do\n    f(4);\n    f(4)+b;\n    g(5);\n    g(5)+a;\n    f(g(6));\n    g(f(7));\n*)\n\nval a=2;\nfun f(b)=a*b;\nval b=3;\nfun g(a) = a+b;\n\nf(4);\n(* val it = 8: int *)\n\nf(4)+b;\n(* val it = 11: int *)\n\ng(5);\n(* val it = 8: int *)\n\ng(5)+a;\n(* val it = 10: int *)\n\nf(g(6));\n(* val it = 18: int *)\n\ng(f(7));\n(* val it = 17: int *)\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex2-1.sml/","title":"ex2 1","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex2-1.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    201 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b307\n        \u2514\u2500\u2500 ex2 1.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex2-1.sml/#preview","title":"Preview","text":"<pre><code>(*\nWrite a function that computes the factorial of n,\n    n! = 1 \u00b7 2 \u00b7 \u00b7 \u00b7 n\nwhere n \u2265 1. It need not work correctly for smaller n\n*)\n\nfun fact(n) =\n    if n=1\n    then 1\n    else n * fact(n-1)\n;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex2-2.sml/","title":"ex2 2","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex2-2.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    251 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b307\n        \u2514\u2500\u2500 ex2 2.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex2-2.sml/#preview","title":"Preview","text":"<pre><code>(* Given an integer i and a list L = [a_1, . . . , a_n], cycle L i times, i.e., produce [a_{i+1}, a_{i+1}, . . . , a_n, a_1, . . . , a_i] *)\n\nfun cycle (l) = tl(l) @ [hd(l)];\n\nfun i_cycle (i,L) =\n    if i=0\n    then L\n    else i_cycle (i-1,cycle(L))\n;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex2-3.sml/","title":"ex2 3","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex2-3.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    262 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b307\n        \u2514\u2500\u2500 ex2 3.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex2-3.sml/#preview","title":"Preview","text":"<pre><code>(*\nDuplicate each element of a list.\n\nThat is, given the list [a_1, a_2, . . . , a_n] produce the list [a_1, a_1, a_2, a_2, . . . , a_n, a_n]\n*)\n\nfun duplicate L =\n    if L=nil\n    then nil\n    else\n        [hd(L)] @\n        [hd(L)] @\n        duplicate (tl(L))\n;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex2-4.sml/","title":"ex2 4","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex2-4.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    105 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b307\n        \u2514\u2500\u2500 ex2 4.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex2-4.sml/#preview","title":"Preview","text":"<pre><code>(* Compute the length of a list *)\n\nfun length L =\n    if L = nil\n    then 0\n    else 1 + length(tl(L))\n;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex2-5.sml/","title":"ex2 5","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex2-5.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    178 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b307\n        \u2514\u2500\u2500 ex2 5.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex2-5.sml/#preview","title":"Preview","text":"<pre><code>(*\nCompute x^i where x is a real, and i a nonegative integer.\n\nIt doesn\u2019t need to work for i &lt; 0\n*)\n\nfun power (x:real,i) =\n    if i=0\n    then 1.0\n    else x * power (x,i-1)\n;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex2-6.sml/","title":"ex2 6","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex2-6.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    286 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b307\n        \u2514\u2500\u2500 ex2 6.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex2-6.sml/#preview","title":"Preview","text":"<pre><code>(*\nCompute the largest element (lexicographic order) of a list of strings\n\nIt doesn\u2019t need to work for empty lists\n*)\n\nfun maxList(L:string list) =\n    if tl(L)=nil\n    then hd(L)\n    else\n        if hd(L)&gt;hd(tl(L))\n        then maxList(hd(L)::tl(tl(L)))\n        else maxList(tl(L))\n;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex2-7.sml/","title":"ex2 7","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex2-7.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    334 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b307\n        \u2514\u2500\u2500 ex2 7.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex2-7.sml/#preview","title":"Preview","text":"<pre><code>(*\nIn the following code\n\nfun foo (a,b,c,d) =\n    if a=b\n    then c+1\n    else\n        if a&gt;b\n        then c\n        else b+d\n;\n\nDeduce the types of the variables and the function\n*)\n\nfun foo (a,b,c,d) =\n    if a=b\n    then c+1\n    else\n        if a&gt;b\n        then c\n        else b+d\n;\n(* val foo = fn: int * int * int * int -&gt; int *)\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex2-8.sml/","title":"ex2 8","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex2-8.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b307\n        \u2514\u2500\u2500 ex2 8.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0307/ex2-8.sml/#preview","title":"Preview","text":"<pre><code>(*\nWhat can be inferred about the types in the following\n\nfun f (a:int,b,c,d,e) =\n    if a&lt;b+c\n    then d\n    else e\n;\n\nfun f (a:int,b,c,d,e) =\n    if a&lt;b\n    then c\n    else d\n;\n\nfun f (a:int,b,c,d,e) =\n    if a&lt;b\n    then b+c\n    else d+e\n;\n\nfun f (a:int,b,c,d,e) =\n    if a&lt;b\n    then b&lt;c\n    else d\n;\n\nfun f (a:int,b,c,d,e) =\n    if b&lt;c\n    then a\n    else c+d\n;\n\nfun f (a:int,b,c,d,e) =\n    if b&lt;c\n    then d\n    else e\n;\n\nfun f (a:int,b,c,d,e) =\n    if b&lt;c\n    then d+e\n    else d*e\n;\n*)\n\nfun f (a:int,b,c,d,e) =\n    if a&lt;b+c\n    then d\n    else e\n;\n(* val f = fn: int * int * int * 'a * 'a -&gt; 'a *)\n\nfun f (a:int,b,c,d,e) =\n    if a&lt;b\n    then c\n    else d\n;\n(* val f = fn: int * int * 'a * 'a * 'b -&gt; 'a *)\n\nfun f (a:int,b,c,d,e) =\n    if a&lt;b\n    then b+c\n    else d+e\n;\n(* val f = fn: int * int * int * int * int -&gt; int *)\n\nfun f (a:int,b,c,d,e) =\n    if a&lt;b\n    then b&lt;c\n    else d\n;\n(* val f = fn: int * int * int * bool * 'a -&gt; bool *)\n\nfun f (a:int,b,c,d,e) =\n    if b&lt;c\n    then a\n    else c+d\n;\n(* val f = fn: int * int * int * int * 'a -&gt; int *)\n\nfun f (a:int,b,c,d,e) =\n    if b&lt;c\n    then d\n    else e\n;\n(* val f = fn: int * int * int * 'a * 'a -&gt; 'a *)\n\nfun f (a:int,b,c,d,e) =\n    if b&lt;c\n    then d+e\n    else d*e\n;\n(* val f = fn: int * int * int * int * int -&gt; int *)\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/","title":"0\u200b314","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 13 items</li> <li>Size:  4 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b314\n</code></pre> Name Type Item Size ex1 01 sml / 1 KiB ex1 02 sml / 333 B ex1 03 sml / 162 B ex1 04 sml / 245 B ex1 05 sml / 271 B ex1 06 sml / 293 B ex1 07 sml / 141 B ex1 08 sml / 145 B ex1 09 sml / 203 B ex1 10 sml / 306 B ex1 11 sml / 248 B ex1 12 sml / 109 B ex1 13 sml / 295 B"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-01.sml/","title":"ex1 01","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-01.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b314\n        \u2514\u2500\u2500 ex1 01.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-01.sml/#preview","title":"Preview","text":"<pre><code>(* Write the following functions using patterns *)\n\n(* The factorial function *)\nfun fact(1) = 1\n    | fact(n) = n*fact(n-1);\n\n(*\nCycle a list by one position.\n\nIf the list is empty, return the empty list\n*)\nfun cycle (nil) = nil\n    | cycle (x::xs) = xs @ [x];\n\n(* Cycle a list L i times *)\nfun cycle_i (L,0) = L\n    | cycle_i (L,i) = cycle_i (cycle(L),i-1);\n\n(* Duplicate each element of a list *)\nfun duplicate(nil) = nil\n    | duplicate(x::xs) = x::x::duplicate(xs);\n\n(* Compute x^i *)\nfun power (x,0) = 1\n    | power (x,i) = x * power (x,i-1);\n\n(* Compute the largest of a list of reals *)\nfun maxList([x:real]) = x\n    | maxList(x::y::zs) =\n        if x&lt;y\n        then maxList(y::zs)\n        else maxList(x::zs);\n\n(*\nFlip alternate elements of a list.\n\n[a_1, a_2, . . . , a_{n\u22121}, a_n] should become [a_2, a_1, . . . , a_n, a_{n\u22121}]. If n is odd, leave a_n at the end\n*)\nfun flip ([]) = []\n    | flip ([x]) = [x]\n    | flip (x::y::zs) = y::x::flip(zs);\n\n(* Given a list L and an integer i, return L with the ith element deleted. If the length of L is less than i, return L *)\nfun remove ([],m) = []\n    | remove (x::xs,1) = xs\n    | remove ([x],n) = [x]\n    | remove (x::ys,i) = x:: remove (ys,i-1);\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-02.sml/","title":"ex1 02","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-02.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    333 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b314\n        \u2514\u2500\u2500 ex1 02.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-02.sml/#preview","title":"Preview","text":"<pre><code>(*\nConsider the pattern\n\n(x::y::xs,w)\n\nDoes it match the following expressions? If so, give the variable bindings\n\u2022 ([\"a\",\"b\",\"c\"],[\"d\",\"e\"])\n\u2022 ([\"a\",\"b\"],4.5)\n\u2022 ([5],[6,7])\n*)\n\n(*\n\u2022 Yes; x=\"a\", y=\"b\", zs=[\"c\"], and w=[\"d\",\"e\"]\n\u2022 Yes; x=\"a\", y=\"b\", zs=[], and w=4.5\n\u2022 No; the expression y::zs must match the empty list\n*)\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-03.sml/","title":"ex1 03","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-03.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    162 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b314\n        \u2514\u2500\u2500 ex1 03.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-03.sml/#preview","title":"Preview","text":"<pre><code>(*\nWrite a program to compute the square of an integer, using the formula\n\nn^2 = (n \u2212 1)^2 + 2n \u2212 1\n*)\n\nfun square(0) = 0\n    | square(n) = square(n-1)+2*n-1;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-04.sml/","title":"ex1 04","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-04.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    245 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b314\n        \u2514\u2500\u2500 ex1 04.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-04.sml/#preview","title":"Preview","text":"<pre><code>(* Write a function that takes a list of pairs of integers and orders each pair so that the smallest number is first *)\n\nfun flip(nil) = nil\n    | flip((x as (a:int,b))::xs) =\n        if a&lt;b\n        then x::flip(xs)\n        else (b,a)::flip(xs);\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-05.sml/","title":"ex1 05","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-05.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    271 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b314\n        \u2514\u2500\u2500 ex1 05.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-05.sml/#preview","title":"Preview","text":"<pre><code>(* Write a function that takes a list of characters and returns true if the first element is a vowel *)\n\nfun vowel(#\"a\"::ys) = true\n    | vowel(#\"e\"::ys) = true\n    | vowel(#\"i\"::ys) = true\n    | vowel(#\"o\"::ys) = true\n    | vowel(#\"u\"::ys) = true\n    | vowel(_) = false;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-06.sml/","title":"ex1 06","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-06.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    293 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b314\n        \u2514\u2500\u2500 ex1 06.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-06.sml/#preview","title":"Preview","text":"<pre><code>(*\nRepresenting sets by lists\n\nWe represent a set by a list: the elements can be in any order, but without\nrepetitions\n\nWrite a function member(x,S) to test whether x is a member of set S\n*)\n\nfun member(_,nil) = false\n| member(x,y::ys) = (\n        x = y\n    orelse\n        member(x,ys)\n    )\n;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-07.sml/","title":"ex1 07","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-07.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    141 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b314\n        \u2514\u2500\u2500 ex1 07.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-07.sml/#preview","title":"Preview","text":"<pre><code>(* Delete an element from a set delete(x,S) *)\n\nfun delete(a,[]) = []\n| delete(b,c::ys) =\n    if b = c\n    then ys\n    else c::delete(b,ys)\n;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-08.sml/","title":"ex1 08","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-08.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    145 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b314\n        \u2514\u2500\u2500 ex1 08.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-08.sml/#preview","title":"Preview","text":"<pre><code>(* Insert an element into a set insert(x,S) *)\n\nfun insert(x,nil) = [x]\n| insert(x,S as y::ys) =\n    if x=y\n    then S\n    else y::insert(x,ys)\n;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-09.sml/","title":"ex1 09","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-09.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    203 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b314\n        \u2514\u2500\u2500 ex1 09.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-09.sml/#preview","title":"Preview","text":"<pre><code>(* Write a function that takes an element a and a list of lists L and inserts a at the front of each of these lists *)\n\nfun insertAll(a,nil) =\n    nil\n| insertAll(a,L::Ls) =\n    (a::L)::insertAll(a,Ls)\n;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-10.sml/","title":"ex1 10","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-10.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    306 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b314\n        \u2514\u2500\u2500 ex1 10.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-10.sml/#preview","title":"Preview","text":"<pre><code>(*\nSuppose that sets are represented by lists. Write a function that takes such\na list, and produces the power set of the list\n\nIf S is a set, the power set of S is the set of all S\u2032 such that S \u2286 S\u2032\n*)\n\nfun powerSet(nil) =\n    [nil]\n| powerSet(x::xs) =\n    powerSet(xs) @ insertAll(x,powerSet(xs))\n;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-11.sml/","title":"ex1 11","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-11.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    248 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b314\n        \u2514\u2500\u2500 ex1 11.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-11.sml/#preview","title":"Preview","text":"<pre><code>(*\nGiven a list of reals [a_1, . . . , a_n] compute\n\n\u03a0_{i&lt;j}(a_i \u2212 a_j)\n*)\n\nfun prodDiff1(_,nil) =\n    1.0\n| profDiff1(a,b::bs) =\n    (a-b) * profDiff1(a,bs)\n;\n\nfun prodDiff(nil) =\n    1.0\n| profDiff(b::bs) =\n    prodDiff1(b,bs) * prodDiff(bs)\n;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-12.sml/","title":"ex1 12","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-12.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    109 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b314\n        \u2514\u2500\u2500 ex1 12.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-12.sml/#preview","title":"Preview","text":"<pre><code>(* Write a function to test if a list is empty *)\n\nfun emptyList(nil) =\n    true\n| emptyList(_) =\n    false\n;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-13.sml/","title":"ex1 13","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-13.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    295 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b314\n        \u2514\u2500\u2500 ex1 13.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0314/ex1-13.sml/#preview","title":"Preview","text":"<pre><code>(*\nIn the example\n\nfun sumPairs (nil) =\n    0\n| sumPairs ((x,y)::zs) =\n    x + y + sumPairs(zs)\n;\n\nHow does ML figure out the type?\n*)\n\n(*\n\u2022 Addition: default x and y are integers, as is the result of sumPairs\n\u2022 Therefore (x,y) is a pair of integers, and the input is a list of such pairs\n*)\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0321/","title":"0\u200b321","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0321/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 7 items</li> <li>Size:  2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b321\n</code></pre> Name Type Item Size ex1 1 sml / 206 B ex1 2 sml / 265 B ex1 3 sml / 227 B ex1 4 sml / 287 B ex1 5 sml / 235 B ex1 6 sml / 251 B ex1 7 sml / 306 B"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0321/ex1-1.sml/","title":"ex1 1","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0321/ex1-1.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    206 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b321\n        \u2514\u2500\u2500 ex1 1.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0321/ex1-1.sml/#preview","title":"Preview","text":"<pre><code>(* Write a short program to compute x^1000 *)\n\nfun thousandthPower(x:real) =\n    let\n        val x = x*x*x*x*x;\n        val x = x*x*x*x*x;\n        val x = x*x*x*x*x;\n    in\n        x*x*x*x*x*x*x*x\n    end\n;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0321/ex1-2.sml/","title":"ex1 2","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0321/ex1-2.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    265 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b321\n        \u2514\u2500\u2500 ex1 2.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0321/ex1-2.sml/#preview","title":"Preview","text":"<pre><code>(* Write the split program without using a pattern in the val declaration *)\n\nfun split(nil) = (nil,nil)\n| split([a]) = ([a],nil)\n| split(a::b::cs) =\n    let\n        val x = split(cs);\n        val M = #1 x;\n        val N = #2 x;\n    in\n        (a::M,b::N)\n    end\n;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0321/ex1-3.sml/","title":"ex1 3","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0321/ex1-3.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    227 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b321\n        \u2514\u2500\u2500 ex1 3.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0321/ex1-3.sml/#preview","title":"Preview","text":"<pre><code>(* Improve the powerset function by using a let and computing the powerset of the tail only once *)\n\nfun powerSet(nil) = [nil]\n| powerSet(x::xs) =\n    let\n        val L = powerSet(xs)\n    in\n        L @ insertAll(x,L)\n    end\n;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0321/ex1-4.sml/","title":"ex1 4","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0321/ex1-4.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    287 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b321\n        \u2514\u2500\u2500 ex1 4.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0321/ex1-4.sml/#preview","title":"Preview","text":"<pre><code>(* Write an improved function to find the largest of a list of integers using a let *)\n\nfun maxReals(nil) = 0.0\n| maxReals(x::xs) =\n    let\n        val maxTail = maxReals (xs)\n    in\n        if\n            x &lt; maxTail\n        then\n            maxTail\n        else\n            x\n    end\n;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0321/ex1-5.sml/","title":"ex1 5","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0321/ex1-5.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    235 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b321\n        \u2514\u2500\u2500 ex1 5.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0321/ex1-5.sml/#preview","title":"Preview","text":"<pre><code>(* Write an efficient program to compute x^(2^i), for real x and nonnegative i, making only one recursive call *)\n\nfun doubleExp(x:real, 0) = x\n| doubleExp(x,i) =\n    let\n        val y = doubleExp(x, i-1)\n    in\n        y * y\n    end\n;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0321/ex1-6.sml/","title":"ex1 6","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0321/ex1-6.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    251 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b321\n        \u2514\u2500\u2500 ex1 6.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0321/ex1-6.sml/#preview","title":"Preview","text":"<pre><code>(* Write a function sumPairs that takes a list of pairs of integers, and returns a pair of the sum of each component *)\n\nfun sumPairs(nil) = (0,0)\n| sumPairs((x,y)::zs) =\n    let\n        val (z1,z2) = sumPairs(zs)\n    in\n        (x+z1, y+z2)\n    end\n;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0321/ex1-7.sml/","title":"ex1 7","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0321/ex1-7.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    306 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b321\n        \u2514\u2500\u2500 ex1 7.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0321/ex1-7.sml/#preview","title":"Preview","text":"<pre><code>(* Write a function that takes a list of integers and returns a pair of the sum of the even positions and the sum of the odd positions *)\n\nfun sumList(nil) = (0,0)\n| sumList([x]) = (0,x)\n| sumList(x::y::zs) =\n    let\n        val (sumEven,sumOdd) = sumList(zs)\n    in\n        (y+sumEven, x+sumOdd)\n    end\n;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0328/","title":"0\u200b328","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0328/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 9 items</li> <li>Size:  4 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b328\n</code></pre> Name Type Item Size ex1 1 sml / 167 B ex1 2 sml / 430 B ex1 3 sml / 147 B ex2 1 sml / 729 B ex2 2 sml / 685 B ex2 3 sml / 362 B ex2 4 sml / 878 B ex3 1 sml / 328 B ex3 2 sml / 421 B"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0328/ex1-1.sml/","title":"ex1 1","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0328/ex1-1.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    167 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b328\n        \u2514\u2500\u2500 ex1 1.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0328/ex1-1.sml/#preview","title":"Preview","text":"<pre><code>(* Write a function that prints a list of integers *)\n\nfun printList(nil) = ()\n| printList(x::xs) = (\n    print(Int.toString(x));\n    print(\"\\n\");\n    printList(xs)\n);\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0328/ex1-2.sml/","title":"ex1 2","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0328/ex1-2.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    430 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b328\n        \u2514\u2500\u2500 ex1 2.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0328/ex1-2.sml/#preview","title":"Preview","text":"<pre><code>(* Write a function to compute \\dbinom{n}{m}, while printing n, m and the result *)\n\nfun factorial(0) =\n    1\n| factorial(n) =\n    n * factorial(n-1);\n\nfun comb(n,m) = (\n    print(\"n is \");\n    print(Int.toString(n));\n    print(\"\\n\");\n    print(\"m is \");\n    print(Int.toString(m));\n    print(\"\\n\");\n    print(\"Result is \");\n    print(Int.toString(\n        factorial(n) div (factorial(m)*factorial(n-m))\n    ));\n    print(\"\\n\")\n);\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0328/ex1-3.sml/","title":"ex1 3","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0328/ex1-3.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    147 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b328\n        \u2514\u2500\u2500 ex1 3.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0328/ex1-3.sml/#preview","title":"Preview","text":"<pre><code>(* Given n, print 2^n X\u2019s *)\n\nfun makelist(1) =\n    \"X\"\n| makelist(n) =\n    makelist(n-1) ^ makelist(n-1)\n;\n\nfun printXs(n) = print(makelist(n));\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0328/ex2-1.sml/","title":"ex2 1","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0328/ex2-1.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    729 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b328\n        \u2514\u2500\u2500 ex2 1.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0328/ex2-1.sml/#preview","title":"Preview","text":"<pre><code>(*\nWrite expressions to\n\n1. Open a file zap for reading\n2. Close the file whose instream is in1\n3. Read 5 characters from the instream in2\n4. Read a line of text from the instream in3\n5. Read the entire file from instream in4\n6. Find the first character waiting on the in1, without consuming it\n*)\n\n(* Open a file zap for reading *)\nval IN = TextIO.openIn(\"zap\")\n\n(* Close the file whose instream is in1 *)\nTextIO.closeIn(in1);\n\n(* Read 5 characters from the instream in2 *)\nTextIO.inputN(in2,5);\n\n(* Read a line of text from the instream in3 *)\nTextIO.inputLine(in3);\n\n(* Read the entire file from instream in4 *)\nTextIO.input(in4);\n\n(* Find the first character waiting on the in1, without consuming it *)\nTextIO.lookahead(in1);\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0328/ex2-2.sml/","title":"ex2 2","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0328/ex2-2.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    685 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b328\n        \u2514\u2500\u2500 ex2 2.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0328/ex2-2.sml/#preview","title":"Preview","text":"<pre><code>(*\nAssume that we have a file with the following contents\n\nabd\nde\nf\n\nWhat does each command return, if issued repeatedly\n\nval x = input(infile);\nval x = input1(infile);\nval x = inputN(infile,2);\nval x = inputN(infile,5);\nval x = inputLine(infile);\nval x = lookahead(infile);\n*)\n\nval x = input(infile);\n(* First time abc\\nde\\nf\\n, Subsequent times, the empty string *)\n\nval x = input1(infile);\n(* a, b, c, \\n, d, e, \\n, f, then empty string *)\n\nval x = inputN(infile,2);\n(* ab, c\\n, de, \\nf, enpty string *)\n\nval x = inputN(infile,5);\n(* abc\\nd, e\\nf then empty string *)\n\nval x = inputLine (infile);\n(* abc\\n, de\\n, f\\n, then empty string *)\n\nval x = lookahead (infile);\n(* Always a *)\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0328/ex2-3.sml/","title":"ex2 3","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0328/ex2-3.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    362 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b328\n        \u2514\u2500\u2500 ex2 3.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0328/ex2-3.sml/#preview","title":"Preview","text":"<pre><code>(*\nWhat are the types of the following expressions\n\n1. SOME()\n2. SOME 123\n3. SOME NONE\n4. fun f() = SOME true;\n5. fun f(NONE) = 0\n    | f(SOME i) = 1\n    ;\n*)\n\nSOME();\n(* unit option *)\n\nSOME 123;\n(* int option *)\n\nSOME NONE;\n(* 'a option option *)\n\nfun f() = SOME true;\n(* fn:unit -&gt; bool option *)\n\nfun f(NONE) = 0\n| f(SOME i) = 1\n;\n(* fn : 'a option -&gt; int *)\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0328/ex2-4.sml/","title":"ex2 4","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0328/ex2-4.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    878 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b328\n        \u2514\u2500\u2500 ex2 4.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0328/ex2-4.sml/#preview","title":"Preview","text":"<pre><code>(* Read a file of characters, treating it as a sequence of words (consecutive, non-white space characters). Return a list of the words in the file *)\n\n(* test if a character is white space *)\nfun white(\" \") = true\n| white(\"\\t\") = true\n| white(\"\\n\") = true\n| white(_) = false;\n\nfun getWord(file) = (* read one word *)\n    if\n        TextIO.endOfStream(file)\n    then\n        \"\"\n    else\n        let\n            val c = TextIO.inputN(file,1)\n        in\n            if\n                white(c)\n            then\n                \"\"\n            else\n                c ^ getWord(file)\n        end\n;\n\nfun getList1(file) = (* read all words from an instream *)\n    if\n        TextIO.endOfStream(file)\n    then\n        nil\n    else\n        getWord(file) :: getList1(file)\n;\n\n(* read all words from a file given the file name *)\nfun getList(filename) = getList1(TextIO.openIn(filename));\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0328/ex3-1.sml/","title":"ex3 1","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0328/ex3-1.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    328 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b328\n        \u2514\u2500\u2500 ex3 1.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0328/ex3-1.sml/#preview","title":"Preview","text":"<pre><code>(* Write a program to return the third element of a list of integers *)\n\nexception shortList of int list;\n\nfun returnThird1(L) =\n    if\n        length(L) &lt; 3\n    then\n        raise shortList(L)\n    else\n        hd(tl(tl(L)))\n;\n\nfun returnThird(L) = returnThird1 L handle shortList L =&gt; (\n    print(\"List too short\\n\");\n\n    0\n);\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0328/ex3-2.sml/","title":"ex3 2","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0328/ex3-2.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    421 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b328\n        \u2514\u2500\u2500 ex3 2.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0328/ex3-2.sml/#preview","title":"Preview","text":"<pre><code>(* Write a factorial function that produces 1 when its argument is 0, 0 for a negative argument, with an error message *)\n\nexception Negative of int;\n\nfun fact1(0) = 1\n| fact1(n) =\n    if\n        n &gt; 0\n    then\n        n * fact1(n-1)\n    else\n        raise Negative(n)\n;\n\nfun fact(n) = fact1(n) handle Negative(n) =&gt; (\n    print(\"Warning: negative argument \");\n    print(Int.toString(n));\n    print(\" found\\n\");\n\n    0\n);\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/","title":"0\u200b404","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 13 items</li> <li>Size:  8 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b404\n</code></pre> Name Type Item Size ex1 1 sml / 2 KiB ex1 2 sml / 398 B ex1 3 sml / 294 B ex1 4 sml / 382 B ex1 5 sml / 1016 B ex2 1 sml / 444 B ex2 2 sml / 446 B ex2 3 sml / 552 B ex2 4 sml / 1 KiB ex2 5 sml / 650 B ex2 6 sml / 827 B ex2 7 sml / 269 B ex2 8 sml / 403 B"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex1-1.sml/","title":"ex1 1","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex1-1.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b404\n        \u2514\u2500\u2500 ex1 1.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex1-1.sml/#preview","title":"Preview","text":"<pre><code>(*\nLet rev1 and rev2 be as above. What are the results of the following calls\n\n\u2022 rev1([(rev1:int list -&gt; int list),rev1])\n\u2022 rev2([(rev1:int list -&gt; int list),rev1])\n\u2022 rev1([rev1,rev1])\n\u2022 rev2([rev2,rev2])\n\n\u2022 rev1([chr,chr])\n\u2022 rev2([chr,chr])\n\u2022 rev1([chr,ord])\n\u2022 rev2([chr,ord])\n*)\n\nrev1([(rev1:int list -&gt; int list),rev1]);\n(*\nerror: Type error in function application.\n    Function: rev1 : \u2019\u2019a list -&gt; \u2019\u2019a list\n    Argument: ([(rev1 : int list -&gt; int list), rev1]) :\n        (int list -&gt; int list) list\n    Reason: Can\u2019t unify \u2019\u2019a to int list -&gt; int list (Requires equality type)\n*)\n\nrev2([(rev1:int list -&gt; int list),rev1]);\n(* val it = [fn, fn]: (int list -&gt; int list) list *)\n\nrev1([rev1,rev1]);\n(*\nerror: Type error in function application.\n    Function: rev1 : \u2019\u2019a list -&gt; \u2019\u2019a list\n    Argument: ([rev1, rev1]) : (\u2019\u2019a list -&gt; \u2019\u2019a list) list\n    Reason: Can\u2019t unify \u2019\u2019a to \u2019\u2019a list -&gt; \u2019\u2019a list (Requires equality type)\n*)\n\nrev2([rev2,rev2]);\n(* val it = [fn, fn]: (_a list -&gt; _a list) list *)\n\nrev1([chr,chr]);\n(*\nerror: Type error in function application.\n    Function: rev1 : \u2019\u2019a list -&gt; \u2019\u2019a list\n    Argument: ([chr, chr]) : (int -&gt; char) list\n    Reason: Can\u2019t unify \u2019\u2019a to int -&gt; char (Requires equality type)\n*)\n\nrev2([chr,chr]);\n(* val it = [fn, fn]: (int -&gt; char) list *)\n\nrev1([chr,ord]);\n(*\nerror: Elements in a list have different types.\n    Item 1: chr : int -&gt; char\n    Item 2: ord : char -&gt; int\n*)\n\nrev2([chr,ord]);\n(*\nerror: Elements in a list have different types.\n    Item 1: chr : int -&gt; char\n    Item 2: ord : char -&gt; int\n*)\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex1-2.sml/","title":"ex1 2","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex1-2.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    398 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b404\n        \u2514\u2500\u2500 ex1 2.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex1-2.sml/#preview","title":"Preview","text":"<pre><code>(*\nGive definitions of f(x,y,z) where the argument has the following types\n\n\u2022 'a * ''b * ('a-&gt;''b)\n\u2022 'a * 'a * int\n\n\u2022 'a list * 'b * 'a\n\u2022 ('a list * 'b list) * 'a * 'b\n*)\n\n(* 'a * ''b * ('a-&gt;''b) *)\nfun f(x,y,z) = (z(x)=y);\n\n(* 'a * 'a * int *)\nfun f(x,y,z) = (x, y, z+1);\n\n(* 'a list * 'b * 'a *)\nfun f(x,y,z) = z::x;\n\n(* ('a list * 'b list) * 'a * 'b *)\nfun f ((x1,x2),y,z) = (y::x,z::x);\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex1-3.sml/","title":"ex1 3","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex1-3.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    294 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b404\n        \u2514\u2500\u2500 ex1 3.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex1-3.sml/#preview","title":"Preview","text":"<pre><code>(*\nAre the following equality types?\n\n\u2022 int * string list\n\u2022 (int -&gt; char) * string\n\u2022 int -&gt; string -&gt; unit\n\u2022 real * (string * string) list\n*)\n\n(*\n\u2022 int * string list\n    Yes\n\u2022 (int -&gt; char) * string\n    No\n\u2022 int -&gt; string -&gt; unit\n    No\n\u2022 real * (string * string) list\n    No\n*)\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex1-4.sml/","title":"ex1 4","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex1-4.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    382 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b404\n        \u2514\u2500\u2500 ex1 4.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex1-4.sml/#preview","title":"Preview","text":"<pre><code>(*\nConsider the following\n\nval L = [(1,2),(3,4)];\nval M = (1,2);\nval N = (3,4);\n\nWhich of the following are true?\n\n\u2022 L = M::[N]\n\u2022 M::L = L@[N]\n\u2022 [(1,2)]@[N] = L@nil\n\u2022 N::L = (3,4)::M::N::nil\n*)\n\nL = M::[N];\n(* val it = true: bool *)\n\nM::L = L@[N];\n(* val it = false: bool *)\n\n[(1,2)]@[N] = L@nil;\n(* val it = true: bool *)\n\nN::L = (3,4)::M::N::nil;\n(* val it = true: bool *)\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex1-5.sml/","title":"ex1 5","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex1-5.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    1016 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b404\n        \u2514\u2500\u2500 ex1 5.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex1-5.sml/#preview","title":"Preview","text":"<pre><code>(*\nConsider the following definitions\n\nfun f(nil)= nil\n| f([x])= [x]\n| f(x::y::zs) = [x,y];\n\nfun g(x,y) = (f(x),f(y));\n\nfun h(x,y) =\n    let\n        val v = f(nil)\n    in\n        (x::v, y::v)\n    end\n;\n\nAre the following expressions legal?\n\n\u2022 g([1,2,3],[\"a\"])\n\u2022 g([1,2,3],nil)\n\u2022 g([f,f],[1])\n\u2022 g([1],[1.0])\n\n\u2022 h(1,2)\n\u2022 h(1,\"a\")\n\u2022 h(nil,nil)\n\u2022 h([1],nil)\n*)\n\ng([1,2,3],[\"a\"]);\n(* val it = ([1,2],[\"a\"]): int list * string list *)\n\ng([1,2,3],nil);\n(* warning: The type of (it) contains a free type variable *)\n\ng([f,f],[1]);\n(* warning: The type of (it) contains a free type variable *)\n\ng([1],[1.0]);\n(* val it = ([1],[1.0]): int list * real list *)\n\nh(1,2);\n(* val it = ([1],[2]): int list * int list *)\n\nh(1,\"a\");\n(*\nerror: Type error in function application.\n    Function: h : int * int -&gt; int list * int list\n    Argument: (1, \"a\") : int * string\n*)\n\nh(nil,nil);\n(* warning: The type of (it) contains a free type variable *)\n\nh([1],nil);\n(* val it = ([[1]], [[]]): int list list * int list list *)\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex2-1.sml/","title":"ex2 1","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex2-1.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    444 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b404\n        \u2514\u2500\u2500 ex2 1.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex2-1.sml/#preview","title":"Preview","text":"<pre><code>(*\nWrite a function tabulate that takes an initial value a, an increment \u03b4, a number of points n, and a function F from reals to reals\n\nPrint a table with columns corresponding to x and F(x), where x = a, a + \u03b4, a + 2\u03b4, . . . , a + (n \u2212 1)\u03b4\n*)\n\nfun tabulate(x,delta,0,F) = ()\n| tabulate(x,delta,n,F) = (\n    print(Real.toString(x));\n    print(\"\\t\");\n    print(Real.toString(F(x)));\n    print(\"\\n\");\n    tabulate(x+delta, delta, n-1, F)\n);\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex2-2.sml/","title":"ex2 2","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex2-2.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    446 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b404\n        \u2514\u2500\u2500 ex2 2.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex2-2.sml/#preview","title":"Preview","text":"<pre><code>(* At the cost of some roundoff errors, it is possible to compute \u03b4 in the trapezoidal function once at the begining. Reimplement trap in this way *)\n\nfun trap(a,b,n,F) =\n    if\n        n&lt;=0 orelse b-a&lt;=0.0\n    then\n        0.0\n    else\n        let\n            val delta = (b-a)/real(n);\n\n            fun trap1(x,0) = 0.0\n            | trap1(x,i) = delta*(F(x)+F(x+delta))/2.0 + trap1(x+delta,i-1)\n        in\n            trap1(a,n)\n        end\n;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex2-3.sml/","title":"ex2 3","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex2-3.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    552 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b404\n        \u2514\u2500\u2500 ex2 3.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex2-3.sml/#preview","title":"Preview","text":"<pre><code>(* Improve the previous exercise by printing an error message and raising an exception when the input is bad *)\n\nexception badInput;\n\nfun trap1(a,b,n,F) =\n    if\n        n&lt;=0 orelse b-a&lt;=0.0\n    then\n        raise badInput\n    else\n        let\n            val delta = (b-a)/real(n);\n\n            fun trap1(x,0) = 0.0\n            | trap1(x,i) = delta*(F(x)+F(x+delta))/2.0 + trap1(x+delta,i-1)\n        in\n            trap1(a,n)\n        end\n;\n\nfun trap(a,b,n,F) = trap1(a,b,n,F) handle badInput =&gt; (\n    print (\"Bad Input\\n\");\n\n    0.0\n);\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex2-4.sml/","title":"ex2 4","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex2-4.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b404\n        \u2514\u2500\u2500 ex2 4.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex2-4.sml/#preview","title":"Preview","text":"<pre><code>(* Use simpleMap to do the following *)\n\nfun simpleMap(F,nil) =\n    nil\n| simpleMap(F,x::xs) =\n    F(x) :: simpleMap(F,xs)\n;\n\n(* Replace every negative element of a list of reals by 0 *)\n\nval L = [0.0,1.0,~2.1,~2.3];\n\nsimpleMap(\n    fn(x) =&gt;\n        if\n            x &lt; 0.0\n        then\n            0.0\n        else\n            x\n,\n    L\n);\n\n(* Add 1 to every element of an integer list *)\n\nval L = [0,1,2,3];\n\nsimpleMap (fn(x) =&gt; x+1, L);\n\n(* Change every lower-case letter in a list of characters to the corresponding upper-case one *)\n\nval L = [#\"a\", #\"A\", #\"0\", #\"b\"];\n\nsimpleMap(\n    fn(c) =&gt;\n        if\n            c &gt;= #\"a\" andalso c &lt;= #\"z\"\n        then\n            chr(ord(c)-32)\n        else\n            c\n,\n    L\n);\n\n(*\nTruncate every string in a list of strings so that it is no more than 5 characters long\n\nsize(c) gives the length of a string\n\nsubstring (s,i,j) is the substring from position i to j\n*)\n\nval L = [\"abc\",\"abcde\",\"abcdefgh\",\"\"];\n\nsimpleMap(\n    fn(c) =&gt;\n        if\n            size(c) &lt;= 5\n        then\n            c\n        else\n            substring(c,0,5)\n,\n    L\n);\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex2-5.sml/","title":"ex2 5","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex2-5.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    650 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b404\n        \u2514\u2500\u2500 ex2 5.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex2-5.sml/#preview","title":"Preview","text":"<pre><code>(* Use reduce for the following *)\n\nfun reduce (F,nil) =\n    raise EmptyList\n| reduce (F,[a]) =\n    a\n| reduce (F,x::xs) =\n    F (x, reduce (F,xs))\n;\n\n(* Find the maximum of a list of reals *)\n\nval L = [1.1,2.2,4.4,3.3];\n\nreduce(\n    fn(x,y) =&gt;\n        if\n            x &lt; y\n        then\n            y\n        else\n            x\n,\n    L\n);\n\n(* Find the minimum of a list of reals *)\n\nval L = [1.1,2.2,4.4,3.3];\n\nreduce(\n    fn(x,y) =&gt;\n        if\n            x &gt; y\n        then\n            y\n        else\n            x\n,\n    L\n);\n\n(* Find the logical OR of a list of booleans *)\n\nval L = [true,false,true];\n\nreduce(\n    fn(x,y) =&gt; x orelse y\n,\n    L\n);\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex2-6.sml/","title":"ex2 6","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex2-6.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    827 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b404\n        \u2514\u2500\u2500 ex2 6.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex2-6.sml/#preview","title":"Preview","text":"<pre><code>(* Use filter for the following *)\n\nfun filter (P,nil) =\n    nil\n| filter (P,x::xs) =\n    if\n        P(x)\n    then\n        x::filter(P,xs)\n    else\n        filter (P,xs)\n;\n\n(* Find the elements of a list or reals that are greater than 0 *)\n\nval L = [1.1,~1.2,~1.3,1.4];\n\nfilter(\n    fn(x) =&gt; x&gt;0.0\n,\n    L\n);\n\n(* Find those elements of a list of reals that are between 1 and 2 *)\n\nval L = [1.0,1.5,1.8,2.1];\n\nfilter(\n    fn(x) =&gt; 1.0&lt;x andalso x&lt;2.0\n,\n    L\n);\n\n(* Find those elements of a list of strings that start with the character #\"a\" *)\n\nfun init_a(\"\") =\n    false\n| init_a(s) =\n    (hd(explode(s)) = #\"a\")\n;\n\nval L = [\"abc\",\"abcd\",\"bcd\"];\n\nfilter(init_a,L);\n\n(* Find those elements of a list of strings that are at most 3 characters long *)\n\nval L = [\"ab\",\"\",\"abcd\",\"ac\"];\n\nfilter(\n    fn(x) =&gt; size (x) &lt;= 3\n,\n    L\n);\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex2-7.sml/","title":"ex2 7","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex2-7.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    269 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b404\n        \u2514\u2500\u2500 ex2 7.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex2-7.sml/#preview","title":"Preview","text":"<pre><code>(*\nWhat is the effect on a list of\n\nreduce (op - , L);\n*)\n\nfun reduce (F,nil) =\n    raise EmptyList\n| reduce (F,[a]) =\n    a\n| reduce (F,x::xs) =\n    F (x, reduce (F,xs))\n;\n\n(* Alternating difference: a_1 \u2212 a_2 + a_3 \u2212 a_4 *)\n\nval L = [1,2,3,4];\n\nreduce (op - , L);\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex2-8.sml/","title":"ex2 8","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex2-8.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    403 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b404\n        \u2514\u2500\u2500 ex2 8.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0404/ex2-8.sml/#preview","title":"Preview","text":"<pre><code>(* Write a function lreduce that takes a 2-argument function F , a list [a_1, ..., a_n] and produces F (\u00b7\u00b7\u00b7 F(F(a_1, a_2), a_3) \u00b7\u00b7\u00b7, a_n) *)\n\nfun reduce (F,nil) =\n    raise EmptyList\n| reduce (F,[a]) =\n    a\n| reduce (F,x::xs) =\n    F (x, reduce (F,xs))\n;\n\nexception EmptyList;\n\nfun lreduce(F,nil) =\n    raise EmptyList\n| lreduce(F,[x]) =\n    x\n| lreduce(F,x::y::zs) =\n    lreduce(F, F(x,y)::zs)\n;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0411/","title":"0\u200b411","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0411/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 5 items</li> <li>Size:  1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b411\n</code></pre> Name Type Item Size ex1 1 sml / 237 B ex1 2 sml / 299 B ex1 3 sml / 581 B ex1 4 sml / 228 B ex1 5 sml / 158 B"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0411/ex1-1.sml/","title":"ex1 1","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0411/ex1-1.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    237 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b411\n        \u2514\u2500\u2500 ex1 1.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0411/ex1-1.sml/#preview","title":"Preview","text":"<pre><code>(* Write, in curried form, a function applyList that takes a list of functions and applies each function to the value, producing a list of the results *)\n\nfun applyList nil _ =\n    nil\n| applyList (F::Fs) a =\n    F(a)::(applyList Fs a)\n;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0411/ex1-2.sml/","title":"ex1 2","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0411/ex1-2.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    299 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b411\n        \u2514\u2500\u2500 ex1 2.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0411/ex1-2.sml/#preview","title":"Preview","text":"<pre><code>(* Write, in curried form, a function makeFnList that takes a function F from D to R=T1-&gt;T2. The result should be a function G that takes a list of elements of type D that applies F to each element in the list *)\n\nfun makeFnList F nil =\n    nil\n| makeFnList F (x::xs) =\n    F(x)::(makeFnList F xs)\n;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0411/ex1-3.sml/","title":"ex1 3","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0411/ex1-3.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    581 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b411\n        \u2514\u2500\u2500 ex1 3.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0411/ex1-3.sml/#preview","title":"Preview","text":"<pre><code>(*\nWrite a function substring that takes two parameters and checks whether the first is a substring of the second\n\nHint: test for sublists, then use explode\n*)\n\n(* ss1(L,M) tests whether list L is a prefix of list M *)\n\nfun ss1(nil, _) =\n    true\n| ss1(_, nil) =\n    false\n| ss1(x::xs, y::ys) =\n    (x=y andalso ss1(xs,ys))\n;\n\n(* ss2(L,M) tests whether list L is a sublist of list M *)\n\nfun ss2(x, nil) =\n    ss1(x,nil)\n| ss2(x, y::ys) =\n    ss1(x,y::ys) orelse ss2(x,ys)\n;\n\n(* substring converts strings to lists and applies ss2 *)\n\nfun substring x y = ss2(explode(x),explode(y));\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0411/ex1-4.sml/","title":"ex1 4","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0411/ex1-4.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    228 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b411\n        \u2514\u2500\u2500 ex1 4.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0411/ex1-4.sml/#preview","title":"Preview","text":"<pre><code>(*\nGiven a function F that takes a parameter of product type with n components, curry applied to F should produce a function such that\n\nG x_1 ... x_n = F (x_1, ..., x_n)\n\nn should be fixed\n*)\n\nfun curry F x1 x2 x3 = F(x1,x2,x3);\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0411/ex1-5.sml/","title":"ex1 5","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0411/ex1-5.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    158 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b411\n        \u2514\u2500\u2500 ex1 5.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0411/ex1-5.sml/#preview","title":"Preview","text":"<pre><code>(* Given a curried function with n parameters, write a function uncurry that is the reverse of the previous exercise *)\n\nfun uncurry F(x1,x2,x3) = F x1 x2 x3;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0429/","title":"0\u200b429","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0429/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 7 items</li> <li>Size:  2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b429\n</code></pre> Name Type Item Size ex1 1 sml / 1 KiB ex1 2 sml / 147 B ex1 3 sml / 414 B ex1 4 sml / 229 B ex2 1 sml / 163 B ex2 2 sml / 212 B ex2 3 sml / 133 B"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0429/ex1-1.sml/","title":"ex1 1","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0429/ex1-1.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b429\n        \u2514\u2500\u2500 ex1 1.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0429/ex1-1.sml/#preview","title":"Preview","text":"<pre><code>(* In the following exercises, use `map`, `foldr` and `foldl` *)\n\nfun map F =\n    let\n        fun M nil    = nil\n          | M(x::xs) = F x :: M xs\n    in\n        M\n    end\n;\n\nfun foldr F y nil     = y\n  | foldr F y (x::xs) = F (x, foldr F y xs)\n;\n\nfun foldl F y nil     = y\n  | foldl F y (x::xs) = foldl F (F (x, y)) xs\n;\n\n(* Turn a list of integers into a list of `reals` with the same values *)\n\nval f = map real;\n\n(* Define a function that turns an integer list $L$ into a list of reals, each of which is the absolute value of the element in $L$ *)\n\nval f = map (real o abs);\n\n(* The function `implode` *)\n\nval f = (foldr (op ^) \"\") o (map str);\n\n(* The function `concat` *)\n\nval concat = foldr (op ^) \"\";\n\n(* A function that takes a list of integers $[a_1, ..., a_n]$ and produces the alternating sum $a_1 \u2212 a_2 + a_3 \u2212 \u00b7 \u00b7 \u00b7 $ *)\n\nval f = foldr (op -) 0;\n\n(* Compute the logical AND of a list of Booleans *)\n\nval f = foldr (fn (x, y) =&gt; x andalso y) true;\n\n(* Compute the logical OR of a list of Booleans *)\n\nval f = foldr (fn (x, y) =&gt; x orelse y) false;\n\n(* Compute the exclusive OR of a list of Booleans *)\n\nval f = foldr (\n        fn (a, b) =&gt; (a orelse b)\n    andalso\n        not (a andalso b)\n) false;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0429/ex1-2.sml/","title":"ex1 2","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0429/ex1-2.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    147 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b429\n        \u2514\u2500\u2500 ex1 2.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0429/ex1-2.sml/#preview","title":"Preview","text":"<pre><code>(* Write a definition of `foldl` similar to our definition of `foldr` *)\n\nfun foldl F y nil     = y\n  | foldl F y (x::xs) = foldl F (F (x, y)) xs\n;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0429/ex1-3.sml/","title":"ex1 3","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0429/ex1-3.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    414 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b429\n        \u2514\u2500\u2500 ex1 3.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0429/ex1-3.sml/#preview","title":"Preview","text":"<pre><code>(* Given the following definitions *)\n\nfun comp F G =\n    let\n        fun C x = G (F (x))\n    in\n        C\n    end\n;\n\nfun add1 x = x + 1;\n\n(* Determine the type and result of the following expressions. Assume all unknown types are integers *)\n\nval compA1 = comp add1;\n(* val compA1 = fn: (int -&gt; _a) -&gt; int -&gt; _a *)\n\nval compCompA1 = comp compA1;\n(* val compCompA1 = fn: ((int -&gt; _a) -&gt; _a) -&gt; (int -&gt; _a) -&gt; _a *)\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0429/ex1-4.sml/","title":"ex1 4","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0429/ex1-4.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    229 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b429\n        \u2514\u2500\u2500 ex1 4.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0429/ex1-4.sml/#preview","title":"Preview","text":"<pre><code>(*\nWrite a function that takes a list of reals $[a_0, . . . , a_{n\u22121}]$ and produces a function that takes an argument b and computes\n\n\\sum_{i = 0}^{n - 1} a_i b^i\n*)\n\nfun f aList b = foldr (fn (y, z) =&gt; y + z * b) (0.0) aList;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0429/ex2-1.sml/","title":"ex2 1","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0429/ex2-1.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    163 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b429\n        \u2514\u2500\u2500 ex2 1.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0429/ex2-1.sml/#preview","title":"Preview","text":"<pre><code>(* Give a type definition for a set of sets, where the type of elements is unspecified, and sets are represented by lists *)\n\ntype \u2019a setOfSets = \u2019a list list;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0429/ex2-2.sml/","title":"ex2 2","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0429/ex2-2.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    212 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b429\n        \u2514\u2500\u2500 ex2 2.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0429/ex2-2.sml/#preview","title":"Preview","text":"<pre><code>(* Give a type definition for a list of triples, the first two components of which have the same type, and the third is some (possibly) different type *)\n\ntype (\u2019a, \u2019b) newMapping = (\u2019a * \u2019a * \u2019b) list;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0429/ex2-3.sml/","title":"ex2 3","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0429/ex2-3.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    133 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b429\n        \u2514\u2500\u2500 ex2 3.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0429/ex2-3.sml/#preview","title":"Preview","text":"<pre><code>(* Give an example of a value of type `(real, real) mapping` *)\n\nval x = [(1.0, 1.0), (1.0, 1.1), (1.1, 1.0)] : (real, real) mapping;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0506/","title":"0\u200b506","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0506/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 2 items</li> <li>Size:  932 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b506\n</code></pre> Name Type Item Size class sc / 94 B class sml / 838 B"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0506/class.sc/","title":"class","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0506/class.sc/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sc</li> <li>Size:    94 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b506\n        \u2514\u2500\u2500 class.sc\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0506/class.sc/#preview","title":"Preview","text":"<pre><code>def triple(x: Int): Int = x * 3\n\nval tripleCopy: (Int) =&gt; Int = triple\n\nprintln(tripleCopy(5))\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0506/class.sml/","title":"class","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0506/class.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    838 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b506\n        \u2514\u2500\u2500 class.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0506/class.sml/#preview","title":"Preview","text":"<pre><code>datatype 'b T = F of ('b T -&gt; 'b);\n\nfn x =&gt; (\n    x (F x)\n);\n\nfn f =&gt; (\n    fn x =&gt;\n        F (x (F x))\n);\n\nval Y =\n    fn f =&gt; (\n        fn x =&gt;\n            f(x (F x))\n    )(\n        fn (F x) =&gt;\n            f(x (F x))\n    )\n;\n\nval fact_closed =\n    fn f =&gt;\n        fn n =&gt;\n            if\n                n = 0\n            then\n                1\n            else\n                n * f (n - 1)\n;\n\ndatatype 'b T = F of ('b T -&gt; 'b);\n\nval Z =\n    fn f =&gt; (\n        fn x =&gt;\n            f (fn v =&gt;\n                (x (F x)) v\n            )\n    )(\n        fn (F x) =&gt;\n            f (fn v =&gt;\n                (x (F x)) v\n            )\n    )\n;\n\nval fact_closed =\n    fn f =&gt;\n        fn n =&gt;\n            if\n                n = 0\n            then\n                1\n            else\n                n * f (n - 1)\n;\n\nval fact = Z fact_closed;\n\nfact 5;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0509/","title":"0\u200b509","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0509/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 1 item</li> <li>Size:  3 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b509\n</code></pre> Name Type Item Size class sml / 3 KiB"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0509/class.sml/","title":"class","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0509/class.sml/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    sml</li> <li>Size:    3 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 0\u200b509\n        \u2514\u2500\u2500 class.sml\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/0509/class.sml/#preview","title":"Preview","text":"<pre><code>signature Stack = sig\n    val empty : 'a list\n    val pop : 'a list -&gt; 'a option\n    val push : 'a * 'a list -&gt; 'a list\n    eqtype 'a stack\nend;\n\nstructure Stack = struct\n    type 'a stack = 'a list\n    val empty = []\n    val push = op ::\n    fun pop [] = NONE\n      | pop (tos::rest) = SOME tos\nend :&gt; Stack;\n\nStack.push(1, Stack.empty);\n\nstructure S = Stack;\n\nS.push(1, S.empty);\n\nstructure LS = Stack :&gt; Stack;\n\nLS.push(1, LS.empty);\n\nsignature TREE = sig\n    datatype 'a T = Br of 'a * 'a T * 'a T | Lf\n    val count : 'a T -&gt; int\n    val depth : 'a T -&gt; int\n    val reflect : 'a T -&gt; 'a T\nend;\n\nstructure Tree = struct\n    datatype 'a T = Br of 'a * 'a T * 'a T | Lf\n    fun count Lf = 0\n      | count (Br(v, t1, t2)) = 1 + count(t1) + count(t2)\n    ;\n    fun depth Lf = 0\n      | depth (Br(v, t1, t2)) = 1 + Int.max(depth(t1), depth(t2))\n    ;\n    fun reflect Lf = Lf\n      | reflect (Br(v, t1, t2)) = Br(v, reflect(t2), reflect(t1))\n    ;\nend :&gt; TREE;\n\nfun lower(nil) = nil\n  | lower(c::cs) = (Char.toLower c) :: lower(cs)\n;\n\nfun strLT(x, y) = implode(lower(explode x)) &lt; implode(lower(explode y));\n\ndatatype 'a btree = Empty | Node of 'a * 'a btree * 'a btree;\n\nfun lookup lt Empty x = false\n  | lookup lt (Node(y, left, right)) x =\n        if\n            lt(x, y)\n        then\n            lookup lt left x\n        else\n            if\n                lt(y, x)\n            then\n                lookup lt right x\n            else\n                true\n;\n\nval t = Node(\"ML\",\n    Node(\"as\",\n        Node(\"a\", Empty, Empty),\n        Node(\"in\", Empty, Empty)\n    ),\n    Node(\"types\", Empty, Empty)\n);\n\nlookup strLT t \"function\";\n\nlookup strLT t \"ML\";\n\nfun insert lt Empty x = Node(x, Empty, Empty)\n  | insert lt (T as Node(y, left, right)) x =\n        if\n            lt(x, y)\n        then\n            Node(y, (insert lt left x), right)\n        else\n            if\n                lt(y, x)\n            then\n                Node(y, left, (insert lt right x))\n            else T\n;\n\ninsert strLT t \"function\";\n\nexception EmptyTree;\n\nfun deletemin(Empty) = raise EmptyTree\n  | deletemin(Node(y, Empty, right)) = (y, right)\n  | deletemin(Node(w, left, right)) =\n        let\n            val (y, L) = deletemin(left)\n        in\n            (y, Node(w, L, right))\n        end\n;\n\nfun delete lt Empty x = Empty\n  | delete lt (Node (y, left, right)) x =\n        if\n            lt(x, y)\n        then\n            Node(y, (delete lt left x), right)\n        else\n            if\n                lt(y, x)\n            then\n                Node(y, left, (delete lt right x))\n            else\n                case(left, right) of\n                    (Empty, r) =&gt; r |\n                    (l, Empty) =&gt; l |\n                    (l, r) =&gt;\n                        let\n                            val (z, rl) = deletemin(r)\n                        in\n                            Node(z, l, rl)\n                        end\n;\n\nfun sum(Empty) = 0\n  | sum(Node(a, left, right)) = a + sum(left) + sum(right)\n;\n\nfun preOrder(Empty) = nil\n  | preOrder(Node(a, left, right)) = [a] @ preOrder(left) @ preOrder(right)\n;\n\nfun postOrder(Empty) = nil\n  | postOrder(Node(a, left, right)) = postOrder(left) @ postOrder(right) @ [a]\n;\n\nfun inOrder(Empty) = nil\n  | inOrder(Node(a, left, right)) = inOrder(left) @ [a] @ inOrder(right)\n;\n\ntype('d, 'r) mapTree = ('d * 'r)btree;\n\nval t1 = Node((\"a\", 1), Empty, Empty): (string, int) mapTree;\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/README.md/","title":"README","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/README.md/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    md</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 Lab ML\n    \u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/README.md/#more-info","title":"More Info","text":""},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/README.md/#content","title":"CONTENT","text":""},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/README.md/#feb-28","title":"Feb 28","text":"<ul> <li>Exercise 1<ul> <li>ML</li> <li>Running ML</li> <li>Expressions</li> <li>Constants</li> <li>Arithmetic operators</li> <li>String operators</li> <li>Comparisons</li> <li>Logical operations</li> <li>If-then-else</li> </ul> </li> <li>Exercise 2<ul> <li>Type errors</li> <li>Tuples</li> <li>Coercion</li> <li>Real to integer</li> <li>Conversion between characters and integers</li> </ul> </li> <li>Exercise 3<ul> <li>Variables</li> </ul> </li> <li>Exercise 4<ul> <li>Tuples</li> <li>Accessing components of tuple</li> <li>Lists</li> <li>Head of a list</li> <li>Tail of a list</li> <li>Concatenation of lists</li> <li>Combining lists</li> <li>Strings to lists</li> <li>Lists to strings</li> <li>The ML type system: Introduction</li> </ul> </li> </ul>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/README.md/#mar-07","title":"Mar 07","text":"<ul> <li>Exercise 1<ul> <li>Functions</li> <li>The ML type system</li> <li>Specifying types</li> <li>Multiple arguments</li> <li>Tuples</li> <li>Referencing external values</li> </ul> </li> <li>Exercise 2<ul> <li>Recursion</li> <li>Reversing a list</li> <li>Nonlinear recursion</li> <li>Combinations</li> <li>Mutual recursion</li> <li>First attempt</li> <li>Type inference</li> </ul> </li> </ul>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/README.md/#mar-14","title":"Mar 14","text":"<ul> <li>Exercise 1<ul> <li>Function definition: Petterns</li> <li>as: Match pattern and assign variables</li> <li>Anonymous variables</li> <li>Patterns</li> <li>Multiple uses of variables</li> <li>Patterns that are not allowed</li> <li>No redundant patterns</li> </ul> </li> </ul>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/README.md/#mar-21","title":"Mar 21","text":"<ul> <li>Exercise 1<ul> <li>Local environments using let</li> <li>Decomposing the result of a function</li> <li>Splitting lists</li> </ul> </li> </ul>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/README.md/#mar-28","title":"Mar 28","text":"<ul> <li>Exercise 1<ul> <li>Input and Output</li> <li>Printing</li> <li>Printing non-strings</li> <li>Other conversions</li> </ul> </li> <li>Exercise 2<ul> <li>Input</li> <li>Instreams</li> <li>Reading lines of a file</li> <li>Reading complete files</li> <li>Read a single character</li> <li>Lookahead</li> <li>Are there n characters left?</li> </ul> </li> <li>Exercise 3<ul> <li>Exceptions</li> <li>User-defined exceptions</li> <li>Exceptions with parameters</li> <li>Handling exceptions</li> </ul> </li> </ul>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/Lab_ML/README.md/#apr-4","title":"Apr 4","text":"<ul> <li>Exercise 1<ul> <li>Polymorphic functions</li> <li>More on polymorphic functions</li> <li>Equality types</li> <li>Reversing lists</li> <li>Testing for empty list</li> </ul> </li> <li>Exercise 2<ul> <li>Higher-order functions</li> <li>Integration</li> <li>Some higher-order functions</li> <li>Map</li> <li>reduce</li> <li>Definition of reduce</li> <li>Using reduce to compute variance</li> <li>Infix operators</li> <li>Filter</li> </ul> </li> </ul>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/README.md/","title":"README","text":"<p>\u2190 Back</p>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/README.md/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    md</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Functional Programming\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/README.md/#more-info","title":"More Info","text":""},{"location":"courses/146168_40605_KUPER_Functional_Programming/README.md/#moodle-link","title":"Moodle Link","text":"<ul> <li>[146168] Functional Programming - KUPER</li> </ul>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/README.md/#textbook","title":"Textbook","text":"<ul> <li>Programming Languages: Principles and Paradigms - Maurizio Gabbrielli, Simone Martini - Universit\u00e0 di Bologna</li> <li>Elements of ML Programming - Jeffrey D. Ullman - Second Edition - Leland Stanford Junior University</li> <li>Programming Languages: Principles and Practice - Kenneth C. Louden, Kenneth A. Lambert - Third Edition</li> <li>Programming Language Pragmatics - Michael L. Scott - Fourth Edition - University of Rochester</li> <li>ML for the Working Programmer - L. C. Paulson - Second Edition - University of Cambridge</li> <li>Functional programming: practice and theory - Bruce J. MacLennan - University of Tennessee, Knoxville</li> </ul>"},{"location":"courses/146168_40605_KUPER_Functional_Programming/README.md/#about","title":"About","text":"<ul> <li>Poly/ML Basis<ul> <li>Poly/ML Basis Library</li> </ul> </li> </ul>"},{"location":"courses/146199_39518_SZYMANIK_Computational_Logic/","title":"Computational Logic","text":"<p>\u2190 Back</p>"},{"location":"courses/146199_39518_SZYMANIK_Computational_Logic/#basic-info","title":"Basic Info","text":"<ul> <li>Course ID: 146199</li> <li>Professor: Szymanik</li> <li> <p>Moodle</p> </li> <li> <p>Download</p> </li> </ul> Name Type Item Size README md / 1 KiB"},{"location":"courses/146199_39518_SZYMANIK_Computational_Logic/#more-info","title":"More Info","text":""},{"location":"courses/146199_39518_SZYMANIK_Computational_Logic/#moodle-link","title":"Moodle Link","text":"<ul> <li>[146199] Computational Logic - SZYMANIK</li> </ul>"},{"location":"courses/146199_39518_SZYMANIK_Computational_Logic/#textbook","title":"Textbook","text":"<ul> <li>Logic in Computer Science: Modelling and Reasoning about Systems - Michael Huth, Mark Ryan - Second Edition</li> <li>Mathematical Logic through Python - Yannai A. Gonczarowski, Noam Nisan</li> </ul>"},{"location":"courses/146199_39518_SZYMANIK_Computational_Logic/#about","title":"About","text":"<ul> <li>Logic</li> <li>Logicomix</li> <li>ChatGPT<ul> <li>A Categorical Archive of ChatGPT Failures</li> <li>Testing the limits of logical reasoning in neural and hybrid models</li> <li>Benchmarking Neural Network Generalization for Grammar Induction</li> </ul> </li> <li>Are NNs capable of compositional interpretation?</li> <li>Compositionality Decomposed:  How doNeural Networks Generalise?</li> </ul>"},{"location":"courses/146199_39518_SZYMANIK_Computational_Logic/README.md/","title":"README","text":"<p>\u2190 Back</p>"},{"location":"courses/146199_39518_SZYMANIK_Computational_Logic/README.md/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    md</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Computational Logic\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"courses/146199_39518_SZYMANIK_Computational_Logic/README.md/#more-info","title":"More Info","text":""},{"location":"courses/146199_39518_SZYMANIK_Computational_Logic/README.md/#moodle-link","title":"Moodle Link","text":"<ul> <li>[146199] Computational Logic - SZYMANIK</li> </ul>"},{"location":"courses/146199_39518_SZYMANIK_Computational_Logic/README.md/#textbook","title":"Textbook","text":"<ul> <li>Logic in Computer Science: Modelling and Reasoning about Systems - Michael Huth, Mark Ryan - Second Edition</li> <li>Mathematical Logic through Python - Yannai A. Gonczarowski, Noam Nisan</li> </ul>"},{"location":"courses/146199_39518_SZYMANIK_Computational_Logic/README.md/#about","title":"About","text":"<ul> <li>Logic</li> <li>Logicomix</li> <li>ChatGPT<ul> <li>A Categorical Archive of ChatGPT Failures</li> <li>Testing the limits of logical reasoning in neural and hybrid models</li> <li>Benchmarking Neural Network Generalization for Grammar Induction</li> </ul> </li> <li>Are NNs capable of compositional interpretation?</li> <li>Compositionality Decomposed:  How doNeural Networks Generalise?</li> </ul>"},{"location":"courses/146289_40688_CHITTARO_Mathematics_for_Informatics/","title":"Mathematics for Informatics","text":"<p>\u2190 Back</p>"},{"location":"courses/146289_40688_CHITTARO_Mathematics_for_Informatics/#basic-info","title":"Basic Info","text":"<ul> <li>Course ID: 146289</li> <li>Professor: Chittaro</li> <li> <p>Moodle</p> </li> <li> <p>Download</p> </li> </ul> Name Type Item Size README md / 8 KiB"},{"location":"courses/146289_40688_CHITTARO_Mathematics_for_Informatics/#more-info","title":"More Info","text":""},{"location":"courses/146289_40688_CHITTARO_Mathematics_for_Informatics/#moodle-link","title":"Moodle Link","text":"<ul> <li>[146289] Mathematics for Informatics - CHITTARO</li> </ul>"},{"location":"courses/146289_40688_CHITTARO_Mathematics_for_Informatics/#textbook","title":"Textbook","text":"<ul> <li>Mathematics for Computer Science - Eric Lehman, F Thomson Leighton, Albert R Meyer</li> <li>Algebretta - Benedetto Scimemi</li> <li>Matematica Discreta - Costantino Delizia, Patrizia Longobardi, Mercede Maj, Chiara Nicotera</li> <li>Algebra e Matematica Discreta - Alberto Facchini</li> <li>Invitation to Discrete Mathematics - Jir\u030ci\u0301 Matous\u030cek, Jaroslav Ne\u0161et\u0159il</li> <li>Discrete Mathematics - Norman L. Biggs</li> </ul>"},{"location":"courses/146289_40688_CHITTARO_Mathematics_for_Informatics/#about","title":"About","text":"<ul> <li>Mathematics for Computer Science</li> <li>MIT 6.042J Mathematics for Computer Science, Spring 2015</li> <li>Material and Exam mode</li> <li>Fondamenti Matematici per l'Informatica</li> <li>Peano's Axioms<ul> <li>Construction of Number Systems - N. Mohan Kumar</li> </ul> </li> <li>Recurrence Theorem</li> <li>Chapter Four: The Natural Numbers, Induction, and Recursive Definition</li> <li>The shifted induction principle</li> <li>The Principle of Induction</li> </ul>"},{"location":"courses/146289_40688_CHITTARO_Mathematics_for_Informatics/#reference","title":"Reference","text":"<ul> <li>Lecture 1<ul> <li>Sets<ul> <li>4.1 Sets, 4 Mathematical Data Types</li> </ul> </li> <li>Axiom of Extensionality<ul> <li>4.1.5 Proving Set Equalities</li> <li>8.3.2 The ZFC Axioms for Sets</li> </ul> </li> <li>Subsets<ul> <li>4.1.2 Comparing and Combining Sets</li> <li>8.3.2 The ZFC Axioms for Sets</li> <li>10.7 Representing Partial Orders by Set Containment</li> </ul> </li> <li>Empty set<ul> <li>4.1.1 Some Popular Sets</li> </ul> </li> <li>Axiom of Specification<ul> <li>8.3.2 The ZFC Axioms for Sets</li> </ul> </li> <li>Operations between sets<ul> <li>4.1.2 Comparing and Combining Sets</li> </ul> </li> <li>Binary relations<ul> <li>4.4 Binary Relations</li> </ul> </li> <li>Functions<ul> <li>4.3 Functions</li> </ul> </li> <li>Injective functions, surjective functions, bijective functions<ul> <li>4.4.1 Relation Diagrams</li> </ul> </li> </ul> </li> <li>Lecture 2<ul> <li>Identity function<ul> <li>Problem 4.34.</li> </ul> </li> <li>Inverse of a bijective function<ul> <li>4.4.2 Relational Images</li> </ul> </li> <li>Inverse image of a set with respect to a function<ul> <li>4.4.2 Relational Images</li> </ul> </li> <li>Axiomatic definition of the set of natural numbers: Peano's axioms<ul> <li>Construction of Number Systems - N. Mohan Kumar</li> </ul> </li> <li>Every non-zero natural number is the successor of a natural number<ul> <li>Construction of Number Systems - N. Mohan Kumar</li> </ul> </li> </ul> </li> <li>Lecture 3<ul> <li>Induction principle<ul> <li>5.1.1 A Rule for Ordinary Induction</li> </ul> </li> <li>Recurrence Theorem<ul> <li>V Recurrences</li> </ul> </li> <li>Definition of the sum in the set N (using Recurrence theorem)<ul> <li>Chapter Four: The Natural Numbers, Induction, and Recursive Definition</li> </ul> </li> </ul> </li> <li>Lecture 4<ul> <li>Partial and total orderings<ul> <li>10.6 Partial Orders</li> </ul> </li> <li>The set of natural numbers is a totally ordered set<ul> <li>Wikipedia</li> </ul> </li> <li>The shifted induction principle<ul> <li>The Principle of Induction</li> </ul> </li> </ul> </li> <li>Lecture 5<ul> <li>Well orderings<ul> <li>2 The Well Ordering Principle</li> </ul> </li> <li>The set of natural numbers is well ordered<ul> <li>2 The Well Ordering Principle</li> </ul> </li> <li>The strong induction principle<ul> <li>5.2.1 A Rule for Strong Induction</li> </ul> </li> </ul> </li> <li>Lecture 6<ul> <li>Integer division<ul> <li>9.1 Divisibility</li> </ul> </li> <li>The Euclidean algorithm of division<ul> <li>9.2.1 Euclid\u2019s Algorithm</li> </ul> </li> <li>Representability of integers in base b<ul> <li>Positional notation</li> </ul> </li> <li>Greatest common divisor<ul> <li>9.2 The Greatest Common Divisor</li> </ul> </li> </ul> </li> <li>Lecture 7<ul> <li>Greatest common divisor (existence and uniqueness)<ul> <li>9.2.4 Properties of the Greatest Common Divisor</li> </ul> </li> <li>Extended Euclidean Division Algorithm<ul> <li>9.2.2 The Pulverizer</li> </ul> </li> <li>Properties of coprime numbers<ul> <li>9.3 Prime Mysteries</li> </ul> </li> <li>Characterization of prime numbers<ul> <li>9.3 Prime Mysteries</li> </ul> </li> </ul> </li> <li>Lecture 8<ul> <li>Least common multiple: definition, existence and uniqueness<ul> <li>9.4 The Fundamental Theorem of Arithmetic</li> </ul> </li> <li>The fundamental Theorem of Arithmetics<ul> <li>9.4 The Fundamental Theorem of Arithmetic</li> </ul> </li> <li>Prime numbers are infinite<ul> <li>9.4 The Fundamental Theorem of Arithmetic</li> </ul> </li> <li>Equivalence relations (definition)<ul> <li>10.10 Equivalence Relations</li> </ul> </li> </ul> </li> <li>Lecture 9<ul> <li>Equivalence classes<ul> <li>10.10.1 Equivalence Classes</li> </ul> </li> <li>Congruences modulo n<ul> <li>9.6 Modular Arithmetic</li> </ul> </li> <li>The remainder classes<ul> <li>9.7 Remainder Arithmetic</li> </ul> </li> <li>The set Z/nZ<ul> <li>9.7.1 The ring Z_n</li> </ul> </li> <li>Addition and product of congruence classes<ul> <li>9.7.1 The ring Z_n</li> </ul> </li> </ul> </li> <li>Lecture 10<ul> <li>The Chinese Remainder Theorem<ul> <li>Problem 9.66.</li> </ul> </li> <li>Systems of Congruences<ul> <li>9.6 Modular Arithmetic</li> </ul> </li> </ul> </li> <li>Lecture 11<ul> <li>Invertibility modulo n<ul> <li>9.9 Multiplicative Inverses and Cancelling</li> </ul> </li> <li>Cancellability modulo n<ul> <li>9.9.2 Cancellation</li> </ul> </li> <li>Linear equations mod n<ul> <li>10.10 Equivalence Relations</li> </ul> </li> </ul> </li> </ul>"},{"location":"courses/146289_40688_CHITTARO_Mathematics_for_Informatics/README.md/","title":"README","text":"<p>\u2190 Back</p>"},{"location":"courses/146289_40688_CHITTARO_Mathematics_for_Informatics/README.md/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    md</li> <li>Size:    8 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Mathematics for Informatics\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"courses/146289_40688_CHITTARO_Mathematics_for_Informatics/README.md/#more-info","title":"More Info","text":""},{"location":"courses/146289_40688_CHITTARO_Mathematics_for_Informatics/README.md/#moodle-link","title":"Moodle Link","text":"<ul> <li>[146289] Mathematics for Informatics - CHITTARO</li> </ul>"},{"location":"courses/146289_40688_CHITTARO_Mathematics_for_Informatics/README.md/#textbook","title":"Textbook","text":"<ul> <li>Mathematics for Computer Science - Eric Lehman, F Thomson Leighton, Albert R Meyer</li> <li>Algebretta - Benedetto Scimemi</li> <li>Matematica Discreta - Costantino Delizia, Patrizia Longobardi, Mercede Maj, Chiara Nicotera</li> <li>Algebra e Matematica Discreta - Alberto Facchini</li> <li>Invitation to Discrete Mathematics - Jir\u030ci\u0301 Matous\u030cek, Jaroslav Ne\u0161et\u0159il</li> <li>Discrete Mathematics - Norman L. Biggs</li> </ul>"},{"location":"courses/146289_40688_CHITTARO_Mathematics_for_Informatics/README.md/#about","title":"About","text":"<ul> <li>Mathematics for Computer Science</li> <li>MIT 6.042J Mathematics for Computer Science, Spring 2015</li> <li>Material and Exam mode</li> <li>Fondamenti Matematici per l'Informatica</li> <li>Peano's Axioms<ul> <li>Construction of Number Systems - N. Mohan Kumar</li> </ul> </li> <li>Recurrence Theorem</li> <li>Chapter Four: The Natural Numbers, Induction, and Recursive Definition</li> <li>The shifted induction principle</li> <li>The Principle of Induction</li> </ul>"},{"location":"courses/146289_40688_CHITTARO_Mathematics_for_Informatics/README.md/#reference","title":"Reference","text":"<ul> <li>Lecture 1<ul> <li>Sets<ul> <li>4.1 Sets, 4 Mathematical Data Types</li> </ul> </li> <li>Axiom of Extensionality<ul> <li>4.1.5 Proving Set Equalities</li> <li>8.3.2 The ZFC Axioms for Sets</li> </ul> </li> <li>Subsets<ul> <li>4.1.2 Comparing and Combining Sets</li> <li>8.3.2 The ZFC Axioms for Sets</li> <li>10.7 Representing Partial Orders by Set Containment</li> </ul> </li> <li>Empty set<ul> <li>4.1.1 Some Popular Sets</li> </ul> </li> <li>Axiom of Specification<ul> <li>8.3.2 The ZFC Axioms for Sets</li> </ul> </li> <li>Operations between sets<ul> <li>4.1.2 Comparing and Combining Sets</li> </ul> </li> <li>Binary relations<ul> <li>4.4 Binary Relations</li> </ul> </li> <li>Functions<ul> <li>4.3 Functions</li> </ul> </li> <li>Injective functions, surjective functions, bijective functions<ul> <li>4.4.1 Relation Diagrams</li> </ul> </li> </ul> </li> <li>Lecture 2<ul> <li>Identity function<ul> <li>Problem 4.34.</li> </ul> </li> <li>Inverse of a bijective function<ul> <li>4.4.2 Relational Images</li> </ul> </li> <li>Inverse image of a set with respect to a function<ul> <li>4.4.2 Relational Images</li> </ul> </li> <li>Axiomatic definition of the set of natural numbers: Peano's axioms<ul> <li>Construction of Number Systems - N. Mohan Kumar</li> </ul> </li> <li>Every non-zero natural number is the successor of a natural number<ul> <li>Construction of Number Systems - N. Mohan Kumar</li> </ul> </li> </ul> </li> <li>Lecture 3<ul> <li>Induction principle<ul> <li>5.1.1 A Rule for Ordinary Induction</li> </ul> </li> <li>Recurrence Theorem<ul> <li>V Recurrences</li> </ul> </li> <li>Definition of the sum in the set N (using Recurrence theorem)<ul> <li>Chapter Four: The Natural Numbers, Induction, and Recursive Definition</li> </ul> </li> </ul> </li> <li>Lecture 4<ul> <li>Partial and total orderings<ul> <li>10.6 Partial Orders</li> </ul> </li> <li>The set of natural numbers is a totally ordered set<ul> <li>Wikipedia</li> </ul> </li> <li>The shifted induction principle<ul> <li>The Principle of Induction</li> </ul> </li> </ul> </li> <li>Lecture 5<ul> <li>Well orderings<ul> <li>2 The Well Ordering Principle</li> </ul> </li> <li>The set of natural numbers is well ordered<ul> <li>2 The Well Ordering Principle</li> </ul> </li> <li>The strong induction principle<ul> <li>5.2.1 A Rule for Strong Induction</li> </ul> </li> </ul> </li> <li>Lecture 6<ul> <li>Integer division<ul> <li>9.1 Divisibility</li> </ul> </li> <li>The Euclidean algorithm of division<ul> <li>9.2.1 Euclid\u2019s Algorithm</li> </ul> </li> <li>Representability of integers in base b<ul> <li>Positional notation</li> </ul> </li> <li>Greatest common divisor<ul> <li>9.2 The Greatest Common Divisor</li> </ul> </li> </ul> </li> <li>Lecture 7<ul> <li>Greatest common divisor (existence and uniqueness)<ul> <li>9.2.4 Properties of the Greatest Common Divisor</li> </ul> </li> <li>Extended Euclidean Division Algorithm<ul> <li>9.2.2 The Pulverizer</li> </ul> </li> <li>Properties of coprime numbers<ul> <li>9.3 Prime Mysteries</li> </ul> </li> <li>Characterization of prime numbers<ul> <li>9.3 Prime Mysteries</li> </ul> </li> </ul> </li> <li>Lecture 8<ul> <li>Least common multiple: definition, existence and uniqueness<ul> <li>9.4 The Fundamental Theorem of Arithmetic</li> </ul> </li> <li>The fundamental Theorem of Arithmetics<ul> <li>9.4 The Fundamental Theorem of Arithmetic</li> </ul> </li> <li>Prime numbers are infinite<ul> <li>9.4 The Fundamental Theorem of Arithmetic</li> </ul> </li> <li>Equivalence relations (definition)<ul> <li>10.10 Equivalence Relations</li> </ul> </li> </ul> </li> <li>Lecture 9<ul> <li>Equivalence classes<ul> <li>10.10.1 Equivalence Classes</li> </ul> </li> <li>Congruences modulo n<ul> <li>9.6 Modular Arithmetic</li> </ul> </li> <li>The remainder classes<ul> <li>9.7 Remainder Arithmetic</li> </ul> </li> <li>The set Z/nZ<ul> <li>9.7.1 The ring Z_n</li> </ul> </li> <li>Addition and product of congruence classes<ul> <li>9.7.1 The ring Z_n</li> </ul> </li> </ul> </li> <li>Lecture 10<ul> <li>The Chinese Remainder Theorem<ul> <li>Problem 9.66.</li> </ul> </li> <li>Systems of Congruences<ul> <li>9.6 Modular Arithmetic</li> </ul> </li> </ul> </li> <li>Lecture 11<ul> <li>Invertibility modulo n<ul> <li>9.9 Multiplicative Inverses and Cancelling</li> </ul> </li> <li>Cancellability modulo n<ul> <li>9.9.2 Cancellation</li> </ul> </li> <li>Linear equations mod n<ul> <li>10.10 Equivalence Relations</li> </ul> </li> </ul> </li> </ul>"},{"location":"courses/146290_39264_VELLA_Algorithms_and_Data_Structures_part_1/","title":"Algorithms and Data Structures part 1","text":"<p>\u2190 Back</p>"},{"location":"courses/146290_39264_VELLA_Algorithms_and_Data_Structures_part_1/#basic-info","title":"Basic Info","text":"<ul> <li>Course ID: 146290</li> <li>Professor: Vella</li> <li> <p>Moodle</p> </li> <li> <p>Download</p> </li> </ul> Name Type Item Size Lab / 3 items 3 KiB README md / 2 KiB"},{"location":"courses/146290_39264_VELLA_Algorithms_and_Data_Structures_part_1/#more-info","title":"More Info","text":""},{"location":"courses/146290_39264_VELLA_Algorithms_and_Data_Structures_part_1/#moodle-link","title":"Moodle Link","text":"<ul> <li>[146290] Algorithms and Data Structures (part 1) - VELLA</li> </ul>"},{"location":"courses/146290_39264_VELLA_Algorithms_and_Data_Structures_part_1/#textbook","title":"Textbook","text":"<ul> <li>Introduction to Algorithms - Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein - Third Edition - Massachusetts Institute of Technology</li> <li>link 1</li> <li>link 2</li> <li>link 3</li> </ul>"},{"location":"courses/146290_39264_VELLA_Algorithms_and_Data_Structures_part_1/#about","title":"About","text":"<ul> <li>PhD jokes<ul> <li>PhD Comics</li> </ul> </li> <li>algorithm<ul> <li>Programming pearls: algorithm design techniques</li> </ul> </li> <li>C bible<ul> <li>The C Programming Language - Brian W. Kernighan, Dennis M. Ritchie - Second Edition</li> <li>link 1</li> <li>link 2</li> <li>link 3</li> </ul> </li> <li>Multiplication<ul> <li>Integer multiplication in time O(n log n)</li> <li>link 1</li> <li>link 2</li> </ul> </li> <li>algorithm assembly instructions<ul> <li>IDEA</li> </ul> </li> </ul>"},{"location":"courses/146290_39264_VELLA_Algorithms_and_Data_Structures_part_1/Lab/","title":"Lab","text":"<p>\u2190 Back</p>"},{"location":"courses/146290_39264_VELLA_Algorithms_and_Data_Structures_part_1/Lab/#basic-info","title":"Basic Info","text":"<ul> <li>Item: 3 items</li> <li>Size:  3 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Algorithms and Data Structures part 1\n\u2514\u2500\u2500 Lab\n</code></pre> Name Type Item Size ex01 A c / 517 B ex01 B c / 977 B ex01 C c / 1 KiB"},{"location":"courses/146290_39264_VELLA_Algorithms_and_Data_Structures_part_1/Lab/ex01-A.c/","title":"ex01 A","text":"<p>\u2190 Back</p>"},{"location":"courses/146290_39264_VELLA_Algorithms_and_Data_Structures_part_1/Lab/ex01-A.c/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    c</li> <li>Size:    517 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Algorithms and Data Structures part 1\n\u2514\u2500\u2500 Lab\n    \u2514\u2500\u2500 ex01 A.c\n</code></pre>"},{"location":"courses/146290_39264_VELLA_Algorithms_and_Data_Structures_part_1/Lab/ex01-A.c/#preview","title":"Preview","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nconst int MAX_SIZE = 10;\n\nint* char_to_int(char** C, int n){\n    int* res = (int*)malloc(n * sizeof(int));\n    for(int i = 0; i &lt; n; i++){res[i] = atoi(C[i]);}\n\n    return res;\n}\n\nint array_element_mininum(int* A, int n){\n    int res = A[0];\n    for(int i = 1; i &lt; n; i++){res = (A[i] &gt; res)? res: A[i];}\n\n    return res;\n}\n\nint main(int argc, char** argv){\n    printf(\"Mininum element: %d\\n\", array_element_mininum(char_to_int(&amp;argv[1], MAX_SIZE), MAX_SIZE));\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146290_39264_VELLA_Algorithms_and_Data_Structures_part_1/Lab/ex01-B.c/","title":"ex01 B","text":"<p>\u2190 Back</p>"},{"location":"courses/146290_39264_VELLA_Algorithms_and_Data_Structures_part_1/Lab/ex01-B.c/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    c</li> <li>Size:    977 B</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Algorithms and Data Structures part 1\n\u2514\u2500\u2500 Lab\n    \u2514\u2500\u2500 ex01 B.c\n</code></pre>"},{"location":"courses/146290_39264_VELLA_Algorithms_and_Data_Structures_part_1/Lab/ex01-B.c/#preview","title":"Preview","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nconst int MAX_SIZE = 10;\n\nint* char_to_int(char** C, int n){\n    int* res = (int*)malloc(n * sizeof(int));\n    for(int i = 0; i &lt; n; i++){res[i] = atoi(C[i]);}\n\n    return res;\n}\n\nint array_search(int* A, int n, int target){\n    int res = -1;\n    for(int i = 0; (i &lt; n &amp;&amp; res == -1); i++){\n        if(A[i] == target){\n            A[i] = 0;\n            res = i;\n        }\n    }\n\n    return res;\n}\n\nint array_search_r(int* A, int n, int target, int i){\n    if(i &gt;= n){return -1;}{\n        if(A[0] == target){\n            A[0] = 0;\n\n            return i;\n        }\n        else{return array_search_r(&amp;A[1], n, target, 1 + i);}\n    }\n}\n\nint main(int argc, char** argv){\n    printf(\"Target index: %d\\n\", array_search(char_to_int(&amp;argv[1], MAX_SIZE), MAX_SIZE, atoi(argv[1 + MAX_SIZE])));\n    printf(\"Target index (recursive): %d\\n\", array_search_r(char_to_int(&amp;argv[1], MAX_SIZE), MAX_SIZE, atoi(argv[1 + MAX_SIZE]), 0));\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146290_39264_VELLA_Algorithms_and_Data_Structures_part_1/Lab/ex01-C.c/","title":"ex01 C","text":"<p>\u2190 Back</p>"},{"location":"courses/146290_39264_VELLA_Algorithms_and_Data_Structures_part_1/Lab/ex01-C.c/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    c</li> <li>Size:    1 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Algorithms and Data Structures part 1\n\u2514\u2500\u2500 Lab\n    \u2514\u2500\u2500 ex01 C.c\n</code></pre>"},{"location":"courses/146290_39264_VELLA_Algorithms_and_Data_Structures_part_1/Lab/ex01-C.c/#preview","title":"Preview","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nconst int MAX_SIZE = 20;\n\nstruct student{unsigned int score, studentId;};\n\nstruct student* student_array_new(int n){return (struct student*)malloc(MAX_SIZE * sizeof(struct student));}\n\nvoid insert(struct student* S, int p, int s, int ID){\n    S[p].score = s;\n    S[p].studentId = ID;\n}\n\nvoid read(struct student* S, int p){\n    printf(\"- score:    %d\\n\", S[p].score);\n    printf(\"- ID:       %d\\n\", S[p].studentId);\n}\n\nint main(){\n    char choice;\n    struct student* S = student_array_new(MAX_SIZE);\n    while(1){\n        printf(\"Please choose:\\n- i: insert\\n- r: read\\n- q: quit\\nPlease input your choice: \");\n        scanf(\"%s\", &amp;choice);\n\n        switch(choice){\n            case 'i':{\n                int p, s, ID;\n                printf(\"Insert:\\n- position: \");\n                scanf(\"%d\", &amp;p);\n                printf(\"- score:    \");\n                scanf(\"%d\", &amp;s);\n                printf(\"- ID:       \");\n                scanf(\"%d\", &amp;ID);\n\n                insert(S, p, s, ID);\n\n                break;\n            }\n            case 'r':{\n                int p;\n                printf(\"Insert:\\n- position: \");\n                scanf(\"%d\", &amp;p);\n\n                read(S, p);\n\n                break;\n            }\n            case 'q': return 0;\n        }\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"courses/146290_39264_VELLA_Algorithms_and_Data_Structures_part_1/README.md/","title":"README","text":"<p>\u2190 Back</p>"},{"location":"courses/146290_39264_VELLA_Algorithms_and_Data_Structures_part_1/README.md/#basic-info","title":"Basic Info","text":"<ul> <li>Type:    md</li> <li>Size:    2 KiB</li> <li> <p>Origin</p> </li> <li> <p>Download</p> </li> </ul> <pre><code>Algorithms and Data Structures part 1\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"courses/146290_39264_VELLA_Algorithms_and_Data_Structures_part_1/README.md/#more-info","title":"More Info","text":""},{"location":"courses/146290_39264_VELLA_Algorithms_and_Data_Structures_part_1/README.md/#moodle-link","title":"Moodle Link","text":"<ul> <li>[146290] Algorithms and Data Structures (part 1) - VELLA</li> </ul>"},{"location":"courses/146290_39264_VELLA_Algorithms_and_Data_Structures_part_1/README.md/#textbook","title":"Textbook","text":"<ul> <li>Introduction to Algorithms - Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein - Third Edition - Massachusetts Institute of Technology</li> <li>link 1</li> <li>link 2</li> <li>link 3</li> </ul>"},{"location":"courses/146290_39264_VELLA_Algorithms_and_Data_Structures_part_1/README.md/#about","title":"About","text":"<ul> <li>PhD jokes<ul> <li>PhD Comics</li> </ul> </li> <li>algorithm<ul> <li>Programming pearls: algorithm design techniques</li> </ul> </li> <li>C bible<ul> <li>The C Programming Language - Brian W. Kernighan, Dennis M. Ritchie - Second Edition</li> <li>link 1</li> <li>link 2</li> <li>link 3</li> </ul> </li> <li>Multiplication<ul> <li>Integer multiplication in time O(n log n)</li> <li>link 1</li> <li>link 2</li> </ul> </li> <li>algorithm assembly instructions<ul> <li>IDEA</li> </ul> </li> </ul>"},{"location":"search/","title":"Bachelor of Computer Science","text":"UniTrento BSc 2024/2025 Did you study today?"}]}